
F:\Documents\Atollic\TrueSTUDIO\ARM_workspace_7.1\spimaster\Debug\spimaster.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002cf8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08002e04  08002e04  00012e04  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002e8c  08002e8c  00012e8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002e90  08002e90  00012e90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000158  20000000  08002e94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000ae8  20000158  08002fec  00020158  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000c40  08002fec  00020c40  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020158  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000e5dc  00000000  00000000  00020181  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002e3a  00000000  00000000  0002e75d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005aef  00000000  00000000  00031597  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000009d8  00000000  00000000  00037088  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000bc0  00000000  00000000  00037a60  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000052e1  00000000  00000000  00038620  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002dec  00000000  00000000  0003d901  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007e  00000000  00000000  000406ed  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001808  00000000  00000000  0004076c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000158 	.word	0x20000158
 8000128:	00000000 	.word	0x00000000
 800012c:	08002dec 	.word	0x08002dec

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000015c 	.word	0x2000015c
 8000148:	08002dec 	.word	0x08002dec

0800014c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800014c:	b510      	push	{r4, lr}
 800014e:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000150:	f001 f8dc 	bl	800130c <HAL_RCC_GetHCLKFreq>
 8000154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000158:	fbb0 f0f3 	udiv	r0, r0, r3
 800015c:	f000 f888 	bl	8000270 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8000160:	2200      	movs	r2, #0
 8000162:	4621      	mov	r1, r4
 8000164:	f04f 30ff 	mov.w	r0, #4294967295
 8000168:	f000 f842 	bl	80001f0 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 800016c:	2000      	movs	r0, #0
 800016e:	bd10      	pop	{r4, pc}

08000170 <HAL_Init>:
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000170:	4a07      	ldr	r2, [pc, #28]	; (8000190 <HAL_Init+0x20>)
  *        In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000172:	b508      	push	{r3, lr}
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000174:	6813      	ldr	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000176:	2003      	movs	r0, #3
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000178:	f043 0310 	orr.w	r3, r3, #16
 800017c:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800017e:	f000 f825 	bl	80001cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000182:	2000      	movs	r0, #0
 8000184:	f7ff ffe2 	bl	800014c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000188:	f002 fb76 	bl	8002878 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 800018c:	2000      	movs	r0, #0
 800018e:	bd08      	pop	{r3, pc}
 8000190:	40022000 	.word	0x40022000

08000194 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000194:	4a02      	ldr	r2, [pc, #8]	; (80001a0 <HAL_IncTick+0xc>)
 8000196:	6813      	ldr	r3, [r2, #0]
 8000198:	3301      	adds	r3, #1
 800019a:	6013      	str	r3, [r2, #0]
 800019c:	4770      	bx	lr
 800019e:	bf00      	nop
 80001a0:	20000174 	.word	0x20000174

080001a4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001a4:	4b01      	ldr	r3, [pc, #4]	; (80001ac <HAL_GetTick+0x8>)
 80001a6:	6818      	ldr	r0, [r3, #0]
}
 80001a8:	4770      	bx	lr
 80001aa:	bf00      	nop
 80001ac:	20000174 	.word	0x20000174

080001b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80001b0:	b513      	push	{r0, r1, r4, lr}
 80001b2:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 80001b4:	f7ff fff6 	bl	80001a4 <HAL_GetTick>
 80001b8:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 80001ba:	f7ff fff3 	bl	80001a4 <HAL_GetTick>
 80001be:	9b01      	ldr	r3, [sp, #4]
 80001c0:	1b00      	subs	r0, r0, r4
 80001c2:	4298      	cmp	r0, r3
 80001c4:	d3f9      	bcc.n	80001ba <HAL_Delay+0xa>
  {
  }
}
 80001c6:	b002      	add	sp, #8
 80001c8:	bd10      	pop	{r4, pc}
	...

080001cc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001cc:	4a07      	ldr	r2, [pc, #28]	; (80001ec <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 80001ce:	0200      	lsls	r0, r0, #8
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001d0:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 80001d2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 80001d6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80001da:	041b      	lsls	r3, r3, #16
 80001dc:	0c1b      	lsrs	r3, r3, #16
 80001de:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80001e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80001e6:	4303      	orrs	r3, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 80001e8:	60d3      	str	r3, [r2, #12]
 80001ea:	4770      	bx	lr
 80001ec:	e000ed00 	.word	0xe000ed00

080001f0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80001f0:	4b17      	ldr	r3, [pc, #92]	; (8000250 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80001f2:	b530      	push	{r4, r5, lr}
 80001f4:	68db      	ldr	r3, [r3, #12]
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80001f6:	f3c3 2302 	ubfx	r3, r3, #8, #3
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80001fa:	f1c3 0407 	rsb	r4, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80001fe:	1d1d      	adds	r5, r3, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000200:	2c04      	cmp	r4, #4
 8000202:	bf28      	it	cs
 8000204:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000206:	2d06      	cmp	r5, #6

  return (
 8000208:	f04f 0501 	mov.w	r5, #1
 800020c:	fa05 f404 	lsl.w	r4, r5, r4
 8000210:	f104 34ff 	add.w	r4, r4, #4294967295
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000214:	bf8c      	ite	hi
 8000216:	3b03      	subhi	r3, #3
 8000218:	2300      	movls	r3, #0

  return (
 800021a:	400c      	ands	r4, r1
 800021c:	409c      	lsls	r4, r3
 800021e:	fa05 f303 	lsl.w	r3, r5, r3
 8000222:	3b01      	subs	r3, #1
 8000224:	401a      	ands	r2, r3
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8000226:	2800      	cmp	r0, #0
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8000228:	ea42 0204 	orr.w	r2, r2, r4
 800022c:	ea4f 1202 	mov.w	r2, r2, lsl #4
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000230:	bfaf      	iteee	ge
 8000232:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000236:	4b07      	ldrlt	r3, [pc, #28]	; (8000254 <HAL_NVIC_SetPriority+0x64>)
 8000238:	f000 000f 	andlt.w	r0, r0, #15
 800023c:	b2d2      	uxtblt	r2, r2
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800023e:	bfa5      	ittet	ge
 8000240:	b2d2      	uxtbge	r2, r2
 8000242:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000246:	541a      	strblt	r2, [r3, r0]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000248:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 800024c:	bd30      	pop	{r4, r5, pc}
 800024e:	bf00      	nop
 8000250:	e000ed00 	.word	0xe000ed00
 8000254:	e000ed14 	.word	0xe000ed14

08000258 <HAL_NVIC_EnableIRQ>:
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000258:	0942      	lsrs	r2, r0, #5
 800025a:	2301      	movs	r3, #1
 800025c:	f000 001f 	and.w	r0, r0, #31
 8000260:	fa03 f000 	lsl.w	r0, r3, r0
 8000264:	4b01      	ldr	r3, [pc, #4]	; (800026c <HAL_NVIC_EnableIRQ+0x14>)
 8000266:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800026a:	4770      	bx	lr
 800026c:	e000e100 	.word	0xe000e100

08000270 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000270:	3801      	subs	r0, #1
 8000272:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000276:	d20a      	bcs.n	800028e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000278:	4b06      	ldr	r3, [pc, #24]	; (8000294 <HAL_SYSTICK_Config+0x24>)
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800027a:	4a07      	ldr	r2, [pc, #28]	; (8000298 <HAL_SYSTICK_Config+0x28>)
 800027c:	21f0      	movs	r1, #240	; 0xf0
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800027e:	6058      	str	r0, [r3, #4]
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000280:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000284:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000286:	2207      	movs	r2, #7
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000288:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800028a:	601a      	str	r2, [r3, #0]
 800028c:	4770      	bx	lr
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
 800028e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000290:	4770      	bx	lr
 8000292:	bf00      	nop
 8000294:	e000e010 	.word	0xe000e010
 8000298:	e000ed00 	.word	0xe000ed00

0800029c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 800029c:	4b04      	ldr	r3, [pc, #16]	; (80002b0 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800029e:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80002a0:	681a      	ldr	r2, [r3, #0]
 80002a2:	bf0c      	ite	eq
 80002a4:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80002a8:	f022 0204 	bicne.w	r2, r2, #4
 80002ac:	601a      	str	r2, [r3, #0]
 80002ae:	4770      	bx	lr
 80002b0:	e000e010 	.word	0xe000e010

080002b4 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80002b4:	4770      	bx	lr

080002b6 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80002b6:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80002b8:	f7ff fffc 	bl	80002b4 <HAL_SYSTICK_Callback>
 80002bc:	bd08      	pop	{r3, pc}
	...

080002c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80002c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00;
  uint32_t iocurrent = 0x00;
  uint32_t temp = 0x00;
  uint32_t config = 0x00;
 80002c4:	2400      	movs	r4, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80002c6:	4626      	mov	r6, r4
 80002c8:	4b62      	ldr	r3, [pc, #392]	; (8000454 <HAL_GPIO_Init+0x194>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80002ca:	f8df e194 	ldr.w	lr, [pc, #404]	; 8000460 <HAL_GPIO_Init+0x1a0>
 80002ce:	f8df c194 	ldr.w	ip, [pc, #404]	; 8000464 <HAL_GPIO_Init+0x1a4>

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80002d2:	2201      	movs	r2, #1
    
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if (iocurrent == ioposition)
 80002d4:	680d      	ldr	r5, [r1, #0]

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80002d6:	40b2      	lsls	r2, r6
    
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if (iocurrent == ioposition)
 80002d8:	ea32 0505 	bics.w	r5, r2, r5
 80002dc:	f040 80b3 	bne.w	8000446 <HAL_GPIO_Init+0x186>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80002e0:	684d      	ldr	r5, [r1, #4]
 80002e2:	2d12      	cmp	r5, #18
 80002e4:	d028      	beq.n	8000338 <HAL_GPIO_Init+0x78>
 80002e6:	d80e      	bhi.n	8000306 <HAL_GPIO_Init+0x46>
 80002e8:	2d02      	cmp	r5, #2
 80002ea:	d022      	beq.n	8000332 <HAL_GPIO_Init+0x72>
 80002ec:	d804      	bhi.n	80002f8 <HAL_GPIO_Init+0x38>
 80002ee:	b335      	cbz	r5, 800033e <HAL_GPIO_Init+0x7e>
 80002f0:	2d01      	cmp	r5, #1
 80002f2:	d12d      	bne.n	8000350 <HAL_GPIO_Init+0x90>
      {
        /* If we are configuring the pin in OUTPUT push-pull mode */
        case GPIO_MODE_OUTPUT_PP:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80002f4:	68cc      	ldr	r4, [r1, #12]
          break;
 80002f6:	e02b      	b.n	8000350 <HAL_GPIO_Init+0x90>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80002f8:	2d03      	cmp	r5, #3
 80002fa:	d018      	beq.n	800032e <HAL_GPIO_Init+0x6e>
 80002fc:	2d11      	cmp	r5, #17
 80002fe:	d127      	bne.n	8000350 <HAL_GPIO_Init+0x90>
          
        /* If we are configuring the pin in OUTPUT open-drain mode */
        case GPIO_MODE_OUTPUT_OD:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000300:	68cc      	ldr	r4, [r1, #12]
 8000302:	3404      	adds	r4, #4
          break;
 8000304:	e024      	b.n	8000350 <HAL_GPIO_Init+0x90>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000306:	4f54      	ldr	r7, [pc, #336]	; (8000458 <HAL_GPIO_Init+0x198>)
 8000308:	42bd      	cmp	r5, r7
 800030a:	d018      	beq.n	800033e <HAL_GPIO_Init+0x7e>
 800030c:	d806      	bhi.n	800031c <HAL_GPIO_Init+0x5c>
 800030e:	f8df 8158 	ldr.w	r8, [pc, #344]	; 8000468 <HAL_GPIO_Init+0x1a8>
 8000312:	4545      	cmp	r5, r8
 8000314:	d013      	beq.n	800033e <HAL_GPIO_Init+0x7e>
 8000316:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
 800031a:	e005      	b.n	8000328 <HAL_GPIO_Init+0x68>
 800031c:	4575      	cmp	r5, lr
 800031e:	d00e      	beq.n	800033e <HAL_GPIO_Init+0x7e>
 8000320:	4565      	cmp	r5, ip
 8000322:	d00c      	beq.n	800033e <HAL_GPIO_Init+0x7e>
 8000324:	f8df 8144 	ldr.w	r8, [pc, #324]	; 800046c <HAL_GPIO_Init+0x1ac>
 8000328:	4545      	cmp	r5, r8
 800032a:	d111      	bne.n	8000350 <HAL_GPIO_Init+0x90>
 800032c:	e007      	b.n	800033e <HAL_GPIO_Init+0x7e>
          }
          break; 
          
        /* If we are configuring the pin in INPUT analog mode */
        case GPIO_MODE_ANALOG:
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800032e:	2400      	movs	r4, #0
 8000330:	e00e      	b.n	8000350 <HAL_GPIO_Init+0x90>
          
        /* If we are configuring the pin in ALTERNATE FUNCTION push-pull mode */
        case GPIO_MODE_AF_PP:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000332:	68cc      	ldr	r4, [r1, #12]
 8000334:	3408      	adds	r4, #8
          break;
 8000336:	e00b      	b.n	8000350 <HAL_GPIO_Init+0x90>
          
        /* If we are configuring the pin in ALTERNATE FUNCTION open-drain mode */
        case GPIO_MODE_AF_OD:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000338:	68cc      	ldr	r4, [r1, #12]
 800033a:	340c      	adds	r4, #12
          break;
 800033c:	e008      	b.n	8000350 <HAL_GPIO_Init+0x90>
        case GPIO_MODE_EVT_RISING:
        case GPIO_MODE_EVT_FALLING:
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if(GPIO_Init->Pull == GPIO_NOPULL)
 800033e:	688c      	ldr	r4, [r1, #8]
 8000340:	b12c      	cbz	r4, 800034e <HAL_GPIO_Init+0x8e>
          {  
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
          }
          else if(GPIO_Init->Pull == GPIO_PULLUP)
 8000342:	2c01      	cmp	r4, #1
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
            
            /* Set the corresponding ODR bit */
            GPIOx->BSRR = ioposition;
 8000344:	bf0c      	ite	eq
 8000346:	6102      	streq	r2, [r0, #16]
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
            
            /* Reset the corresponding ODR bit */
            GPIOx->BRR = ioposition;
 8000348:	6142      	strne	r2, [r0, #20]
            /* Set the corresponding ODR bit */
            GPIOx->BSRR = ioposition;
          }
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800034a:	2408      	movs	r4, #8
 800034c:	e000      	b.n	8000350 <HAL_GPIO_Init+0x90>
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if(GPIO_Init->Pull == GPIO_NOPULL)
          {  
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800034e:	2404      	movs	r4, #4
          break;
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000350:	2aff      	cmp	r2, #255	; 0xff
 8000352:	bf97      	itett	ls
 8000354:	4683      	movls	fp, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2) : ((position - 8) << 2);
 8000356:	f1a6 0508 	subhi.w	r5, r6, #8
          break;
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800035a:	f8d0 9000 	ldrls.w	r9, [r0]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2) : ((position - 8) << 2);
 800035e:	00b5      	lslls	r5, r6, #2
          break;
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000360:	bf84      	itt	hi
 8000362:	f8d0 9004 	ldrhi.w	r9, [r0, #4]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2) : ((position - 8) << 2);
 8000366:	00ad      	lslhi	r5, r5, #2
      
      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 8000368:	f04f 080f 	mov.w	r8, #15
 800036c:	fa08 fa05 	lsl.w	sl, r8, r5
 8000370:	ea29 090a 	bic.w	r9, r9, sl
 8000374:	fa04 f505 	lsl.w	r5, r4, r5
          break;
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000378:	bf88      	it	hi
 800037a:	f100 0b04 	addhi.w	fp, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2) : ((position - 8) << 2);
      
      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 800037e:	ea49 0505 	orr.w	r5, r9, r5
 8000382:	f8cb 5000 	str.w	r5, [fp]
      
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000386:	f8d1 9004 	ldr.w	r9, [r1, #4]
 800038a:	f019 5f80 	tst.w	r9, #268435456	; 0x10000000
 800038e:	d05a      	beq.n	8000446 <HAL_GPIO_Init+0x186>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000390:	4d32      	ldr	r5, [pc, #200]	; (800045c <HAL_GPIO_Init+0x19c>)
 8000392:	4f32      	ldr	r7, [pc, #200]	; (800045c <HAL_GPIO_Init+0x19c>)
 8000394:	69ad      	ldr	r5, [r5, #24]
        temp = AFIO->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000396:	f006 0a03 	and.w	sl, r6, #3
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800039a:	f045 0501 	orr.w	r5, r5, #1
 800039e:	61bd      	str	r5, [r7, #24]
 80003a0:	69bd      	ldr	r5, [r7, #24]
        temp = AFIO->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 80003a2:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80003a6:	f005 0501 	and.w	r5, r5, #1
 80003aa:	9501      	str	r5, [sp, #4]
 80003ac:	9d01      	ldr	r5, [sp, #4]
 80003ae:	f026 0503 	bic.w	r5, r6, #3
 80003b2:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 80003b6:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2];
 80003ba:	f8d5 b008 	ldr.w	fp, [r5, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80003be:	f5a7 3784 	sub.w	r7, r7, #67584	; 0x10800
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
        temp = AFIO->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 80003c2:	fa08 f80a 	lsl.w	r8, r8, sl
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80003c6:	42b8      	cmp	r0, r7
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
        temp = AFIO->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 80003c8:	ea2b 0808 	bic.w	r8, fp, r8
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80003cc:	d010      	beq.n	80003f0 <HAL_GPIO_Init+0x130>
 80003ce:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80003d2:	42b8      	cmp	r0, r7
 80003d4:	d00f      	beq.n	80003f6 <HAL_GPIO_Init+0x136>
 80003d6:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80003da:	42b8      	cmp	r0, r7
 80003dc:	d00e      	beq.n	80003fc <HAL_GPIO_Init+0x13c>
 80003de:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80003e2:	42b8      	cmp	r0, r7
 80003e4:	bf0c      	ite	eq
 80003e6:	f04f 0b03 	moveq.w	fp, #3
 80003ea:	f04f 0b04 	movne.w	fp, #4
 80003ee:	e007      	b.n	8000400 <HAL_GPIO_Init+0x140>
 80003f0:	f04f 0b00 	mov.w	fp, #0
 80003f4:	e004      	b.n	8000400 <HAL_GPIO_Init+0x140>
 80003f6:	f04f 0b01 	mov.w	fp, #1
 80003fa:	e001      	b.n	8000400 <HAL_GPIO_Init+0x140>
 80003fc:	f04f 0b02 	mov.w	fp, #2
 8000400:	fa0b fa0a 	lsl.w	sl, fp, sl
 8000404:	ea4a 0a08 	orr.w	sl, sl, r8
        AFIO->EXTICR[position >> 2] = temp;
 8000408:	f8c5 a008 	str.w	sl, [r5, #8]
        

        /* Configure the interrupt mask */
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent); 
 800040c:	681d      	ldr	r5, [r3, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        AFIO->EXTICR[position >> 2] = temp;
        

        /* Configure the interrupt mask */
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800040e:	f419 3f80 	tst.w	r9, #65536	; 0x10000
        {
          SET_BIT(EXTI->IMR, iocurrent); 
 8000412:	bf14      	ite	ne
 8000414:	4315      	orrne	r5, r2
        } 
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent); 
 8000416:	4395      	biceq	r5, r2
 8000418:	601d      	str	r5, [r3, #0]
        } 
        
        /* Configure the event mask */
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent); 
 800041a:	685d      	ldr	r5, [r3, #4]
        {
          CLEAR_BIT(EXTI->IMR, iocurrent); 
        } 
        
        /* Configure the event mask */
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800041c:	f419 3f00 	tst.w	r9, #131072	; 0x20000
        {
          SET_BIT(EXTI->EMR, iocurrent); 
 8000420:	bf14      	ite	ne
 8000422:	4315      	orrne	r5, r2
        } 
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent); 
 8000424:	4395      	biceq	r5, r2
 8000426:	605d      	str	r5, [r3, #4]
        }
        
        /* Enable or disable the rising trigger */
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent); 
 8000428:	689d      	ldr	r5, [r3, #8]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent); 
        }
        
        /* Enable or disable the rising trigger */
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800042a:	f419 1f80 	tst.w	r9, #1048576	; 0x100000
        {
          SET_BIT(EXTI->RTSR, iocurrent); 
 800042e:	bf14      	ite	ne
 8000430:	4315      	orrne	r5, r2
        } 
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent); 
 8000432:	4395      	biceq	r5, r2
 8000434:	609d      	str	r5, [r3, #8]
        }
        
        /* Enable or disable the falling trigger */
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent); 
 8000436:	68dd      	ldr	r5, [r3, #12]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent); 
        }
        
        /* Enable or disable the falling trigger */
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000438:	f419 1f00 	tst.w	r9, #2097152	; 0x200000
        {
          SET_BIT(EXTI->FTSR, iocurrent); 
 800043c:	bf14      	ite	ne
 800043e:	432a      	orrne	r2, r5
        } 
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
 8000440:	ea25 0202 	biceq.w	r2, r5, r2
 8000444:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8000446:	3601      	adds	r6, #1
 8000448:	2e10      	cmp	r6, #16
 800044a:	f47f af42 	bne.w	80002d2 <HAL_GPIO_Init+0x12>
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
        }
      }
    }
  }
}
 800044e:	b003      	add	sp, #12
 8000450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000454:	40010400 	.word	0x40010400
 8000458:	10210000 	.word	0x10210000
 800045c:	40021000 	.word	0x40021000
 8000460:	10310000 	.word	0x10310000
 8000464:	10320000 	.word	0x10320000
 8000468:	10110000 	.word	0x10110000
 800046c:	10220000 	.word	0x10220000

08000470 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000470:	b902      	cbnz	r2, 8000474 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000472:	0409      	lsls	r1, r1, #16
 8000474:	6101      	str	r1, [r0, #16]
 8000476:	4770      	bx	lr

08000478 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t index = 0;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 800047c:	4604      	mov	r4, r0
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800047e:	b086      	sub	sp, #24
  uint32_t index = 0;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8000480:	2800      	cmp	r0, #0
 8000482:	d05f      	beq.n	8000544 <HAL_PCD_Init+0xcc>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if(hpcd->State == HAL_PCD_STATE_RESET)
 8000484:	f890 33e9 	ldrb.w	r3, [r0, #1001]	; 0x3e9
 8000488:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800048c:	b91b      	cbnz	r3, 8000496 <HAL_PCD_Init+0x1e>
  {  
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800048e:	f880 23e8 	strb.w	r2, [r0, #1000]	; 0x3e8

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000492:	f002 fadf 	bl	8002a54 <HAL_PCD_MspInit>
  }
  
  hpcd->State = HAL_PCD_STATE_BUSY;
  
  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000496:	4625      	mov	r5, r4
  
  /*Init the Core (common init.) */
  USB_CoreInit(hpcd->Instance, hpcd->Init);
 8000498:	466e      	mov	r6, sp

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
  }
  
  hpcd->State = HAL_PCD_STATE_BUSY;
 800049a:	2303      	movs	r3, #3
  
  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800049c:	f855 0b10 	ldr.w	r0, [r5], #16

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
  }
  
  hpcd->State = HAL_PCD_STATE_BUSY;
 80004a0:	f884 33e9 	strb.w	r3, [r4, #1001]	; 0x3e9
  
  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80004a4:	f001 f908 	bl	80016b8 <USB_DisableGlobalInt>
  
  /*Init the Core (common init.) */
  USB_CoreInit(hpcd->Instance, hpcd->Init);
 80004a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004aa:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80004ac:	682b      	ldr	r3, [r5, #0]
 80004ae:	1d27      	adds	r7, r4, #4
 80004b0:	6033      	str	r3, [r6, #0]
 80004b2:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 80004b6:	6820      	ldr	r0, [r4, #0]
 80004b8:	f001 f8ee 	bl	8001698 <USB_CoreInit>
 
  /* Force Device Mode*/
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 80004bc:	2100      	movs	r1, #0
 80004be:	6820      	ldr	r0, [r4, #0]
 80004c0:	f001 f904 	bl	80016cc <USB_SetCurrentMode>
 
  /* Init endpoints structures */
  for (index = 0; index < 15 ; index++)
 80004c4:	2100      	movs	r1, #0
 80004c6:	4623      	mov	r3, r4
  
  /*Init the Core (common init.) */
  USB_CoreInit(hpcd->Instance, hpcd->Init);
 
  /* Force Device Mode*/
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 80004c8:	4622      	mov	r2, r4
    /* Init ep structure */
    hpcd->IN_ep[index].is_in = 1;
    hpcd->IN_ep[index].num = index;
    hpcd->IN_ep[index].tx_fifo_num = index;
    /* Control until ep is actvated */
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 80004ca:	4608      	mov	r0, r1
 80004cc:	f104 0510 	add.w	r5, r4, #16
 
  /* Init endpoints structures */
  for (index = 0; index < 15 ; index++)
  {
    /* Init ep structure */
    hpcd->IN_ep[index].is_in = 1;
 80004d0:	2601      	movs	r6, #1
    hpcd->IN_ep[index].num = index;
 80004d2:	f882 1028 	strb.w	r1, [r2, #40]	; 0x28
    hpcd->IN_ep[index].tx_fifo_num = index;
 80004d6:	8691      	strh	r1, [r2, #52]	; 0x34
 
  /* Force Device Mode*/
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 
  /* Init endpoints structures */
  for (index = 0; index < 15 ; index++)
 80004d8:	3101      	adds	r1, #1
 80004da:	290f      	cmp	r1, #15
  {
    /* Init ep structure */
    hpcd->IN_ep[index].is_in = 1;
 80004dc:	f882 6029 	strb.w	r6, [r2, #41]	; 0x29
    hpcd->IN_ep[index].num = index;
    hpcd->IN_ep[index].tx_fifo_num = index;
    /* Control until ep is actvated */
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 80004e0:	f882 002b 	strb.w	r0, [r2, #43]	; 0x2b
    hpcd->IN_ep[index].maxpacket =  0;
 80004e4:	6390      	str	r0, [r2, #56]	; 0x38
    hpcd->IN_ep[index].xfer_buff = 0;
 80004e6:	63d0      	str	r0, [r2, #60]	; 0x3c
    hpcd->IN_ep[index].xfer_len = 0;
 80004e8:	6410      	str	r0, [r2, #64]	; 0x40
 80004ea:	f102 0220 	add.w	r2, r2, #32
 
  /* Force Device Mode*/
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 
  /* Init endpoints structures */
  for (index = 0; index < 15 ; index++)
 80004ee:	d1f0      	bne.n	80004d2 <HAL_PCD_Init+0x5a>
 80004f0:	2200      	movs	r2, #0
    hpcd->IN_ep[index].xfer_len = 0;
  }
  
  for (index = 0; index < 15 ; index++)
  {
    hpcd->OUT_ep[index].is_in = 0;
 80004f2:	4611      	mov	r1, r2
    hpcd->OUT_ep[index].num = index;
 80004f4:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
    hpcd->IN_ep[index].tx_fifo_num = index;
 80004f8:	869a      	strh	r2, [r3, #52]	; 0x34
    hpcd->IN_ep[index].maxpacket =  0;
    hpcd->IN_ep[index].xfer_buff = 0;
    hpcd->IN_ep[index].xfer_len = 0;
  }
  
  for (index = 0; index < 15 ; index++)
 80004fa:	3201      	adds	r2, #1
 80004fc:	2a0f      	cmp	r2, #15
  {
    hpcd->OUT_ep[index].is_in = 0;
 80004fe:	f883 1209 	strb.w	r1, [r3, #521]	; 0x209
    hpcd->OUT_ep[index].num = index;
    hpcd->IN_ep[index].tx_fifo_num = index;
    /* Control until ep is activated */
    hpcd->OUT_ep[index].type = EP_TYPE_CTRL;
 8000502:	f883 120b 	strb.w	r1, [r3, #523]	; 0x20b
    hpcd->OUT_ep[index].maxpacket = 0;
 8000506:	f8c3 1218 	str.w	r1, [r3, #536]	; 0x218
    hpcd->OUT_ep[index].xfer_buff = 0;
 800050a:	f8c3 121c 	str.w	r1, [r3, #540]	; 0x21c
    hpcd->OUT_ep[index].xfer_len = 0;
 800050e:	f8c3 1220 	str.w	r1, [r3, #544]	; 0x220
    hpcd->IN_ep[index].xfer_len = 0;
  }
  
  for (index = 0; index < 15 ; index++)
  {
    hpcd->OUT_ep[index].is_in = 0;
 8000512:	f04f 0800 	mov.w	r8, #0
 8000516:	f103 0320 	add.w	r3, r3, #32
    hpcd->IN_ep[index].maxpacket =  0;
    hpcd->IN_ep[index].xfer_buff = 0;
    hpcd->IN_ep[index].xfer_len = 0;
  }
  
  for (index = 0; index < 15 ; index++)
 800051a:	d1eb      	bne.n	80004f4 <HAL_PCD_Init+0x7c>
    hpcd->OUT_ep[index].xfer_buff = 0;
    hpcd->OUT_ep[index].xfer_len = 0;
  }
  
  /* Init Device */
  USB_DevInit(hpcd->Instance, hpcd->Init);
 800051c:	466e      	mov	r6, sp
 800051e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000520:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000522:	682b      	ldr	r3, [r5, #0]
 8000524:	6033      	str	r3, [r6, #0]
 8000526:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800052a:	6820      	ldr	r0, [r4, #0]
 800052c:	f001 f8d0 	bl	80016d0 <USB_DevInit>
  
  hpcd->USB_Address = 0;
  hpcd->State= HAL_PCD_STATE_READY;
 8000530:	2301      	movs	r3, #1
  }
  
  /* Init Device */
  USB_DevInit(hpcd->Instance, hpcd->Init);
  
  hpcd->USB_Address = 0;
 8000532:	f884 8024 	strb.w	r8, [r4, #36]	; 0x24
  hpcd->State= HAL_PCD_STATE_READY;
  
  USB_DevDisconnect (hpcd->Instance);  
 8000536:	6820      	ldr	r0, [r4, #0]
  
  /* Init Device */
  USB_DevInit(hpcd->Instance, hpcd->Init);
  
  hpcd->USB_Address = 0;
  hpcd->State= HAL_PCD_STATE_READY;
 8000538:	f884 33e9 	strb.w	r3, [r4, #1001]	; 0x3e9
  
  USB_DevDisconnect (hpcd->Instance);  
 800053c:	f001 fb81 	bl	8001c42 <USB_DevDisconnect>
  return HAL_OK;
 8000540:	4640      	mov	r0, r8
 8000542:	e000      	b.n	8000546 <HAL_PCD_Init+0xce>
  uint32_t index = 0;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
  {
    return HAL_ERROR;
 8000544:	2001      	movs	r0, #1
  hpcd->USB_Address = 0;
  hpcd->State= HAL_PCD_STATE_READY;
  
  USB_DevDisconnect (hpcd->Instance);  
  return HAL_OK;
}
 8000546:	b006      	add	sp, #24
 8000548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800054c <HAL_PCD_Start>:
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 800054c:	f890 33e8 	ldrb.w	r3, [r0, #1000]	; 0x3e8
  * @brief  Start The USB Device.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000550:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8000552:	2b01      	cmp	r3, #1
  * @brief  Start The USB Device.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000554:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000556:	d00e      	beq.n	8000576 <HAL_PCD_Start+0x2a>
 8000558:	2101      	movs	r1, #1
 800055a:	f880 13e8 	strb.w	r1, [r0, #1000]	; 0x3e8
  HAL_PCDEx_SetConnectionState (hpcd, 1);
 800055e:	f002 fba6 	bl	8002cae <HAL_PCDEx_SetConnectionState>
  USB_DevConnect (hpcd->Instance);
 8000562:	6820      	ldr	r0, [r4, #0]
 8000564:	f001 fb6b 	bl	8001c3e <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8000568:	6820      	ldr	r0, [r4, #0]
 800056a:	f001 f89c 	bl	80016a6 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 800056e:	2000      	movs	r0, #0
 8000570:	f884 03e8 	strb.w	r0, [r4, #1000]	; 0x3e8
  return HAL_OK;
 8000574:	bd10      	pop	{r4, pc}
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 8000576:	2002      	movs	r0, #2
  HAL_PCDEx_SetConnectionState (hpcd, 1);
  USB_DevConnect (hpcd->Instance);
  __HAL_PCD_ENABLE(hpcd);
  __HAL_UNLOCK(hpcd);
  return HAL_OK;
}
 8000578:	bd10      	pop	{r4, pc}

0800057a <HAL_PCD_SetAddress>:
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 800057a:	f890 23e8 	ldrb.w	r2, [r0, #1000]	; 0x3e8
  * @param  hpcd: PCD handle
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800057e:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8000580:	2a01      	cmp	r2, #1
  * @param  hpcd: PCD handle
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8000582:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000584:	d00b      	beq.n	800059e <HAL_PCD_SetAddress+0x24>
 8000586:	2201      	movs	r2, #1
 8000588:	f880 23e8 	strb.w	r2, [r0, #1000]	; 0x3e8
  hpcd->USB_Address = address;
 800058c:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
  USB_SetDevAddress(hpcd->Instance, address);
 8000590:	6800      	ldr	r0, [r0, #0]
 8000592:	f001 fb4e 	bl	8001c32 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8000596:	2000      	movs	r0, #0
 8000598:	f884 03e8 	strb.w	r0, [r4, #1000]	; 0x3e8
 800059c:	bd10      	pop	{r4, pc}
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 800059e:	2002      	movs	r0, #2
  hpcd->USB_Address = address;
  USB_SetDevAddress(hpcd->Instance, address);
  __HAL_UNLOCK(hpcd);
  return HAL_OK;
}
 80005a0:	bd10      	pop	{r4, pc}

080005a2 <HAL_PCD_EP_Open>:
  * @param  ep_mps: endpoint max packet size
  * @param  ep_type: endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80005a2:	b538      	push	{r3, r4, r5, lr}
 80005a4:	4604      	mov	r4, r0
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep = NULL;
  
  if ((ep_addr & 0x80) == 0x80)
 80005a6:	b248      	sxtb	r0, r1
 80005a8:	2800      	cmp	r0, #0
 80005aa:	f001 057f 	and.w	r5, r1, #127	; 0x7f
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80005ae:	bfb5      	itete	lt
 80005b0:	eb04 1145 	addlt.w	r1, r4, r5, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 80005b4:	eb04 1141 	addge.w	r1, r4, r1, lsl #5
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep = NULL;
  
  if ((ep_addr & 0x80) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80005b8:	3128      	addlt	r1, #40	; 0x28
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 80005ba:	f501 7102 	addge.w	r1, r1, #520	; 0x208
  }
  ep->num   = ep_addr & 0x7F;
  
  ep->is_in = (0x80 & ep_addr) != 0;
 80005be:	0fc0      	lsrs	r0, r0, #31
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
  }
  ep->num   = ep_addr & 0x7F;
 80005c0:	700d      	strb	r5, [r1, #0]
  
  ep->is_in = (0x80 & ep_addr) != 0;
 80005c2:	7048      	strb	r0, [r1, #1]
  ep->maxpacket = ep_mps;
  ep->type = ep_type;
 80005c4:	70cb      	strb	r3, [r1, #3]
    
  __HAL_LOCK(hpcd);
 80005c6:	f894 33e8 	ldrb.w	r3, [r4, #1000]	; 0x3e8
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
  }
  ep->num   = ep_addr & 0x7F;
  
  ep->is_in = (0x80 & ep_addr) != 0;
  ep->maxpacket = ep_mps;
 80005ca:	610a      	str	r2, [r1, #16]
  ep->type = ep_type;
    
  __HAL_LOCK(hpcd);
 80005cc:	2b01      	cmp	r3, #1
 80005ce:	d009      	beq.n	80005e4 <HAL_PCD_EP_Open+0x42>
 80005d0:	2301      	movs	r3, #1
 80005d2:	f884 33e8 	strb.w	r3, [r4, #1000]	; 0x3e8
  USB_ActivateEndpoint(hpcd->Instance , ep);
 80005d6:	6820      	ldr	r0, [r4, #0]
 80005d8:	f001 f88e 	bl	80016f8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80005dc:	2000      	movs	r0, #0
 80005de:	f884 03e8 	strb.w	r0, [r4, #1000]	; 0x3e8
  return ret;
 80005e2:	bd38      	pop	{r3, r4, r5, pc}
  
  ep->is_in = (0x80 & ep_addr) != 0;
  ep->maxpacket = ep_mps;
  ep->type = ep_type;
    
  __HAL_LOCK(hpcd);
 80005e4:	2002      	movs	r0, #2
  USB_ActivateEndpoint(hpcd->Instance , ep);
  __HAL_UNLOCK(hpcd);
  return ret;
}
 80005e6:	bd38      	pop	{r3, r4, r5, pc}

080005e8 <HAL_PCD_EP_Close>:
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
  PCD_EPTypeDef *ep = NULL;
  
  if ((ep_addr & 0x80) == 0x80)
 80005e8:	b24b      	sxtb	r3, r1
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	f001 027f 	and.w	r2, r1, #127	; 0x7f
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80005f0:	bfb5      	itete	lt
 80005f2:	eb00 1142 	addlt.w	r1, r0, r2, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 80005f6:	eb00 1141 	addge.w	r1, r0, r1, lsl #5
{  
  PCD_EPTypeDef *ep = NULL;
  
  if ((ep_addr & 0x80) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80005fa:	3128      	addlt	r1, #40	; 0x28
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 80005fc:	f501 7102 	addge.w	r1, r1, #520	; 0x208
  }
  ep->num   = ep_addr & 0x7F;
  
  ep->is_in = (0x80 & ep_addr) != 0;
 8000600:	0fdb      	lsrs	r3, r3, #31
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
 8000602:	b510      	push	{r4, lr}
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
  }
  ep->num   = ep_addr & 0x7F;
 8000604:	700a      	strb	r2, [r1, #0]
  
  ep->is_in = (0x80 & ep_addr) != 0;
 8000606:	704b      	strb	r3, [r1, #1]
  
  __HAL_LOCK(hpcd);
 8000608:	f890 33e8 	ldrb.w	r3, [r0, #1000]	; 0x3e8
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
 800060c:	4604      	mov	r4, r0
  }
  ep->num   = ep_addr & 0x7F;
  
  ep->is_in = (0x80 & ep_addr) != 0;
  
  __HAL_LOCK(hpcd);
 800060e:	2b01      	cmp	r3, #1
 8000610:	d009      	beq.n	8000626 <HAL_PCD_EP_Close+0x3e>
 8000612:	2301      	movs	r3, #1
 8000614:	f880 33e8 	strb.w	r3, [r0, #1000]	; 0x3e8
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 8000618:	6800      	ldr	r0, [r0, #0]
 800061a:	f001 f9df 	bl	80019dc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800061e:	2000      	movs	r0, #0
 8000620:	f884 03e8 	strb.w	r0, [r4, #1000]	; 0x3e8
  return HAL_OK;
 8000624:	bd10      	pop	{r4, pc}
  }
  ep->num   = ep_addr & 0x7F;
  
  ep->is_in = (0x80 & ep_addr) != 0;
  
  __HAL_LOCK(hpcd);
 8000626:	2002      	movs	r0, #2
  USB_DeactivateEndpoint(hpcd->Instance , ep);
  __HAL_UNLOCK(hpcd);
  return HAL_OK;
}
 8000628:	bd10      	pop	{r4, pc}

0800062a <HAL_PCD_EP_Receive>:
  * @param  pBuf: pointer to the reception buffer
  * @param  len: amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800062a:	b570      	push	{r4, r5, r6, lr}
 800062c:	4604      	mov	r4, r0
 800062e:	f001 067f 	and.w	r6, r1, #127	; 0x7f
  PCD_EPTypeDef *ep = NULL;
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8000632:	0170      	lsls	r0, r6, #5
 8000634:	1825      	adds	r5, r4, r0
  ep->xfer_len = len;
 8000636:	f8c5 3220 	str.w	r3, [r5, #544]	; 0x220
  ep->xfer_count = 0;
 800063a:	2300      	movs	r3, #0
  PCD_EPTypeDef *ep = NULL;
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 800063c:	f8c5 221c 	str.w	r2, [r5, #540]	; 0x21c
  ep->xfer_len = len;
  ep->xfer_count = 0;
 8000640:	f8c5 3224 	str.w	r3, [r5, #548]	; 0x224
  ep->is_in = 0;
 8000644:	f885 3209 	strb.w	r3, [r5, #521]	; 0x209
  ep->num = ep_addr & 0x7F;
 8000648:	f885 6208 	strb.w	r6, [r5, #520]	; 0x208
  
  __HAL_LOCK(hpcd);
 800064c:	f894 33e8 	ldrb.w	r3, [r4, #1000]	; 0x3e8
 8000650:	2b01      	cmp	r3, #1
 8000652:	d00c      	beq.n	800066e <HAL_PCD_EP_Receive+0x44>
 8000654:	2301      	movs	r3, #1
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
  PCD_EPTypeDef *ep = NULL;
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8000656:	f500 7002 	add.w	r0, r0, #520	; 0x208
 800065a:	1821      	adds	r1, r4, r0
  ep->xfer_len = len;
  ep->xfer_count = 0;
  ep->is_in = 0;
  ep->num = ep_addr & 0x7F;
  
  __HAL_LOCK(hpcd);
 800065c:	f884 33e8 	strb.w	r3, [r4, #1000]	; 0x3e8
  
  if ((ep_addr & 0x7F) == 0 )
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
 8000660:	6820      	ldr	r0, [r4, #0]
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 8000662:	f001 fb07 	bl	8001c74 <USB_EPStartXfer>
  }
  __HAL_UNLOCK(hpcd);
 8000666:	2000      	movs	r0, #0
 8000668:	f884 03e8 	strb.w	r0, [r4, #1000]	; 0x3e8
  
  return HAL_OK;
 800066c:	bd70      	pop	{r4, r5, r6, pc}
  ep->xfer_len = len;
  ep->xfer_count = 0;
  ep->is_in = 0;
  ep->num = ep_addr & 0x7F;
  
  __HAL_LOCK(hpcd);
 800066e:	2002      	movs	r0, #2
    USB_EPStartXfer(hpcd->Instance , ep);
  }
  __HAL_UNLOCK(hpcd);
  
  return HAL_OK;
}
 8000670:	bd70      	pop	{r4, r5, r6, pc}

08000672 <HAL_PCD_EP_GetRxCount>:
  * @param  ep_addr: endpoint address
  * @retval Data Size
  */
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  return hpcd->OUT_ep[ep_addr & 0x7F].xfer_count;
 8000672:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8000676:	eb00 1041 	add.w	r0, r0, r1, lsl #5
}
 800067a:	f8b0 0224 	ldrh.w	r0, [r0, #548]	; 0x224
 800067e:	4770      	bx	lr

08000680 <HAL_PCD_EP_Transmit>:
  * @param  pBuf: pointer to the transmission buffer
  * @param  len: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000680:	b570      	push	{r4, r5, r6, lr}
 8000682:	4604      	mov	r4, r0
 8000684:	f001 067f 	and.w	r6, r1, #127	; 0x7f
  PCD_EPTypeDef *ep = NULL;
  
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8000688:	0170      	lsls	r0, r6, #5
 800068a:	1825      	adds	r5, r4, r0
  ep->xfer_len = len;
 800068c:	642b      	str	r3, [r5, #64]	; 0x40
  ep->xfer_count = 0;
 800068e:	2300      	movs	r3, #0
 8000690:	646b      	str	r3, [r5, #68]	; 0x44
  ep->is_in = 1;
 8000692:	2301      	movs	r3, #1
  PCD_EPTypeDef *ep = NULL;
  
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8000694:	63ea      	str	r2, [r5, #60]	; 0x3c
  ep->xfer_len = len;
  ep->xfer_count = 0;
  ep->is_in = 1;
 8000696:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
  ep->num = ep_addr & 0x7F;
 800069a:	f885 6028 	strb.w	r6, [r5, #40]	; 0x28
  
  __HAL_LOCK(hpcd);
 800069e:	f894 23e8 	ldrb.w	r2, [r4, #1000]	; 0x3e8
 80006a2:	429a      	cmp	r2, r3
 80006a4:	d00a      	beq.n	80006bc <HAL_PCD_EP_Transmit+0x3c>
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
  PCD_EPTypeDef *ep = NULL;
  
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80006a6:	3028      	adds	r0, #40	; 0x28
 80006a8:	1821      	adds	r1, r4, r0
  ep->xfer_len = len;
  ep->xfer_count = 0;
  ep->is_in = 1;
  ep->num = ep_addr & 0x7F;
  
  __HAL_LOCK(hpcd);
 80006aa:	f884 33e8 	strb.w	r3, [r4, #1000]	; 0x3e8
  
  if ((ep_addr & 0x7F) == 0 )
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
 80006ae:	6820      	ldr	r0, [r4, #0]
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 80006b0:	f001 fae0 	bl	8001c74 <USB_EPStartXfer>
  }
  
  __HAL_UNLOCK(hpcd);
 80006b4:	2000      	movs	r0, #0
 80006b6:	f884 03e8 	strb.w	r0, [r4, #1000]	; 0x3e8
  
  return HAL_OK;
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
  ep->xfer_len = len;
  ep->xfer_count = 0;
  ep->is_in = 1;
  ep->num = ep_addr & 0x7F;
  
  __HAL_LOCK(hpcd);
 80006bc:	2002      	movs	r0, #2
  }
  
  __HAL_UNLOCK(hpcd);
  
  return HAL_OK;
}
 80006be:	bd70      	pop	{r4, r5, r6, pc}

080006c0 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80006c0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80006c4:	4604      	mov	r4, r0
  uint32_t wInterrupt_Mask = 0;
  
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 80006c6:	6800      	ldr	r0, [r0, #0]
 80006c8:	f001 fabd 	bl	8001c46 <USB_ReadInterrupts>
 80006cc:	0400      	lsls	r0, r0, #16
 80006ce:	d416      	bmi.n	80006fe <HAL_PCD_IRQHandler+0x3e>
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    PCD_EP_ISR_Handler(hpcd);
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
 80006d0:	6820      	ldr	r0, [r4, #0]
 80006d2:	f001 fab8 	bl	8001c46 <USB_ReadInterrupts>
 80006d6:	0541      	lsls	r1, r0, #21
 80006d8:	f140 81db 	bpl.w	8000a92 <HAL_PCD_IRQHandler+0x3d2>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80006dc:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 80006de:	4620      	mov	r0, r4
    PCD_EP_ISR_Handler(hpcd);
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80006e0:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80006e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80006e8:	041b      	lsls	r3, r3, #16
 80006ea:	0c1b      	lsrs	r3, r3, #16
 80006ec:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 80006f0:	f002 f9e7 	bl	8002ac2 <HAL_PCD_ResetCallback>
    HAL_PCD_SetAddress(hpcd, 0);
 80006f4:	2100      	movs	r1, #0
 80006f6:	4620      	mov	r0, r4
 80006f8:	f7ff ff3f 	bl	800057a <HAL_PCD_SetAddress>
 80006fc:	e1c9      	b.n	8000a92 <HAL_PCD_IRQHandler+0x3d2>
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
  PCD_EPTypeDef *ep = NULL;
  uint16_t count = 0;
  uint8_t epindex = 0;
  __IO uint16_t wIstr = 0;  
 80006fe:	2300      	movs	r3, #0
 8000700:	f8ad 3004 	strh.w	r3, [sp, #4]
        
        if ((wEPVal & USB_EP_SETUP) != 0)
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
          USB_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 8000704:	f504 777b 	add.w	r7, r4, #1004	; 0x3ec
{
  PCD_EPTypeDef *ep = NULL;
  uint16_t count = 0;
  uint8_t epindex = 0;
  __IO uint16_t wIstr = 0;  
  __IO uint16_t wEPVal = 0;
 8000708:	f8ad 3006 	strh.w	r3, [sp, #6]
  
  /* stay in loop while pending interrupts */
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0)
 800070c:	6820      	ldr	r0, [r4, #0]
 800070e:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8000712:	b29b      	uxth	r3, r3
 8000714:	f8ad 3004 	strh.w	r3, [sp, #4]
 8000718:	041b      	lsls	r3, r3, #16
 800071a:	d5d9      	bpl.n	80006d0 <HAL_PCD_IRQHandler+0x10>
  {
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800071c:	f8bd 5004 	ldrh.w	r5, [sp, #4]
    
    if (epindex == 0)
 8000720:	f015 050f 	ands.w	r5, r5, #15
 8000724:	f040 80b5 	bne.w	8000892 <HAL_PCD_IRQHandler+0x1d2>
    {
      /* Decode and service control endpoint interrupt */
      
      /* DIR bit = origin of the interrupt */   
      if ((wIstr & USB_ISTR_DIR) == 0)
 8000728:	f8bd 1004 	ldrh.w	r1, [sp, #4]
      {
        /* DIR = 0 */
        
        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800072c:	8803      	ldrh	r3, [r0, #0]
    if (epindex == 0)
    {
      /* Decode and service control endpoint interrupt */
      
      /* DIR bit = origin of the interrupt */   
      if ((wIstr & USB_ISTR_DIR) == 0)
 800072e:	f001 0110 	and.w	r1, r1, #16
 8000732:	b289      	uxth	r1, r1
 8000734:	bb59      	cbnz	r1, 800078e <HAL_PCD_IRQHandler+0xce>
      {
        /* DIR = 0 */
        
        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000736:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800073a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800073e:	041b      	lsls	r3, r3, #16
 8000740:	0c1b      	lsrs	r3, r3, #16
 8000742:	8003      	strh	r3, [r0, #0]
        ep = &hpcd->IN_ep[0];
        
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000744:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000748:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800074c:	b29b      	uxth	r3, r3
 800074e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000752:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8000756:	f8d0 3404 	ldr.w	r3, [r0, #1028]	; 0x404
        ep->xfer_buff += ep->xfer_count;
 800075a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
        ep = &hpcd->IN_ep[0];
        
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800075c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000760:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8000762:	4413      	add	r3, r2
 8000764:	63e3      	str	r3, [r4, #60]	; 0x3c
 
        /* TX COMPLETE */
        HAL_PCD_DataInStageCallback(hpcd, 0);
 8000766:	4620      	mov	r0, r4
 8000768:	f002 f9a0 	bl	8002aac <HAL_PCD_DataInStageCallback>
        
        
        if((hpcd->USB_Address > 0)&& ( ep->xfer_len == 0))
 800076c:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000770:	2b00      	cmp	r3, #0
 8000772:	d0cb      	beq.n	800070c <HAL_PCD_IRQHandler+0x4c>
 8000774:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000776:	2a00      	cmp	r2, #0
 8000778:	d1c8      	bne.n	800070c <HAL_PCD_IRQHandler+0x4c>
        {
          hpcd->Instance->DADDR = (hpcd->USB_Address | USB_DADDR_EF);
 800077a:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800077e:	6821      	ldr	r1, [r4, #0]
 8000780:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000784:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0;
 8000788:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 800078c:	e7be      	b.n	800070c <HAL_PCD_IRQHandler+0x4c>
        /* DIR = 1 */
        
        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800078e:	b29b      	uxth	r3, r3
 8000790:	f8ad 3006 	strh.w	r3, [sp, #6]
        
        if ((wEPVal & USB_EP_SETUP) != 0)
 8000794:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8000798:	051a      	lsls	r2, r3, #20
 800079a:	d51e      	bpl.n	80007da <HAL_PCD_IRQHandler+0x11a>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800079c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80007a0:	f894 2208 	ldrb.w	r2, [r4, #520]	; 0x208
 80007a4:	b29b      	uxth	r3, r3
 80007a6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80007aa:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80007ae:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
          USB_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 80007b2:	f8b4 220c 	ldrh.w	r2, [r4, #524]	; 0x20c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
        
        if ((wEPVal & USB_EP_SETUP) != 0)
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80007b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80007ba:	f8c4 3224 	str.w	r3, [r4, #548]	; 0x224
          USB_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 80007be:	4639      	mov	r1, r7
 80007c0:	f001 fb28 	bl	8001e14 <USB_ReadPMA>
          /* SETUP bit kept frozen while CTR_RX = 1*/ 
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 80007c4:	6822      	ldr	r2, [r4, #0]
          
          /* Process SETUP Packet*/
          HAL_PCD_SetupStageCallback(hpcd);
 80007c6:	4620      	mov	r0, r4
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
          USB_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
          /* SETUP bit kept frozen while CTR_RX = 1*/ 
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 80007c8:	8813      	ldrh	r3, [r2, #0]
 80007ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80007ce:	051b      	lsls	r3, r3, #20
 80007d0:	0d1b      	lsrs	r3, r3, #20
 80007d2:	8013      	strh	r3, [r2, #0]
          
          /* Process SETUP Packet*/
          HAL_PCD_SetupStageCallback(hpcd);
 80007d4:	f002 f95c 	bl	8002a90 <HAL_PCD_SetupStageCallback>
 80007d8:	e798      	b.n	800070c <HAL_PCD_IRQHandler+0x4c>
        }
        
        else if ((wEPVal & USB_EP_CTR_RX) != 0)
 80007da:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80007de:	041b      	lsls	r3, r3, #16
 80007e0:	d594      	bpl.n	800070c <HAL_PCD_IRQHandler+0x4c>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80007e2:	8803      	ldrh	r3, [r0, #0]
 80007e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80007e8:	051b      	lsls	r3, r3, #20
 80007ea:	0d1b      	lsrs	r3, r3, #20
 80007ec:	8003      	strh	r3, [r0, #0]
          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80007ee:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80007f2:	f894 2208 	ldrb.w	r2, [r4, #520]	; 0x208
 80007f6:	b29b      	uxth	r3, r3
 80007f8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80007fc:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000800:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8000804:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000808:	f8c4 3224 	str.w	r3, [r4, #548]	; 0x224
          
          if (ep->xfer_count != 0)
 800080c:	b163      	cbz	r3, 8000828 <HAL_PCD_IRQHandler+0x168>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 800080e:	f8b4 220c 	ldrh.w	r2, [r4, #524]	; 0x20c
 8000812:	f8d4 121c 	ldr.w	r1, [r4, #540]	; 0x21c
 8000816:	f001 fafd 	bl	8001e14 <USB_ReadPMA>
            ep->xfer_buff+=ep->xfer_count;
 800081a:	f8d4 221c 	ldr.w	r2, [r4, #540]	; 0x21c
 800081e:	f8d4 3224 	ldr.w	r3, [r4, #548]	; 0x224
 8000822:	4413      	add	r3, r2
 8000824:	f8c4 321c 	str.w	r3, [r4, #540]	; 0x21c
          }
          
          /* Process Control Data OUT Packet*/
           HAL_PCD_DataOutStageCallback(hpcd, 0);
 8000828:	2100      	movs	r1, #0
 800082a:	4620      	mov	r0, r4
 800082c:	f002 f936 	bl	8002a9c <HAL_PCD_DataOutStageCallback>
          
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8000830:	6822      	ldr	r2, [r4, #0]
 8000832:	f8d4 5218 	ldr.w	r5, [r4, #536]	; 0x218
 8000836:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 800083a:	2d3e      	cmp	r5, #62	; 0x3e
 800083c:	b289      	uxth	r1, r1
 800083e:	f101 0106 	add.w	r1, r1, #6
 8000842:	f502 6080 	add.w	r0, r2, #1024	; 0x400
 8000846:	d90b      	bls.n	8000860 <HAL_PCD_IRQHandler+0x1a0>
 8000848:	f3c5 134f 	ubfx	r3, r5, #5, #16
 800084c:	06ee      	lsls	r6, r5, #27
 800084e:	bf04      	itt	eq
 8000850:	f103 33ff 	addeq.w	r3, r3, #4294967295
 8000854:	b29b      	uxtheq	r3, r3
 8000856:	ea6f 63c3 	mvn.w	r3, r3, lsl #27
 800085a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800085e:	e006      	b.n	800086e <HAL_PCD_IRQHandler+0x1ae>
 8000860:	f3c5 034f 	ubfx	r3, r5, #1, #16
 8000864:	07ed      	lsls	r5, r5, #31
 8000866:	bf44      	itt	mi
 8000868:	3301      	addmi	r3, #1
 800086a:	b29b      	uxthmi	r3, r3
 800086c:	029b      	lsls	r3, r3, #10
 800086e:	b29b      	uxth	r3, r3
 8000870:	f840 3011 	str.w	r3, [r0, r1, lsl #1]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8000874:	8813      	ldrh	r3, [r2, #0]
 8000876:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800087a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800087e:	041b      	lsls	r3, r3, #16
 8000880:	0c1b      	lsrs	r3, r3, #16
 8000882:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8000886:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800088a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800088e:	8013      	strh	r3, [r2, #0]
 8000890:	e73c      	b.n	800070c <HAL_PCD_IRQHandler+0x4c>
    else
    {
      /* Decode and service non control endpoints interrupt  */
	  
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8000892:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
 8000896:	b29b      	uxth	r3, r3
 8000898:	f8ad 3006 	strh.w	r3, [sp, #6]
      if ((wEPVal & USB_EP_CTR_RX) != 0)
 800089c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80008a0:	0419      	lsls	r1, r3, #16
 80008a2:	d577      	bpl.n	8000994 <HAL_PCD_IRQHandler+0x2d4>
      {  
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80008a4:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
        ep = &hpcd->OUT_ep[epindex];
        
        /* OUT double Buffering*/
        if (ep->doublebuffer == 0)
 80008a8:	ea4f 1845 	mov.w	r8, r5, lsl #5
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
      if ((wEPVal & USB_EP_CTR_RX) != 0)
      {  
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80008ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80008b0:	051b      	lsls	r3, r3, #20
 80008b2:	0d1b      	lsrs	r3, r3, #20
 80008b4:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
        ep = &hpcd->OUT_ep[epindex];
        
        /* OUT double Buffering*/
        if (ep->doublebuffer == 0)
 80008b8:	eb04 0108 	add.w	r1, r4, r8
 80008bc:	f891 3212 	ldrb.w	r3, [r1, #530]	; 0x212
 80008c0:	b9ab      	cbnz	r3, 80008ee <HAL_PCD_IRQHandler+0x22e>
        {
          count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80008c2:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80008c6:	f891 2208 	ldrb.w	r2, [r1, #520]	; 0x208
 80008ca:	b29b      	uxth	r3, r3
 80008cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80008d0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80008d4:	f8d3 640c 	ldr.w	r6, [r3, #1036]	; 0x40c
 80008d8:	f3c6 0609 	ubfx	r6, r6, #0, #10
          if (count != 0)
 80008dc:	b3de      	cbz	r6, 8000956 <HAL_PCD_IRQHandler+0x296>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80008de:	f8b1 220c 	ldrh.w	r2, [r1, #524]	; 0x20c
 80008e2:	4633      	mov	r3, r6
 80008e4:	f8d1 121c 	ldr.w	r1, [r1, #540]	; 0x21c
 80008e8:	f001 fa94 	bl	8001e14 <USB_ReadPMA>
 80008ec:	e033      	b.n	8000956 <HAL_PCD_IRQHandler+0x296>
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 80008ee:	f891 3208 	ldrb.w	r3, [r1, #520]	; 0x208
 80008f2:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80008f6:	00db      	lsls	r3, r3, #3
 80008f8:	f412 4f80 	tst.w	r2, #16384	; 0x4000
          {
            /*read from endpoint BUF0Addr buffer*/
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80008fc:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8000900:	b292      	uxth	r2, r2
 8000902:	4413      	add	r3, r2
 8000904:	eb00 0343 	add.w	r3, r0, r3, lsl #1
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 8000908:	d008      	beq.n	800091c <HAL_PCD_IRQHandler+0x25c>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800090a:	f8d3 6404 	ldr.w	r6, [r3, #1028]	; 0x404
 800090e:	f3c6 0609 	ubfx	r6, r6, #0, #10
            if (count != 0)
 8000912:	b17e      	cbz	r6, 8000934 <HAL_PCD_IRQHandler+0x274>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8000914:	4633      	mov	r3, r6
 8000916:	f8b1 220e 	ldrh.w	r2, [r1, #526]	; 0x20e
 800091a:	e007      	b.n	800092c <HAL_PCD_IRQHandler+0x26c>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800091c:	f8d3 640c 	ldr.w	r6, [r3, #1036]	; 0x40c
 8000920:	f3c6 0609 	ubfx	r6, r6, #0, #10
            if (count != 0)
 8000924:	b136      	cbz	r6, 8000934 <HAL_PCD_IRQHandler+0x274>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8000926:	4633      	mov	r3, r6
 8000928:	f8b1 2210 	ldrh.w	r2, [r1, #528]	; 0x210
 800092c:	f8d1 121c 	ldr.w	r1, [r1, #540]	; 0x21c
 8000930:	f001 fa70 	bl	8001e14 <USB_ReadPMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);  
 8000934:	eb04 0308 	add.w	r3, r4, r8
 8000938:	f893 1208 	ldrb.w	r1, [r3, #520]	; 0x208
 800093c:	6822      	ldr	r2, [r4, #0]
 800093e:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8000942:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000946:	051b      	lsls	r3, r3, #20
 8000948:	0d1b      	lsrs	r3, r3, #20
 800094a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800094e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000952:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8000956:	eb04 0108 	add.w	r1, r4, r8
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count+=count;
 800095a:	f8d1 3224 	ldr.w	r3, [r1, #548]	; 0x224
        ep->xfer_buff+=count;
 800095e:	f8d1 221c 	ldr.w	r2, [r1, #540]	; 0x21c
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);  
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count+=count;
 8000962:	4433      	add	r3, r6
 8000964:	f8c1 3224 	str.w	r3, [r1, #548]	; 0x224
        ep->xfer_buff+=count;
       
        if ((ep->xfer_len == 0) || (count < ep->maxpacket))
 8000968:	f8d1 3220 	ldr.w	r3, [r1, #544]	; 0x220
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);  
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count+=count;
        ep->xfer_buff+=count;
 800096c:	4432      	add	r2, r6
 800096e:	f8c1 221c 	str.w	r2, [r1, #540]	; 0x21c
       
        if ((ep->xfer_len == 0) || (count < ep->maxpacket))
 8000972:	b11b      	cbz	r3, 800097c <HAL_PCD_IRQHandler+0x2bc>
 8000974:	f8d1 0218 	ldr.w	r0, [r1, #536]	; 0x218
 8000978:	4286      	cmp	r6, r0
 800097a:	d206      	bcs.n	800098a <HAL_PCD_IRQHandler+0x2ca>
        {
          /* RX COMPLETE */
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800097c:	44a0      	add	r8, r4
 800097e:	f898 1208 	ldrb.w	r1, [r8, #520]	; 0x208
 8000982:	4620      	mov	r0, r4
 8000984:	f002 f88a 	bl	8002a9c <HAL_PCD_DataOutStageCallback>
 8000988:	e004      	b.n	8000994 <HAL_PCD_IRQHandler+0x2d4>
        }
        else
        {
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800098a:	f891 1208 	ldrb.w	r1, [r1, #520]	; 0x208
 800098e:	4620      	mov	r0, r4
 8000990:	f7ff fe4b 	bl	800062a <HAL_PCD_EP_Receive>
        }
        
      } /* if((wEPVal & EP_CTR_RX) */
      
      if ((wEPVal & USB_EP_CTR_TX) != 0)
 8000994:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8000998:	061a      	lsls	r2, r3, #24
 800099a:	f57f aeb7 	bpl.w	800070c <HAL_PCD_IRQHandler+0x4c>
      {
        ep = &hpcd->IN_ep[epindex];
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800099e:	6820      	ldr	r0, [r4, #0]
        
        /* IN double Buffering*/
        if (ep->doublebuffer == 0)
 80009a0:	016e      	lsls	r6, r5, #5
      if ((wEPVal & USB_EP_CTR_TX) != 0)
      {
        ep = &hpcd->IN_ep[epindex];
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80009a2:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
        
        /* IN double Buffering*/
        if (ep->doublebuffer == 0)
 80009a6:	19a1      	adds	r1, r4, r6
      if ((wEPVal & USB_EP_CTR_TX) != 0)
      {
        ep = &hpcd->IN_ep[epindex];
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80009a8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80009ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80009b0:	041b      	lsls	r3, r3, #16
 80009b2:	0c1b      	lsrs	r3, r3, #16
 80009b4:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
        
        /* IN double Buffering*/
        if (ep->doublebuffer == 0)
 80009b8:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 80009bc:	3502      	adds	r5, #2
 80009be:	b9b3      	cbnz	r3, 80009ee <HAL_PCD_IRQHandler+0x32e>
        {
          ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80009c0:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80009c4:	f891 2028 	ldrb.w	r2, [r1, #40]	; 0x28
 80009c8:	b29b      	uxth	r3, r3
 80009ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80009ce:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80009d2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80009d6:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 80009da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80009de:	606b      	str	r3, [r5, #4]
          if (ep->xfer_count != 0)
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d038      	beq.n	8000a56 <HAL_PCD_IRQHandler+0x396>
          {
            USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 80009e4:	8d8a      	ldrh	r2, [r1, #44]	; 0x2c
 80009e6:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 80009e8:	f001 f933 	bl	8001c52 <USB_WritePMA>
 80009ec:	e033      	b.n	8000a56 <HAL_PCD_IRQHandler+0x396>
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 80009ee:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 80009f2:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80009f6:	00db      	lsls	r3, r3, #3
 80009f8:	f012 0f40 	tst.w	r2, #64	; 0x40
          {
            /*read from endpoint BUF0Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80009fc:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8000a00:	b292      	uxth	r2, r2
 8000a02:	4413      	add	r3, r2
 8000a04:	eb00 0343 	add.w	r3, r0, r3, lsl #1
            USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 8000a08:	d009      	beq.n	8000a1e <HAL_PCD_IRQHandler+0x35e>
          {
            /*read from endpoint BUF0Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000a0a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8000a0e:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 8000a12:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000a16:	606b      	str	r3, [r5, #4]
            if (ep->xfer_count != 0)
 8000a18:	b16b      	cbz	r3, 8000a36 <HAL_PCD_IRQHandler+0x376>
            {
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, ep->xfer_count);
 8000a1a:	8dca      	ldrh	r2, [r1, #46]	; 0x2e
 8000a1c:	e008      	b.n	8000a30 <HAL_PCD_IRQHandler+0x370>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8000a1e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8000a22:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 8000a26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000a2a:	606b      	str	r3, [r5, #4]
            if (ep->xfer_count != 0)
 8000a2c:	b11b      	cbz	r3, 8000a36 <HAL_PCD_IRQHandler+0x376>
            {
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 8000a2e:	8e0a      	ldrh	r2, [r1, #48]	; 0x30
 8000a30:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8000a32:	f001 f90e 	bl	8001c52 <USB_WritePMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
 8000a36:	19a3      	adds	r3, r4, r6
 8000a38:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 8000a3c:	6822      	ldr	r2, [r4, #0]
 8000a3e:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8000a42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000a46:	051b      	lsls	r3, r3, #20
 8000a48:	0d1b      	lsrs	r3, r3, #20
 8000a4a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a52:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000a56:	6820      	ldr	r0, [r4, #0]
 8000a58:	19a1      	adds	r1, r4, r6
 8000a5a:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8000a5e:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8000a62:	b292      	uxth	r2, r2
 8000a64:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8000a68:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000a6c:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
        ep->xfer_buff+=ep->xfer_count;
 8000a70:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000a72:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8000a76:	644a      	str	r2, [r1, #68]	; 0x44
        ep->xfer_buff+=ep->xfer_count;
 8000a78:	441a      	add	r2, r3
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0)
 8000a7a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
        ep->xfer_buff+=ep->xfer_count;
 8000a7c:	63ca      	str	r2, [r1, #60]	; 0x3c
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0)
        {
          /* TX COMPLETE */
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8000a7e:	4620      	mov	r0, r4
 8000a80:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
        ep->xfer_buff+=ep->xfer_count;
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0)
 8000a84:	b913      	cbnz	r3, 8000a8c <HAL_PCD_IRQHandler+0x3cc>
        {
          /* TX COMPLETE */
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8000a86:	f002 f811 	bl	8002aac <HAL_PCD_DataInStageCallback>
 8000a8a:	e63f      	b.n	800070c <HAL_PCD_IRQHandler+0x4c>
        }
        else
        {
          HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8000a8c:	f7ff fdf8 	bl	8000680 <HAL_PCD_EP_Transmit>
 8000a90:	e63c      	b.n	800070c <HAL_PCD_IRQHandler+0x4c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
    HAL_PCD_ResetCallback(hpcd);
    HAL_PCD_SetAddress(hpcd, 0);
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_PMAOVR))
 8000a92:	6820      	ldr	r0, [r4, #0]
 8000a94:	f001 f8d7 	bl	8001c46 <USB_ReadInterrupts>
 8000a98:	0447      	lsls	r7, r0, #17
 8000a9a:	d508      	bpl.n	8000aae <HAL_PCD_IRQHandler+0x3ee>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);    
 8000a9c:	6822      	ldr	r2, [r4, #0]
 8000a9e:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000aa2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000aa6:	041b      	lsls	r3, r3, #16
 8000aa8:	0c1b      	lsrs	r3, r3, #16
 8000aaa:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  }
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ERR))
 8000aae:	6820      	ldr	r0, [r4, #0]
 8000ab0:	f001 f8c9 	bl	8001c46 <USB_ReadInterrupts>
 8000ab4:	0486      	lsls	r6, r0, #18
 8000ab6:	d508      	bpl.n	8000aca <HAL_PCD_IRQHandler+0x40a>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR); 
 8000ab8:	6822      	ldr	r2, [r4, #0]
 8000aba:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000abe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000ac2:	041b      	lsls	r3, r3, #16
 8000ac4:	0c1b      	lsrs	r3, r3, #16
 8000ac6:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP))
 8000aca:	6820      	ldr	r0, [r4, #0]
 8000acc:	f001 f8bb 	bl	8001c46 <USB_ReadInterrupts>
 8000ad0:	04c5      	lsls	r5, r0, #19
 8000ad2:	d518      	bpl.n	8000b06 <HAL_PCD_IRQHandler+0x446>
  {  
    hpcd->Instance->CNTR &= ~(USB_CNTR_LP_MODE);
 8000ad4:	6822      	ldr	r2, [r4, #0]
      | USB_CNTR_ESOFM | USB_CNTR_RESETM;
    
    /*Set interrupt mask*/
    hpcd->Instance->CNTR = wInterrupt_Mask;
    
    HAL_PCD_ResumeCallback(hpcd);
 8000ad6:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR); 
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP))
  {  
    hpcd->Instance->CNTR &= ~(USB_CNTR_LP_MODE);
 8000ad8:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8000adc:	f023 0304 	bic.w	r3, r3, #4
 8000ae0:	041b      	lsls	r3, r3, #16
 8000ae2:	0c1b      	lsrs	r3, r3, #16
 8000ae4:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    /*set wInterrupt_Mask global variable*/
    wInterrupt_Mask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
      | USB_CNTR_ESOFM | USB_CNTR_RESETM;
    
    /*Set interrupt mask*/
    hpcd->Instance->CNTR = wInterrupt_Mask;
 8000ae8:	f44f 433d 	mov.w	r3, #48384	; 0xbd00
 8000aec:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    
    HAL_PCD_ResumeCallback(hpcd);
 8000af0:	f002 f804 	bl	8002afc <HAL_PCD_ResumeCallback>
    
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);     
 8000af4:	6822      	ldr	r2, [r4, #0]
 8000af6:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000afa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000afe:	041b      	lsls	r3, r3, #16
 8000b00:	0c1b      	lsrs	r3, r3, #16
 8000b02:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SUSP))
 8000b06:	6820      	ldr	r0, [r4, #0]
 8000b08:	f001 f89d 	bl	8001c46 <USB_ReadInterrupts>
 8000b0c:	0500      	lsls	r0, r0, #20
 8000b0e:	d51d      	bpl.n	8000b4c <HAL_PCD_IRQHandler+0x48c>
  {
    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);  
 8000b10:	6820      	ldr	r0, [r4, #0]
 8000b12:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8000b16:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000b1a:	041b      	lsls	r3, r3, #16
 8000b1c:	0c1b      	lsrs	r3, r3, #16
 8000b1e:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
    
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8000b22:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8000b26:	b29b      	uxth	r3, r3
 8000b28:	f043 0308 	orr.w	r3, r3, #8
 8000b2c:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8000b30:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8000b34:	b29b      	uxth	r3, r3
 8000b36:	f043 0304 	orr.w	r3, r3, #4
 8000b3a:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP) == 0)
 8000b3e:	f001 f882 	bl	8001c46 <USB_ReadInterrupts>
 8000b42:	04c1      	lsls	r1, r0, #19
 8000b44:	d402      	bmi.n	8000b4c <HAL_PCD_IRQHandler+0x48c>
    {
      HAL_PCD_SuspendCallback(hpcd);
 8000b46:	4620      	mov	r0, r4
 8000b48:	f001 ffc8 	bl	8002adc <HAL_PCD_SuspendCallback>
    }
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SOF))
 8000b4c:	6820      	ldr	r0, [r4, #0]
 8000b4e:	f001 f87a 	bl	8001c46 <USB_ReadInterrupts>
 8000b52:	0582      	lsls	r2, r0, #22
 8000b54:	d50b      	bpl.n	8000b6e <HAL_PCD_IRQHandler+0x4ae>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 8000b56:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 8000b58:	4620      	mov	r0, r4
    }
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SOF))
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 8000b5a:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000b5e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000b62:	041b      	lsls	r3, r3, #16
 8000b64:	0c1b      	lsrs	r3, r3, #16
 8000b66:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8000b6a:	f001 ffa6 	bl	8002aba <HAL_PCD_SOFCallback>
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ESOF))
 8000b6e:	6820      	ldr	r0, [r4, #0]
 8000b70:	f001 f869 	bl	8001c46 <USB_ReadInterrupts>
 8000b74:	05c3      	lsls	r3, r0, #23
 8000b76:	d508      	bpl.n	8000b8a <HAL_PCD_IRQHandler+0x4ca>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF); 
 8000b78:	6822      	ldr	r2, [r4, #0]
 8000b7a:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000b7e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000b82:	041b      	lsls	r3, r3, #16
 8000b84:	0c1b      	lsrs	r3, r3, #16
 8000b86:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  }
}
 8000b8a:	b002      	add	sp, #8
 8000b8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000b90 <HAL_PCD_EP_SetStall>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000b90:	b538      	push	{r3, r4, r5, lr}
  PCD_EPTypeDef *ep = NULL;
  
  if ((0x80 & ep_addr) == 0x80)
 8000b92:	b24b      	sxtb	r3, r1
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	f001 057f 	and.w	r5, r1, #127	; 0x7f
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8000b9a:	bfb5      	itete	lt
 8000b9c:	eb00 1145 	addlt.w	r1, r0, r5, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8000ba0:	eb00 1141 	addge.w	r1, r0, r1, lsl #5
{
  PCD_EPTypeDef *ep = NULL;
  
  if ((0x80 & ep_addr) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8000ba4:	3128      	addlt	r1, #40	; 0x28
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8000ba6:	f501 7102 	addge.w	r1, r1, #520	; 0x208
  }
  
  ep->is_stall = 1;
 8000baa:	2201      	movs	r2, #1
  ep->num   = ep_addr & 0x7F;
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8000bac:	0fdb      	lsrs	r3, r3, #31
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }
  
  ep->is_stall = 1;
  ep->num   = ep_addr & 0x7F;
 8000bae:	b2ed      	uxtb	r5, r5
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }
  
  ep->is_stall = 1;
 8000bb0:	708a      	strb	r2, [r1, #2]
  ep->num   = ep_addr & 0x7F;
 8000bb2:	700d      	strb	r5, [r1, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8000bb4:	704b      	strb	r3, [r1, #1]
  
  __HAL_LOCK(hpcd);
 8000bb6:	f890 33e8 	ldrb.w	r3, [r0, #1000]	; 0x3e8
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000bba:	4604      	mov	r4, r0
  
  ep->is_stall = 1;
  ep->num   = ep_addr & 0x7F;
  ep->is_in = ((ep_addr & 0x80) == 0x80);
  
  __HAL_LOCK(hpcd);
 8000bbc:	4293      	cmp	r3, r2
 8000bbe:	d00e      	beq.n	8000bde <HAL_PCD_EP_SetStall+0x4e>
 8000bc0:	f880 23e8 	strb.w	r2, [r0, #1000]	; 0x3e8
  USB_EPSetStall(hpcd->Instance , ep);
 8000bc4:	6800      	ldr	r0, [r0, #0]
 8000bc6:	f000 ffc1 	bl	8001b4c <USB_EPSetStall>
  if((ep_addr & 0x7F) == 0)
 8000bca:	b925      	cbnz	r5, 8000bd6 <HAL_PCD_EP_SetStall+0x46>
  {
    USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8000bcc:	f504 717b 	add.w	r1, r4, #1004	; 0x3ec
 8000bd0:	6820      	ldr	r0, [r4, #0]
 8000bd2:	f001 f83c 	bl	8001c4e <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd); 
 8000bd6:	2000      	movs	r0, #0
 8000bd8:	f884 03e8 	strb.w	r0, [r4, #1000]	; 0x3e8
  
  return HAL_OK;
 8000bdc:	bd38      	pop	{r3, r4, r5, pc}
  
  ep->is_stall = 1;
  ep->num   = ep_addr & 0x7F;
  ep->is_in = ((ep_addr & 0x80) == 0x80);
  
  __HAL_LOCK(hpcd);
 8000bde:	2002      	movs	r0, #2
    USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
  }
  __HAL_UNLOCK(hpcd); 
  
  return HAL_OK;
}
 8000be0:	bd38      	pop	{r3, r4, r5, pc}

08000be2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000be2:	b538      	push	{r3, r4, r5, lr}
  PCD_EPTypeDef *ep = NULL;
  
  if ((0x80 & ep_addr) == 0x80)
 8000be4:	b24b      	sxtb	r3, r1
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	f001 027f 	and.w	r2, r1, #127	; 0x7f
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8000bec:	bfb5      	itete	lt
 8000bee:	eb00 1142 	addlt.w	r1, r0, r2, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8000bf2:	eb00 1141 	addge.w	r1, r0, r1, lsl #5
{
  PCD_EPTypeDef *ep = NULL;
  
  if ((0x80 & ep_addr) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8000bf6:	3128      	addlt	r1, #40	; 0x28
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8000bf8:	f501 7102 	addge.w	r1, r1, #520	; 0x208
  }
  
  ep->is_stall = 0;
  ep->num   = ep_addr & 0x7F;
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8000bfc:	0fdb      	lsrs	r3, r3, #31
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }
  
  ep->is_stall = 0;
 8000bfe:	2400      	movs	r4, #0
 8000c00:	708c      	strb	r4, [r1, #2]
  ep->num   = ep_addr & 0x7F;
 8000c02:	700a      	strb	r2, [r1, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8000c04:	704b      	strb	r3, [r1, #1]
  
  __HAL_LOCK(hpcd); 
 8000c06:	f890 33e8 	ldrb.w	r3, [r0, #1000]	; 0x3e8
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000c0a:	4605      	mov	r5, r0
  
  ep->is_stall = 0;
  ep->num   = ep_addr & 0x7F;
  ep->is_in = ((ep_addr & 0x80) == 0x80);
  
  __HAL_LOCK(hpcd); 
 8000c0c:	2b01      	cmp	r3, #1
 8000c0e:	d009      	beq.n	8000c24 <HAL_PCD_EP_ClrStall+0x42>
 8000c10:	2301      	movs	r3, #1
 8000c12:	f880 33e8 	strb.w	r3, [r0, #1000]	; 0x3e8
  USB_EPClearStall(hpcd->Instance , ep);
 8000c16:	6800      	ldr	r0, [r0, #0]
 8000c18:	f000 ffc9 	bl	8001bae <USB_EPClearStall>
  __HAL_UNLOCK(hpcd); 
 8000c1c:	f885 43e8 	strb.w	r4, [r5, #1000]	; 0x3e8
  
  return HAL_OK;
 8000c20:	4620      	mov	r0, r4
 8000c22:	bd38      	pop	{r3, r4, r5, pc}
  
  ep->is_stall = 0;
  ep->num   = ep_addr & 0x7F;
  ep->is_in = ((ep_addr & 0x80) == 0x80);
  
  __HAL_LOCK(hpcd); 
 8000c24:	2002      	movs	r0, #2
  USB_EPClearStall(hpcd->Instance , ep);
  __HAL_UNLOCK(hpcd); 
  
  return HAL_OK;
}
 8000c26:	bd38      	pop	{r3, r4, r5, pc}

08000c28 <HAL_PCDEx_PMAConfig>:

{
  PCD_EPTypeDef *ep = NULL;
  
  /* initialize ep structure*/
  if ((0x80 & ep_addr) == 0x80)
 8000c28:	f011 0f80 	tst.w	r1, #128	; 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8000c2c:	bf1b      	ittet	ne
 8000c2e:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 8000c32:	eb00 1041 	addne.w	r0, r0, r1, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8000c36:	eb00 1041 	addeq.w	r0, r0, r1, lsl #5
  PCD_EPTypeDef *ep = NULL;
  
  /* initialize ep structure*/
  if ((0x80 & ep_addr) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8000c3a:	3028      	addne	r0, #40	; 0x28
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8000c3c:	bf08      	it	eq
 8000c3e:	f500 7002 	addeq.w	r0, r0, #520	; 0x208
  }
  
  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8000c42:	b912      	cbnz	r2, 8000c4a <HAL_PCDEx_PMAConfig+0x22>
  {
    /*Single Buffer*/
    ep->doublebuffer = 0;
 8000c44:	7282      	strb	r2, [r0, #10]
    /*Configure te PMA*/
    ep->pmaadress = (uint16_t)pmaadress;
 8000c46:	8083      	strh	r3, [r0, #4]
 8000c48:	e004      	b.n	8000c54 <HAL_PCDEx_PMAConfig+0x2c>
  }
  else /*USB_DBL_BUF*/
  {
    /*Double Buffer Endpoint*/
    ep->doublebuffer = 1;
 8000c4a:	2201      	movs	r2, #1
    /*Configure the PMA*/
    ep->pmaaddr0 =  pmaadress & 0xFFFF;
 8000c4c:	80c3      	strh	r3, [r0, #6]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000) >> 16;
 8000c4e:	0c1b      	lsrs	r3, r3, #16
    ep->pmaadress = (uint16_t)pmaadress;
  }
  else /*USB_DBL_BUF*/
  {
    /*Double Buffer Endpoint*/
    ep->doublebuffer = 1;
 8000c50:	7282      	strb	r2, [r0, #10]
    /*Configure the PMA*/
    ep->pmaaddr0 =  pmaadress & 0xFFFF;
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000) >> 16;
 8000c52:	8103      	strh	r3, [r0, #8]
  }
  
  return HAL_OK; 
}
 8000c54:	2000      	movs	r0, #0
 8000c56:	4770      	bx	lr

08000c58 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c58:	6803      	ldr	r3, [r0, #0]
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c5a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c5e:	07dc      	lsls	r4, r3, #31
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c60:	4605      	mov	r5, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c62:	d403      	bmi.n	8000c6c <HAL_RCC_OscConfig+0x14>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c64:	682b      	ldr	r3, [r5, #0]
 8000c66:	0798      	lsls	r0, r3, #30
 8000c68:	d473      	bmi.n	8000d52 <HAL_RCC_OscConfig+0xfa>
 8000c6a:	e0f2      	b.n	8000e52 <HAL_RCC_OscConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000c6c:	4cb9      	ldr	r4, [pc, #740]	; (8000f54 <HAL_RCC_OscConfig+0x2fc>)
 8000c6e:	6863      	ldr	r3, [r4, #4]
 8000c70:	f003 030c 	and.w	r3, r3, #12
 8000c74:	2b04      	cmp	r3, #4
 8000c76:	d007      	beq.n	8000c88 <HAL_RCC_OscConfig+0x30>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c78:	6863      	ldr	r3, [r4, #4]
 8000c7a:	f003 030c 	and.w	r3, r3, #12
 8000c7e:	2b08      	cmp	r3, #8
 8000c80:	d116      	bne.n	8000cb0 <HAL_RCC_OscConfig+0x58>
 8000c82:	6863      	ldr	r3, [r4, #4]
 8000c84:	03d9      	lsls	r1, r3, #15
 8000c86:	d513      	bpl.n	8000cb0 <HAL_RCC_OscConfig+0x58>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c88:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c8c:	fa93 f2a3 	rbit	r2, r3
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c90:	6822      	ldr	r2, [r4, #0]
 8000c92:	fa93 f3a3 	rbit	r3, r3
 8000c96:	fab3 f383 	clz	r3, r3
 8000c9a:	f003 031f 	and.w	r3, r3, #31
 8000c9e:	fa22 f303 	lsr.w	r3, r2, r3
 8000ca2:	07da      	lsls	r2, r3, #31
 8000ca4:	d5de      	bpl.n	8000c64 <HAL_RCC_OscConfig+0xc>
 8000ca6:	686b      	ldr	r3, [r5, #4]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d1db      	bne.n	8000c64 <HAL_RCC_OscConfig+0xc>
      {
        return HAL_ERROR;
 8000cac:	2001      	movs	r0, #1
 8000cae:	e22d      	b.n	800110c <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cb0:	686b      	ldr	r3, [r5, #4]
 8000cb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cb6:	d015      	beq.n	8000ce4 <HAL_RCC_OscConfig+0x8c>
 8000cb8:	b96b      	cbnz	r3, 8000cd6 <HAL_RCC_OscConfig+0x7e>
 8000cba:	6823      	ldr	r3, [r4, #0]
 8000cbc:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000cc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cc4:	6023      	str	r3, [r4, #0]
 8000cc6:	6823      	ldr	r3, [r4, #0]
 8000cc8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ccc:	6023      	str	r3, [r4, #0]
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cce:	f7ff fa69 	bl	80001a4 <HAL_GetTick>
 8000cd2:	4607      	mov	r7, r0
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cd4:	e02f      	b.n	8000d36 <HAL_RCC_OscConfig+0xde>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cd6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000cda:	6823      	ldr	r3, [r4, #0]
 8000cdc:	d106      	bne.n	8000cec <HAL_RCC_OscConfig+0x94>
 8000cde:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ce2:	6023      	str	r3, [r4, #0]
 8000ce4:	6823      	ldr	r3, [r4, #0]
 8000ce6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cea:	e005      	b.n	8000cf8 <HAL_RCC_OscConfig+0xa0>
 8000cec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cf0:	6023      	str	r3, [r4, #0]
 8000cf2:	6823      	ldr	r3, [r4, #0]
 8000cf4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cf8:	6023      	str	r3, [r4, #0]

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cfa:	f7ff fa53 	bl	80001a4 <HAL_GetTick>
 8000cfe:	4607      	mov	r7, r0
 8000d00:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000d04:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d08:	6822      	ldr	r2, [r4, #0]
 8000d0a:	fa96 f3a6 	rbit	r3, r6
 8000d0e:	fab3 f383 	clz	r3, r3
 8000d12:	f003 031f 	and.w	r3, r3, #31
 8000d16:	fa22 f303 	lsr.w	r3, r2, r3
 8000d1a:	07db      	lsls	r3, r3, #31
 8000d1c:	d4a2      	bmi.n	8000c64 <HAL_RCC_OscConfig+0xc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d1e:	f7ff fa41 	bl	80001a4 <HAL_GetTick>
 8000d22:	1bc0      	subs	r0, r0, r7
 8000d24:	2864      	cmp	r0, #100	; 0x64
 8000d26:	d9ed      	bls.n	8000d04 <HAL_RCC_OscConfig+0xac>
          {
            return HAL_TIMEOUT;
 8000d28:	2003      	movs	r0, #3
 8000d2a:	e1ef      	b.n	800110c <HAL_RCC_OscConfig+0x4b4>
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d2c:	f7ff fa3a 	bl	80001a4 <HAL_GetTick>
 8000d30:	1bc0      	subs	r0, r0, r7
 8000d32:	2864      	cmp	r0, #100	; 0x64
 8000d34:	d8f8      	bhi.n	8000d28 <HAL_RCC_OscConfig+0xd0>
 8000d36:	fa96 f3a6 	rbit	r3, r6
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d3a:	6822      	ldr	r2, [r4, #0]
 8000d3c:	fa96 f3a6 	rbit	r3, r6
 8000d40:	fab3 f383 	clz	r3, r3
 8000d44:	f003 031f 	and.w	r3, r3, #31
 8000d48:	fa22 f303 	lsr.w	r3, r2, r3
 8000d4c:	07d8      	lsls	r0, r3, #31
 8000d4e:	d4ed      	bmi.n	8000d2c <HAL_RCC_OscConfig+0xd4>
 8000d50:	e788      	b.n	8000c64 <HAL_RCC_OscConfig+0xc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000d52:	4c80      	ldr	r4, [pc, #512]	; (8000f54 <HAL_RCC_OscConfig+0x2fc>)
 8000d54:	6863      	ldr	r3, [r4, #4]
 8000d56:	f013 0f0c 	tst.w	r3, #12
 8000d5a:	d007      	beq.n	8000d6c <HAL_RCC_OscConfig+0x114>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000d5c:	6863      	ldr	r3, [r4, #4]
 8000d5e:	f003 030c 	and.w	r3, r3, #12
 8000d62:	2b08      	cmp	r3, #8
 8000d64:	d121      	bne.n	8000daa <HAL_RCC_OscConfig+0x152>
 8000d66:	6863      	ldr	r3, [r4, #4]
 8000d68:	03d9      	lsls	r1, r3, #15
 8000d6a:	d41e      	bmi.n	8000daa <HAL_RCC_OscConfig+0x152>
 8000d6c:	2302      	movs	r3, #2
 8000d6e:	fa93 f2a3 	rbit	r2, r3
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d72:	6822      	ldr	r2, [r4, #0]
 8000d74:	fa93 f3a3 	rbit	r3, r3
 8000d78:	fab3 f383 	clz	r3, r3
 8000d7c:	f003 031f 	and.w	r3, r3, #31
 8000d80:	fa22 f303 	lsr.w	r3, r2, r3
 8000d84:	07da      	lsls	r2, r3, #31
 8000d86:	d502      	bpl.n	8000d8e <HAL_RCC_OscConfig+0x136>
 8000d88:	692b      	ldr	r3, [r5, #16]
 8000d8a:	2b01      	cmp	r3, #1
 8000d8c:	d18e      	bne.n	8000cac <HAL_RCC_OscConfig+0x54>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d8e:	6823      	ldr	r3, [r4, #0]
 8000d90:	22f8      	movs	r2, #248	; 0xf8
 8000d92:	fa92 f2a2 	rbit	r2, r2
 8000d96:	fab2 f282 	clz	r2, r2
 8000d9a:	6969      	ldr	r1, [r5, #20]
 8000d9c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000da0:	fa01 f202 	lsl.w	r2, r1, r2
 8000da4:	4313      	orrs	r3, r2
 8000da6:	6023      	str	r3, [r4, #0]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000da8:	e053      	b.n	8000e52 <HAL_RCC_OscConfig+0x1fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000daa:	692a      	ldr	r2, [r5, #16]
 8000dac:	2301      	movs	r3, #1
 8000dae:	b37a      	cbz	r2, 8000e10 <HAL_RCC_OscConfig+0x1b8>
 8000db0:	fa93 f2a3 	rbit	r2, r3
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000db4:	fab2 f282 	clz	r2, r2
 8000db8:	0092      	lsls	r2, r2, #2
 8000dba:	f102 4284 	add.w	r2, r2, #1107296256	; 0x42000000
 8000dbe:	f502 0284 	add.w	r2, r2, #4325376	; 0x420000
 8000dc2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dc4:	f7ff f9ee 	bl	80001a4 <HAL_GetTick>
 8000dc8:	4607      	mov	r7, r0
 8000dca:	2602      	movs	r6, #2
 8000dcc:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dd0:	4860      	ldr	r0, [pc, #384]	; (8000f54 <HAL_RCC_OscConfig+0x2fc>)
 8000dd2:	6822      	ldr	r2, [r4, #0]
 8000dd4:	fa96 f3a6 	rbit	r3, r6
 8000dd8:	fab3 f383 	clz	r3, r3
 8000ddc:	f003 031f 	and.w	r3, r3, #31
 8000de0:	fa22 f303 	lsr.w	r3, r2, r3
 8000de4:	07db      	lsls	r3, r3, #31
 8000de6:	d405      	bmi.n	8000df4 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000de8:	f7ff f9dc 	bl	80001a4 <HAL_GetTick>
 8000dec:	1bc0      	subs	r0, r0, r7
 8000dee:	2802      	cmp	r0, #2
 8000df0:	d9ec      	bls.n	8000dcc <HAL_RCC_OscConfig+0x174>
 8000df2:	e799      	b.n	8000d28 <HAL_RCC_OscConfig+0xd0>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000df4:	6803      	ldr	r3, [r0, #0]
 8000df6:	22f8      	movs	r2, #248	; 0xf8
 8000df8:	fa92 f2a2 	rbit	r2, r2
 8000dfc:	fab2 f282 	clz	r2, r2
 8000e00:	6969      	ldr	r1, [r5, #20]
 8000e02:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000e06:	fa01 f202 	lsl.w	r2, r1, r2
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	6003      	str	r3, [r0, #0]
 8000e0e:	e020      	b.n	8000e52 <HAL_RCC_OscConfig+0x1fa>
 8000e10:	fa93 f3a3 	rbit	r3, r3
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e14:	fab3 f383 	clz	r3, r3
 8000e18:	009b      	lsls	r3, r3, #2
 8000e1a:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8000e1e:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8000e22:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e24:	f7ff f9be 	bl	80001a4 <HAL_GetTick>
 8000e28:	4607      	mov	r7, r0
 8000e2a:	2602      	movs	r6, #2
 8000e2c:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e30:	6822      	ldr	r2, [r4, #0]
 8000e32:	fa96 f3a6 	rbit	r3, r6
 8000e36:	fab3 f383 	clz	r3, r3
 8000e3a:	f003 031f 	and.w	r3, r3, #31
 8000e3e:	fa22 f303 	lsr.w	r3, r2, r3
 8000e42:	07d9      	lsls	r1, r3, #31
 8000e44:	d505      	bpl.n	8000e52 <HAL_RCC_OscConfig+0x1fa>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e46:	f7ff f9ad 	bl	80001a4 <HAL_GetTick>
 8000e4a:	1bc0      	subs	r0, r0, r7
 8000e4c:	2802      	cmp	r0, #2
 8000e4e:	d9ed      	bls.n	8000e2c <HAL_RCC_OscConfig+0x1d4>
 8000e50:	e76a      	b.n	8000d28 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e52:	682b      	ldr	r3, [r5, #0]
 8000e54:	071a      	lsls	r2, r3, #28
 8000e56:	d546      	bpl.n	8000ee6 <HAL_RCC_OscConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e58:	69aa      	ldr	r2, [r5, #24]
 8000e5a:	4c3e      	ldr	r4, [pc, #248]	; (8000f54 <HAL_RCC_OscConfig+0x2fc>)
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	493e      	ldr	r1, [pc, #248]	; (8000f58 <HAL_RCC_OscConfig+0x300>)
 8000e60:	b312      	cbz	r2, 8000ea8 <HAL_RCC_OscConfig+0x250>
 8000e62:	fa93 f2a3 	rbit	r2, r3
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e66:	fab2 f282 	clz	r2, r2
 8000e6a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e6e:	f7ff f999 	bl	80001a4 <HAL_GetTick>
 8000e72:	4607      	mov	r7, r0
 8000e74:	2602      	movs	r6, #2
 8000e76:	fa96 f3a6 	rbit	r3, r6
 8000e7a:	fa96 f3a6 	rbit	r3, r6
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e7e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000e80:	fa96 f3a6 	rbit	r3, r6
 8000e84:	fab3 f383 	clz	r3, r3
 8000e88:	f003 031f 	and.w	r3, r3, #31
 8000e8c:	fa22 f303 	lsr.w	r3, r2, r3
 8000e90:	07db      	lsls	r3, r3, #31
 8000e92:	d405      	bmi.n	8000ea0 <HAL_RCC_OscConfig+0x248>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e94:	f7ff f986 	bl	80001a4 <HAL_GetTick>
 8000e98:	1bc0      	subs	r0, r0, r7
 8000e9a:	2802      	cmp	r0, #2
 8000e9c:	d9eb      	bls.n	8000e76 <HAL_RCC_OscConfig+0x21e>
 8000e9e:	e743      	b.n	8000d28 <HAL_RCC_OscConfig+0xd0>
          return HAL_TIMEOUT;
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      HAL_Delay(1);
 8000ea0:	2001      	movs	r0, #1
 8000ea2:	f7ff f985 	bl	80001b0 <HAL_Delay>
 8000ea6:	e01e      	b.n	8000ee6 <HAL_RCC_OscConfig+0x28e>
 8000ea8:	fa93 f3a3 	rbit	r3, r3
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000eac:	fab3 f383 	clz	r3, r3
 8000eb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000eb4:	f7ff f976 	bl	80001a4 <HAL_GetTick>
 8000eb8:	4607      	mov	r7, r0
 8000eba:	2602      	movs	r6, #2
 8000ebc:	fa96 f3a6 	rbit	r3, r6
 8000ec0:	fa96 f3a6 	rbit	r3, r6
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ec4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000ec6:	fa96 f3a6 	rbit	r3, r6
 8000eca:	fab3 f383 	clz	r3, r3
 8000ece:	f003 031f 	and.w	r3, r3, #31
 8000ed2:	fa22 f303 	lsr.w	r3, r2, r3
 8000ed6:	07d8      	lsls	r0, r3, #31
 8000ed8:	d505      	bpl.n	8000ee6 <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000eda:	f7ff f963 	bl	80001a4 <HAL_GetTick>
 8000ede:	1bc0      	subs	r0, r0, r7
 8000ee0:	2802      	cmp	r0, #2
 8000ee2:	d9eb      	bls.n	8000ebc <HAL_RCC_OscConfig+0x264>
 8000ee4:	e720      	b.n	8000d28 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ee6:	682b      	ldr	r3, [r5, #0]
 8000ee8:	0759      	lsls	r1, r3, #29
 8000eea:	d404      	bmi.n	8000ef6 <HAL_RCC_OscConfig+0x29e>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000eec:	69ea      	ldr	r2, [r5, #28]
 8000eee:	2a00      	cmp	r2, #0
 8000ef0:	f040 8081 	bne.w	8000ff6 <HAL_RCC_OscConfig+0x39e>
 8000ef4:	e0d8      	b.n	80010a8 <HAL_RCC_OscConfig+0x450>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ef6:	4c17      	ldr	r4, [pc, #92]	; (8000f54 <HAL_RCC_OscConfig+0x2fc>)
    
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ef8:	4e18      	ldr	r6, [pc, #96]	; (8000f5c <HAL_RCC_OscConfig+0x304>)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8000efa:	69e3      	ldr	r3, [r4, #28]
 8000efc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f00:	61e3      	str	r3, [r4, #28]
 8000f02:	69e3      	ldr	r3, [r4, #28]
 8000f04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f08:	9301      	str	r3, [sp, #4]
 8000f0a:	9b01      	ldr	r3, [sp, #4]
    
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f0c:	6833      	ldr	r3, [r6, #0]
 8000f0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f12:	6033      	str	r3, [r6, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f14:	f7ff f946 	bl	80001a4 <HAL_GetTick>
 8000f18:	4607      	mov	r7, r0

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8000f1a:	6833      	ldr	r3, [r6, #0]
 8000f1c:	05da      	lsls	r2, r3, #23
 8000f1e:	d405      	bmi.n	8000f2c <HAL_RCC_OscConfig+0x2d4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f20:	f7ff f940 	bl	80001a4 <HAL_GetTick>
 8000f24:	1bc0      	subs	r0, r0, r7
 8000f26:	2864      	cmp	r0, #100	; 0x64
 8000f28:	d9f7      	bls.n	8000f1a <HAL_RCC_OscConfig+0x2c2>
 8000f2a:	e6fd      	b.n	8000d28 <HAL_RCC_OscConfig+0xd0>
          return HAL_TIMEOUT;
        }
      }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f2c:	68eb      	ldr	r3, [r5, #12]
 8000f2e:	2b01      	cmp	r3, #1
 8000f30:	d01c      	beq.n	8000f6c <HAL_RCC_OscConfig+0x314>
 8000f32:	b9ab      	cbnz	r3, 8000f60 <HAL_RCC_OscConfig+0x308>
 8000f34:	6a23      	ldr	r3, [r4, #32]
 8000f36:	2602      	movs	r6, #2
 8000f38:	f023 0301 	bic.w	r3, r3, #1
 8000f3c:	6223      	str	r3, [r4, #32]
 8000f3e:	6a23      	ldr	r3, [r4, #32]
 8000f40:	4637      	mov	r7, r6
 8000f42:	f023 0304 	bic.w	r3, r3, #4
 8000f46:	6223      	str	r3, [r4, #32]
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f48:	f7ff f92c 	bl	80001a4 <HAL_GetTick>
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f4c:	f241 3988 	movw	r9, #5000	; 0x1388
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f50:	4680      	mov	r8, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f52:	e048      	b.n	8000fe6 <HAL_RCC_OscConfig+0x38e>
 8000f54:	40021000 	.word	0x40021000
 8000f58:	42420480 	.word	0x42420480
 8000f5c:	40007000 	.word	0x40007000
          return HAL_TIMEOUT;
        }
      }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f60:	2b05      	cmp	r3, #5
 8000f62:	6a23      	ldr	r3, [r4, #32]
 8000f64:	d106      	bne.n	8000f74 <HAL_RCC_OscConfig+0x31c>
 8000f66:	f043 0304 	orr.w	r3, r3, #4
 8000f6a:	6223      	str	r3, [r4, #32]
 8000f6c:	6a23      	ldr	r3, [r4, #32]
 8000f6e:	f043 0301 	orr.w	r3, r3, #1
 8000f72:	e005      	b.n	8000f80 <HAL_RCC_OscConfig+0x328>
 8000f74:	f023 0301 	bic.w	r3, r3, #1
 8000f78:	6223      	str	r3, [r4, #32]
 8000f7a:	6a23      	ldr	r3, [r4, #32]
 8000f7c:	f023 0304 	bic.w	r3, r3, #4
 8000f80:	6223      	str	r3, [r4, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f82:	f7ff f90f 	bl	80001a4 <HAL_GetTick>
 8000f86:	2602      	movs	r6, #2
 8000f88:	4681      	mov	r9, r0
 8000f8a:	46b0      	mov	r8, r6
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f8c:	f241 3788 	movw	r7, #5000	; 0x1388
 8000f90:	fa96 f3a6 	rbit	r3, r6
 8000f94:	fa96 f3a6 	rbit	r3, r6
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f98:	b10b      	cbz	r3, 8000f9e <HAL_RCC_OscConfig+0x346>
 8000f9a:	6a22      	ldr	r2, [r4, #32]
 8000f9c:	e000      	b.n	8000fa0 <HAL_RCC_OscConfig+0x348>
 8000f9e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000fa0:	fa98 f3a8 	rbit	r3, r8
 8000fa4:	fab3 f383 	clz	r3, r3
 8000fa8:	f003 031f 	and.w	r3, r3, #31
 8000fac:	fa22 f303 	lsr.w	r3, r2, r3
 8000fb0:	07db      	lsls	r3, r3, #31
 8000fb2:	d49b      	bmi.n	8000eec <HAL_RCC_OscConfig+0x294>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fb4:	f7ff f8f6 	bl	80001a4 <HAL_GetTick>
 8000fb8:	ebc9 0000 	rsb	r0, r9, r0
 8000fbc:	42b8      	cmp	r0, r7
 8000fbe:	d9e7      	bls.n	8000f90 <HAL_RCC_OscConfig+0x338>
 8000fc0:	e6b2      	b.n	8000d28 <HAL_RCC_OscConfig+0xd0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fc2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000fc4:	fa97 f3a7 	rbit	r3, r7
 8000fc8:	fab3 f383 	clz	r3, r3
 8000fcc:	f003 031f 	and.w	r3, r3, #31
 8000fd0:	fa22 f303 	lsr.w	r3, r2, r3
 8000fd4:	07d8      	lsls	r0, r3, #31
 8000fd6:	d589      	bpl.n	8000eec <HAL_RCC_OscConfig+0x294>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fd8:	f7ff f8e4 	bl	80001a4 <HAL_GetTick>
 8000fdc:	ebc8 0000 	rsb	r0, r8, r0
 8000fe0:	4548      	cmp	r0, r9
 8000fe2:	f63f aea1 	bhi.w	8000d28 <HAL_RCC_OscConfig+0xd0>
 8000fe6:	fa96 f3a6 	rbit	r3, r6
 8000fea:	fa96 f3a6 	rbit	r3, r6
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d0e7      	beq.n	8000fc2 <HAL_RCC_OscConfig+0x36a>
 8000ff2:	6a22      	ldr	r2, [r4, #32]
 8000ff4:	e7e6      	b.n	8000fc4 <HAL_RCC_OscConfig+0x36c>
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000ff6:	4c47      	ldr	r4, [pc, #284]	; (8001114 <HAL_RCC_OscConfig+0x4bc>)
 8000ff8:	6863      	ldr	r3, [r4, #4]
 8000ffa:	f003 030c 	and.w	r3, r3, #12
 8000ffe:	2b08      	cmp	r3, #8
 8001000:	f43f ae54 	beq.w	8000cac <HAL_RCC_OscConfig+0x54>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001004:	2a02      	cmp	r2, #2
 8001006:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800100a:	d15c      	bne.n	80010c6 <HAL_RCC_OscConfig+0x46e>
 800100c:	fa93 f3a3 	rbit	r3, r3
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001010:	fab3 f383 	clz	r3, r3
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 800101a:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 800101e:	2200      	movs	r2, #0
 8001020:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001022:	f7ff f8bf 	bl	80001a4 <HAL_GetTick>
 8001026:	4680      	mov	r8, r0
 8001028:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 800102c:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001030:	4f38      	ldr	r7, [pc, #224]	; (8001114 <HAL_RCC_OscConfig+0x4bc>)
 8001032:	6822      	ldr	r2, [r4, #0]
 8001034:	fa96 f3a6 	rbit	r3, r6
 8001038:	fab3 f383 	clz	r3, r3
 800103c:	f003 031f 	and.w	r3, r3, #31
 8001040:	fa22 f303 	lsr.w	r3, r2, r3
 8001044:	07d9      	lsls	r1, r3, #31
 8001046:	d431      	bmi.n	80010ac <HAL_RCC_OscConfig+0x454>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001048:	6a2e      	ldr	r6, [r5, #32]
 800104a:	f5b6 3f80 	cmp.w	r6, #65536	; 0x10000
 800104e:	d105      	bne.n	800105c <HAL_RCC_OscConfig+0x404>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001050:	6879      	ldr	r1, [r7, #4]
 8001052:	f421 3000 	bic.w	r0, r1, #131072	; 0x20000
 8001056:	68a9      	ldr	r1, [r5, #8]
 8001058:	4301      	orrs	r1, r0
 800105a:	6079      	str	r1, [r7, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800105c:	6863      	ldr	r3, [r4, #4]
 800105e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8001060:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8001064:	4332      	orrs	r2, r6
 8001066:	4313      	orrs	r3, r2
 8001068:	6063      	str	r3, [r4, #4]
 800106a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800106e:	fa93 f3a3 	rbit	r3, r3
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001072:	fab3 f383 	clz	r3, r3
 8001076:	009b      	lsls	r3, r3, #2
 8001078:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 800107c:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8001080:	2201      	movs	r2, #1
 8001082:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001084:	f7ff f88e 	bl	80001a4 <HAL_GetTick>
 8001088:	4606      	mov	r6, r0
 800108a:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 800108e:	fa95 f3a5 	rbit	r3, r5
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001092:	6822      	ldr	r2, [r4, #0]
 8001094:	fa95 f3a5 	rbit	r3, r5
 8001098:	fab3 f383 	clz	r3, r3
 800109c:	f003 031f 	and.w	r3, r3, #31
 80010a0:	fa22 f303 	lsr.w	r3, r2, r3
 80010a4:	07da      	lsls	r2, r3, #31
 80010a6:	d508      	bpl.n	80010ba <HAL_RCC_OscConfig+0x462>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 80010a8:	2000      	movs	r0, #0
 80010aa:	e02f      	b.n	800110c <HAL_RCC_OscConfig+0x4b4>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010ac:	f7ff f87a 	bl	80001a4 <HAL_GetTick>
 80010b0:	ebc8 0000 	rsb	r0, r8, r0
 80010b4:	2802      	cmp	r0, #2
 80010b6:	d9b9      	bls.n	800102c <HAL_RCC_OscConfig+0x3d4>
 80010b8:	e636      	b.n	8000d28 <HAL_RCC_OscConfig+0xd0>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010ba:	f7ff f873 	bl	80001a4 <HAL_GetTick>
 80010be:	1b80      	subs	r0, r0, r6
 80010c0:	2802      	cmp	r0, #2
 80010c2:	d9e4      	bls.n	800108e <HAL_RCC_OscConfig+0x436>
 80010c4:	e630      	b.n	8000d28 <HAL_RCC_OscConfig+0xd0>
 80010c6:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010ca:	fab3 f383 	clz	r3, r3
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 80010d4:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010dc:	f7ff f862 	bl	80001a4 <HAL_GetTick>
 80010e0:	4606      	mov	r6, r0
 80010e2:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 80010e6:	fa95 f3a5 	rbit	r3, r5
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010ea:	6822      	ldr	r2, [r4, #0]
 80010ec:	fa95 f3a5 	rbit	r3, r5
 80010f0:	fab3 f383 	clz	r3, r3
 80010f4:	f003 031f 	and.w	r3, r3, #31
 80010f8:	fa22 f303 	lsr.w	r3, r2, r3
 80010fc:	07db      	lsls	r3, r3, #31
 80010fe:	d5d3      	bpl.n	80010a8 <HAL_RCC_OscConfig+0x450>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001100:	f7ff f850 	bl	80001a4 <HAL_GetTick>
 8001104:	1b80      	subs	r0, r0, r6
 8001106:	2802      	cmp	r0, #2
 8001108:	d9ed      	bls.n	80010e6 <HAL_RCC_OscConfig+0x48e>
 800110a:	e60d      	b.n	8000d28 <HAL_RCC_OscConfig+0xd0>
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 800110c:	b003      	add	sp, #12
 800110e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001112:	bf00      	nop
 8001114:	40021000 	.word	0x40021000

08001118 <HAL_RCC_GetSysClockFreq>:
{
#if   defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[12] = {0, 0, 4,  5,  6,  7,  8,  9, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001118:	4b1f      	ldr	r3, [pc, #124]	; (8001198 <HAL_RCC_GetSysClockFreq+0x80>)
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800111a:	b570      	push	{r4, r5, r6, lr}
#if   defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[12] = {0, 0, 4,  5,  6,  7,  8,  9, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
 800111c:	f103 0510 	add.w	r5, r3, #16
 8001120:	462e      	mov	r6, r5
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001122:	b086      	sub	sp, #24
#if   defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[12] = {0, 0, 4,  5,  6,  7,  8,  9, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001124:	ac02      	add	r4, sp, #8
 8001126:	4622      	mov	r2, r4
 8001128:	6818      	ldr	r0, [r3, #0]
 800112a:	6859      	ldr	r1, [r3, #4]
 800112c:	3308      	adds	r3, #8
 800112e:	c203      	stmia	r2!, {r0, r1}
 8001130:	42ab      	cmp	r3, r5
 8001132:	4614      	mov	r4, r2
 8001134:	d1f7      	bne.n	8001126 <HAL_RCC_GetSysClockFreq+0xe>
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = { 1, 2};
 8001136:	8833      	ldrh	r3, [r6, #0]
  uint32_t sysclockfreq = 0;
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0, pll2mul = 0;
#endif /*RCC_CFGR2_PREDIV1SRC*/
  
  tmpreg = RCC->CFGR;
 8001138:	4c18      	ldr	r4, [pc, #96]	; (800119c <HAL_RCC_GetSysClockFreq+0x84>)
#else
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = { 1, 2};
 800113a:	f8ad 3004 	strh.w	r3, [sp, #4]
  uint32_t sysclockfreq = 0;
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0, pll2mul = 0;
#endif /*RCC_CFGR2_PREDIV1SRC*/
  
  tmpreg = RCC->CFGR;
 800113e:	6860      	ldr	r0, [r4, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001140:	f000 030c 	and.w	r3, r0, #12
 8001144:	2b08      	cmp	r3, #8
 8001146:	d124      	bne.n	8001192 <HAL_RCC_GetSysClockFreq+0x7a>
 8001148:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 800114c:	fa93 f3a3 	rbit	r3, r3
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> POSITION_VAL(RCC_CFGR_PLLMULL)];
 8001150:	fab3 f383 	clz	r3, r3
 8001154:	f400 1270 	and.w	r2, r0, #3932160	; 0x3c0000
 8001158:	fa22 f303 	lsr.w	r3, r2, r3
 800115c:	aa06      	add	r2, sp, #24
 800115e:	4413      	add	r3, r2
 8001160:	f813 1c10 	ldrb.w	r1, [r3, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001164:	03c3      	lsls	r3, r0, #15
 8001166:	d511      	bpl.n	800118c <HAL_RCC_GetSysClockFreq+0x74>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> POSITION_VAL(RCC_CFGR2_PREDIV1)];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> POSITION_VAL(RCC_CFGR_PLLXTPRE)];
 8001168:	6862      	ldr	r2, [r4, #4]
 800116a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800116e:	fa93 f3a3 	rbit	r3, r3
 8001172:	fab3 f083 	clz	r0, r3
 8001176:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800117a:	40c3      	lsrs	r3, r0
 800117c:	aa06      	add	r2, sp, #24
 800117e:	4413      	add	r3, r2
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE / prediv) * pllmul);
 8001180:	f813 0c14 	ldrb.w	r0, [r3, #-20]
 8001184:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <HAL_RCC_GetSysClockFreq+0x88>)
 8001186:	fbb3 f0f0 	udiv	r0, r3, r0
 800118a:	e000      	b.n	800118e <HAL_RCC_GetSysClockFreq+0x76>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800118c:	4805      	ldr	r0, [pc, #20]	; (80011a4 <HAL_RCC_GetSysClockFreq+0x8c>)
 800118e:	4348      	muls	r0, r1
 8001190:	e000      	b.n	8001194 <HAL_RCC_GetSysClockFreq+0x7c>
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001192:	4803      	ldr	r0, [pc, #12]	; (80011a0 <HAL_RCC_GetSysClockFreq+0x88>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001194:	b006      	add	sp, #24
 8001196:	bd70      	pop	{r4, r5, r6, pc}
 8001198:	08002e04 	.word	0x08002e04
 800119c:	40021000 	.word	0x40021000
 80011a0:	007a1200 	.word	0x007a1200
 80011a4:	003d0900 	.word	0x003d0900

080011a8 <HAL_RCC_ClockConfig>:
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80011a8:	4a54      	ldr	r2, [pc, #336]	; (80012fc <HAL_RCC_ClockConfig+0x154>)
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80011ae:	6813      	ldr	r3, [r2, #0]
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011b0:	4606      	mov	r6, r0
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80011b2:	f003 0307 	and.w	r3, r3, #7
 80011b6:	428b      	cmp	r3, r1
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011b8:	460d      	mov	r5, r1
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80011ba:	d30a      	bcc.n	80011d2 <HAL_RCC_ClockConfig+0x2a>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011bc:	6831      	ldr	r1, [r6, #0]
 80011be:	078c      	lsls	r4, r1, #30
 80011c0:	d514      	bpl.n	80011ec <HAL_RCC_ClockConfig+0x44>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011c2:	484f      	ldr	r0, [pc, #316]	; (8001300 <HAL_RCC_ClockConfig+0x158>)
 80011c4:	6843      	ldr	r3, [r0, #4]
 80011c6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011ca:	68b3      	ldr	r3, [r6, #8]
 80011cc:	4313      	orrs	r3, r2
 80011ce:	6043      	str	r3, [r0, #4]
 80011d0:	e00c      	b.n	80011ec <HAL_RCC_ClockConfig+0x44>
#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011d2:	6813      	ldr	r3, [r2, #0]
 80011d4:	f023 0307 	bic.w	r3, r3, #7
 80011d8:	430b      	orrs	r3, r1
 80011da:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80011dc:	6813      	ldr	r3, [r2, #0]
 80011de:	f003 0307 	and.w	r3, r3, #7
 80011e2:	4299      	cmp	r1, r3
 80011e4:	d0ea      	beq.n	80011bc <HAL_RCC_ClockConfig+0x14>
    {
      return HAL_ERROR;
 80011e6:	2001      	movs	r0, #1
 80011e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011ec:	07c8      	lsls	r0, r1, #31
 80011ee:	d406      	bmi.n	80011fe <HAL_RCC_ClockConfig+0x56>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80011f0:	4a42      	ldr	r2, [pc, #264]	; (80012fc <HAL_RCC_ClockConfig+0x154>)
 80011f2:	6813      	ldr	r3, [r2, #0]
 80011f4:	f003 0307 	and.w	r3, r3, #7
 80011f8:	429d      	cmp	r5, r3
 80011fa:	d34a      	bcc.n	8001292 <HAL_RCC_ClockConfig+0xea>
 80011fc:	e053      	b.n	80012a6 <HAL_RCC_ClockConfig+0xfe>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011fe:	6872      	ldr	r2, [r6, #4]
 8001200:	4c3f      	ldr	r4, [pc, #252]	; (8001300 <HAL_RCC_ClockConfig+0x158>)
 8001202:	2a01      	cmp	r2, #1
 8001204:	d102      	bne.n	800120c <HAL_RCC_ClockConfig+0x64>
 8001206:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800120a:	e004      	b.n	8001216 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800120c:	2a02      	cmp	r2, #2
 800120e:	bf0c      	ite	eq
 8001210:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8001214:	2302      	movne	r3, #2
 8001216:	fa93 f1a3 	rbit	r1, r3
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800121a:	6821      	ldr	r1, [r4, #0]
 800121c:	fa93 f3a3 	rbit	r3, r3
 8001220:	fab3 f383 	clz	r3, r3
 8001224:	f003 031f 	and.w	r3, r3, #31
 8001228:	fa21 f303 	lsr.w	r3, r1, r3
 800122c:	07d9      	lsls	r1, r3, #31
 800122e:	d5da      	bpl.n	80011e6 <HAL_RCC_ClockConfig+0x3e>
      {
        return HAL_ERROR;
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001230:	6863      	ldr	r3, [r4, #4]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001232:	f241 3888 	movw	r8, #5000	; 0x1388
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
      {
        return HAL_ERROR;
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001236:	f023 0303 	bic.w	r3, r3, #3
 800123a:	431a      	orrs	r2, r3
 800123c:	6062      	str	r2, [r4, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800123e:	f7fe ffb1 	bl	80001a4 <HAL_GetTick>
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001242:	6873      	ldr	r3, [r6, #4]
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001244:	4607      	mov	r7, r0
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001246:	2b01      	cmp	r3, #1
 8001248:	d10c      	bne.n	8001264 <HAL_RCC_ClockConfig+0xbc>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800124a:	6863      	ldr	r3, [r4, #4]
 800124c:	f003 030c 	and.w	r3, r3, #12
 8001250:	2b04      	cmp	r3, #4
 8001252:	d0cd      	beq.n	80011f0 <HAL_RCC_ClockConfig+0x48>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001254:	f7fe ffa6 	bl	80001a4 <HAL_GetTick>
 8001258:	1bc0      	subs	r0, r0, r7
 800125a:	4540      	cmp	r0, r8
 800125c:	d9f5      	bls.n	800124a <HAL_RCC_ClockConfig+0xa2>
        {
          return HAL_TIMEOUT;
 800125e:	2003      	movs	r0, #3
 8001260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001264:	2b02      	cmp	r3, #2
 8001266:	d10f      	bne.n	8001288 <HAL_RCC_ClockConfig+0xe0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001268:	6863      	ldr	r3, [r4, #4]
 800126a:	f003 030c 	and.w	r3, r3, #12
 800126e:	2b08      	cmp	r3, #8
 8001270:	d0be      	beq.n	80011f0 <HAL_RCC_ClockConfig+0x48>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001272:	f7fe ff97 	bl	80001a4 <HAL_GetTick>
 8001276:	1bc0      	subs	r0, r0, r7
 8001278:	4540      	cmp	r0, r8
 800127a:	d9f5      	bls.n	8001268 <HAL_RCC_ClockConfig+0xc0>
 800127c:	e7ef      	b.n	800125e <HAL_RCC_ClockConfig+0xb6>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800127e:	f7fe ff91 	bl	80001a4 <HAL_GetTick>
 8001282:	1bc0      	subs	r0, r0, r7
 8001284:	4540      	cmp	r0, r8
 8001286:	d8ea      	bhi.n	800125e <HAL_RCC_ClockConfig+0xb6>
        }
      }
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001288:	6863      	ldr	r3, [r4, #4]
 800128a:	f013 0f0c 	tst.w	r3, #12
 800128e:	d1f6      	bne.n	800127e <HAL_RCC_ClockConfig+0xd6>
 8001290:	e7ae      	b.n	80011f0 <HAL_RCC_ClockConfig+0x48>
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001292:	6813      	ldr	r3, [r2, #0]
 8001294:	f023 0307 	bic.w	r3, r3, #7
 8001298:	432b      	orrs	r3, r5
 800129a:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800129c:	6813      	ldr	r3, [r2, #0]
 800129e:	f003 0307 	and.w	r3, r3, #7
 80012a2:	429d      	cmp	r5, r3
 80012a4:	d19f      	bne.n	80011e6 <HAL_RCC_ClockConfig+0x3e>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012a6:	6831      	ldr	r1, [r6, #0]
 80012a8:	4c15      	ldr	r4, [pc, #84]	; (8001300 <HAL_RCC_ClockConfig+0x158>)
 80012aa:	f011 0f04 	tst.w	r1, #4
 80012ae:	d005      	beq.n	80012bc <HAL_RCC_ClockConfig+0x114>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012b0:	6863      	ldr	r3, [r4, #4]
 80012b2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80012b6:	68f3      	ldr	r3, [r6, #12]
 80012b8:	4313      	orrs	r3, r2
 80012ba:	6063      	str	r3, [r4, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012bc:	070b      	lsls	r3, r1, #28
 80012be:	d506      	bpl.n	80012ce <HAL_RCC_ClockConfig+0x126>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80012c0:	6863      	ldr	r3, [r4, #4]
 80012c2:	6932      	ldr	r2, [r6, #16]
 80012c4:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80012c8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80012cc:	6063      	str	r3, [r4, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80012ce:	f7ff ff23 	bl	8001118 <HAL_RCC_GetSysClockFreq>
 80012d2:	6863      	ldr	r3, [r4, #4]
 80012d4:	22f0      	movs	r2, #240	; 0xf0
 80012d6:	fa92 f2a2 	rbit	r2, r2
 80012da:	fab2 f282 	clz	r2, r2
 80012de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80012e2:	40d3      	lsrs	r3, r2
 80012e4:	4a07      	ldr	r2, [pc, #28]	; (8001304 <HAL_RCC_ClockConfig+0x15c>)
 80012e6:	5cd3      	ldrb	r3, [r2, r3]
 80012e8:	40d8      	lsrs	r0, r3
 80012ea:	4b07      	ldr	r3, [pc, #28]	; (8001308 <HAL_RCC_ClockConfig+0x160>)
 80012ec:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80012ee:	2000      	movs	r0, #0
 80012f0:	f7fe ff2c 	bl	800014c <HAL_InitTick>
  
  return HAL_OK;
 80012f4:	2000      	movs	r0, #0
}
 80012f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80012fa:	bf00      	nop
 80012fc:	40022000 	.word	0x40022000
 8001300:	40021000 	.word	0x40021000
 8001304:	08002e16 	.word	0x08002e16
 8001308:	20000110 	.word	0x20000110

0800130c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 800130c:	4b01      	ldr	r3, [pc, #4]	; (8001314 <HAL_RCC_GetHCLKFreq+0x8>)
 800130e:	6818      	ldr	r0, [r3, #0]
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	20000110 	.word	0x20000110

08001318 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001318:	6803      	ldr	r3, [r0, #0]
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800131a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800131e:	07dc      	lsls	r4, r3, #31
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001320:	4605      	mov	r5, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001322:	d564      	bpl.n	80013ee <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001324:	4c3e      	ldr	r4, [pc, #248]	; (8001420 <HAL_RCCEx_PeriphCLKConfig+0x108>)
    
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR, PWR_CR_DBP);
 8001326:	4e3f      	ldr	r6, [pc, #252]	; (8001424 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001328:	69e3      	ldr	r3, [r4, #28]
 800132a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800132e:	61e3      	str	r3, [r4, #28]
 8001330:	69e3      	ldr	r3, [r4, #28]
 8001332:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001336:	9301      	str	r3, [sp, #4]
 8001338:	9b01      	ldr	r3, [sp, #4]
    
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR, PWR_CR_DBP);
 800133a:	6833      	ldr	r3, [r6, #0]
 800133c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001340:	6033      	str	r3, [r6, #0]
    
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001342:	f7fe ff2f 	bl	80001a4 <HAL_GetTick>
 8001346:	4607      	mov	r7, r0
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001348:	6833      	ldr	r3, [r6, #0]
 800134a:	05d8      	lsls	r0, r3, #23
 800134c:	d406      	bmi.n	800135c <HAL_RCCEx_PeriphCLKConfig+0x44>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800134e:	f7fe ff29 	bl	80001a4 <HAL_GetTick>
 8001352:	1bc0      	subs	r0, r0, r7
 8001354:	2864      	cmp	r0, #100	; 0x64
 8001356:	d9f7      	bls.n	8001348 <HAL_RCCEx_PeriphCLKConfig+0x30>
      {
        return HAL_TIMEOUT;
 8001358:	2003      	movs	r0, #3
 800135a:	e05d      	b.n	8001418 <HAL_RCCEx_PeriphCLKConfig+0x100>
      }      
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800135c:	6a23      	ldr	r3, [r4, #32]
 800135e:	4830      	ldr	r0, [pc, #192]	; (8001420 <HAL_RCCEx_PeriphCLKConfig+0x108>)
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001360:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001364:	d106      	bne.n	8001374 <HAL_RCCEx_PeriphCLKConfig+0x5c>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8001366:	6a23      	ldr	r3, [r4, #32]
 8001368:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800136c:	686b      	ldr	r3, [r5, #4]
 800136e:	4313      	orrs	r3, r2
 8001370:	6223      	str	r3, [r4, #32]
 8001372:	e03c      	b.n	80013ee <HAL_RCCEx_PeriphCLKConfig+0xd6>
      }      
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001374:	686a      	ldr	r2, [r5, #4]
 8001376:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800137a:	4293      	cmp	r3, r2
 800137c:	d0f3      	beq.n	8001366 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800137e:	6a01      	ldr	r1, [r0, #32]
 8001380:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001384:	f421 7740 	bic.w	r7, r1, #768	; 0x300
 8001388:	fa93 f2a3 	rbit	r2, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800138c:	fab2 f282 	clz	r2, r2
 8001390:	4e25      	ldr	r6, [pc, #148]	; (8001428 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8001392:	f04f 0e01 	mov.w	lr, #1
 8001396:	f846 e022 	str.w	lr, [r6, r2, lsl #2]
 800139a:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 800139e:	fab3 f383 	clz	r3, r3
 80013a2:	2200      	movs	r2, #0
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80013a4:	07c9      	lsls	r1, r1, #31
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
      __HAL_RCC_BACKUPRESET_RELEASE();
 80013a6:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80013aa:	6207      	str	r7, [r0, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80013ac:	d5db      	bpl.n	8001366 <HAL_RCCEx_PeriphCLKConfig+0x4e>
      {
        /* Get timeout */
        tickstart = HAL_GetTick();
 80013ae:	f7fe fef9 	bl	80001a4 <HAL_GetTick>
 80013b2:	2602      	movs	r6, #2
 80013b4:	4680      	mov	r8, r0
 80013b6:	4637      	mov	r7, r6
      
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013b8:	f241 3988 	movw	r9, #5000	; 0x1388
 80013bc:	fa96 f3a6 	rbit	r3, r6
 80013c0:	fa96 f3a6 	rbit	r3, r6
      {
        /* Get timeout */
        tickstart = HAL_GetTick();
      
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013c4:	b10b      	cbz	r3, 80013ca <HAL_RCCEx_PeriphCLKConfig+0xb2>
 80013c6:	6a22      	ldr	r2, [r4, #32]
 80013c8:	e000      	b.n	80013cc <HAL_RCCEx_PeriphCLKConfig+0xb4>
 80013ca:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80013cc:	fa97 f3a7 	rbit	r3, r7
 80013d0:	fab3 f383 	clz	r3, r3
 80013d4:	f003 031f 	and.w	r3, r3, #31
 80013d8:	fa22 f303 	lsr.w	r3, r2, r3
 80013dc:	07da      	lsls	r2, r3, #31
 80013de:	d4c2      	bmi.n	8001366 <HAL_RCCEx_PeriphCLKConfig+0x4e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013e0:	f7fe fee0 	bl	80001a4 <HAL_GetTick>
 80013e4:	ebc8 0000 	rsb	r0, r8, r0
 80013e8:	4548      	cmp	r0, r9
 80013ea:	d9e7      	bls.n	80013bc <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80013ec:	e7b4      	b.n	8001358 <HAL_RCCEx_PeriphCLKConfig+0x40>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80013ee:	6828      	ldr	r0, [r5, #0]
 80013f0:	0783      	lsls	r3, r0, #30
 80013f2:	d506      	bpl.n	8001402 <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80013f4:	490a      	ldr	r1, [pc, #40]	; (8001420 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 80013f6:	684b      	ldr	r3, [r1, #4]
 80013f8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80013fc:	68ab      	ldr	r3, [r5, #8]
 80013fe:	4313      	orrs	r3, r2
 8001400:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001402:	f010 0010 	ands.w	r0, r0, #16
 8001406:	d007      	beq.n	8001418 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001408:	4905      	ldr	r1, [pc, #20]	; (8001420 <HAL_RCCEx_PeriphCLKConfig+0x108>)
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800140a:	2000      	movs	r0, #0
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800140c:	684b      	ldr	r3, [r1, #4]
 800140e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001412:	68eb      	ldr	r3, [r5, #12]
 8001414:	4313      	orrs	r3, r2
 8001416:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
}
 8001418:	b003      	add	sp, #12
 800141a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800141e:	bf00      	nop
 8001420:	40021000 	.word	0x40021000
 8001424:	40007000 	.word	0x40007000
 8001428:	42420400 	.word	0x42420400

0800142c <SPI_WaitOnFlagUntilTimeout>:
  * @param  Status: Flag status to check: RESET or set
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status, uint32_t Timeout)  
{
 800142c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001430:	4604      	mov	r4, r0
 8001432:	460e      	mov	r6, r1
 8001434:	4690      	mov	r8, r2
 8001436:	461d      	mov	r5, r3
  uint32_t tickstart = 0;

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001438:	f7fe feb4 	bl	80001a4 <HAL_GetTick>
 800143c:	4607      	mov	r7, r0

  /* Wait until flag is set */
  if(Status == RESET)
 800143e:	f1b8 0f00 	cmp.w	r8, #0
 8001442:	d13a      	bne.n	80014ba <SPI_WaitOnFlagUntilTimeout+0x8e>
  {
    while(__HAL_SPI_GET_FLAG(hspi, Flag) == RESET)
 8001444:	6822      	ldr	r2, [r4, #0]
 8001446:	6893      	ldr	r3, [r2, #8]
 8001448:	ea36 0303 	bics.w	r3, r6, r3
 800144c:	d00e      	beq.n	800146c <SPI_WaitOnFlagUntilTimeout+0x40>
    {
      if(Timeout != HAL_MAX_DELAY)
 800144e:	1c69      	adds	r1, r5, #1
 8001450:	d0f9      	beq.n	8001446 <SPI_WaitOnFlagUntilTimeout+0x1a>
      {
        if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001452:	b17d      	cbz	r5, 8001474 <SPI_WaitOnFlagUntilTimeout+0x48>
 8001454:	f7fe fea6 	bl	80001a4 <HAL_GetTick>
 8001458:	1bc0      	subs	r0, r0, r7
 800145a:	4285      	cmp	r5, r0
 800145c:	d2f2      	bcs.n	8001444 <SPI_WaitOnFlagUntilTimeout+0x18>
 800145e:	e009      	b.n	8001474 <SPI_WaitOnFlagUntilTimeout+0x48>
  }
  else
  {
    while(__HAL_SPI_GET_FLAG(hspi, Flag) != RESET)
    {
      if(Timeout != HAL_MAX_DELAY)
 8001460:	1c6b      	adds	r3, r5, #1
 8001462:	d106      	bne.n	8001472 <SPI_WaitOnFlagUntilTimeout+0x46>
      }
    }
  }
  else
  {
    while(__HAL_SPI_GET_FLAG(hspi, Flag) != RESET)
 8001464:	6893      	ldr	r3, [r2, #8]
 8001466:	ea36 0303 	bics.w	r3, r6, r3
 800146a:	d0f9      	beq.n	8001460 <SPI_WaitOnFlagUntilTimeout+0x34>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 800146c:	2000      	movs	r0, #0
 800146e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  {
    while(__HAL_SPI_GET_FLAG(hspi, Flag) != RESET)
    {
      if(Timeout != HAL_MAX_DELAY)
      {
        if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001472:	b9ed      	cbnz	r5, 80014b0 <SPI_WaitOnFlagUntilTimeout+0x84>
          /* Disable the SPI and reset the CRC: the CRC value should be cleared
             on both master and slave sides in order to resynchronize the master
             and slave for their respective CRC calculation */

          /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
          __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001474:	6823      	ldr	r3, [r4, #0]
 8001476:	685a      	ldr	r2, [r3, #4]
 8001478:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800147c:	605a      	str	r2, [r3, #4]

          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001484:	601a      	str	r2, [r3, #0]

          /* Reset CRC Calculation */
          if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001486:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001488:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800148c:	d107      	bne.n	800149e <SPI_WaitOnFlagUntilTimeout+0x72>
          {
            SPI_RESET_CRC(hspi);
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001494:	601a      	str	r2, [r3, #0]
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800149c:	601a      	str	r2, [r3, #0]
          }

          hspi->State= HAL_SPI_STATE_READY;
 800149e:	2301      	movs	r3, #1
 80014a0:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 80014a4:	2300      	movs	r3, #0
 80014a6:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50

          return HAL_TIMEOUT;
 80014aa:	2003      	movs	r0, #3
 80014ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  {
    while(__HAL_SPI_GET_FLAG(hspi, Flag) != RESET)
    {
      if(Timeout != HAL_MAX_DELAY)
      {
        if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 80014b0:	f7fe fe78 	bl	80001a4 <HAL_GetTick>
 80014b4:	1bc0      	subs	r0, r0, r7
 80014b6:	4285      	cmp	r5, r0
 80014b8:	d3dc      	bcc.n	8001474 <SPI_WaitOnFlagUntilTimeout+0x48>
      }
    }
  }
  else
  {
    while(__HAL_SPI_GET_FLAG(hspi, Flag) != RESET)
 80014ba:	6822      	ldr	r2, [r4, #0]
 80014bc:	e7d2      	b.n	8001464 <SPI_WaitOnFlagUntilTimeout+0x38>

080014be <HAL_SPI_Transmit>:
  * @param  Size: amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80014be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80014c0:	4604      	mov	r4, r0

  if(hspi->State == HAL_SPI_STATE_READY)
 80014c2:	f890 0051 	ldrb.w	r0, [r0, #81]	; 0x51
  * @param  Size: amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80014c6:	461d      	mov	r5, r3

  if(hspi->State == HAL_SPI_STATE_READY)
 80014c8:	b2c0      	uxtb	r0, r0
 80014ca:	2801      	cmp	r0, #1
 80014cc:	f040 80a3 	bne.w	8001616 <HAL_SPI_Transmit+0x158>
  {
    if((pData == NULL ) || (Size == 0)) 
 80014d0:	2900      	cmp	r1, #0
 80014d2:	f000 80a1 	beq.w	8001618 <HAL_SPI_Transmit+0x15a>
 80014d6:	2a00      	cmp	r2, #0
 80014d8:	f000 809e 	beq.w	8001618 <HAL_SPI_Transmit+0x15a>

    /* Check the parameters */
    assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

    /* Process Locked */
    __HAL_LOCK(hspi);
 80014dc:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	f000 8098 	beq.w	8001616 <HAL_SPI_Transmit+0x158>

    /* Configure communication */
    hspi->State = HAL_SPI_STATE_BUSY_TX;
 80014e6:	2312      	movs	r3, #18
 80014e8:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
    hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80014ec:	2300      	movs	r3, #0
 80014ee:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->pTxBuffPtr  = pData;
    hspi->TxXferSize  = Size;
    hspi->TxXferCount = Size;

    /*Init field not used in handle to zero */
    hspi->TxISR = 0;
 80014f0:	64e3      	str	r3, [r4, #76]	; 0x4c
    hspi->RxISR = 0;
 80014f2:	64a3      	str	r3, [r4, #72]	; 0x48
    hspi->pRxBuffPtr  = NULL;
 80014f4:	63a3      	str	r3, [r4, #56]	; 0x38
    hspi->RxXferSize  = 0;
 80014f6:	87a3      	strh	r3, [r4, #60]	; 0x3c
    hspi->RxXferCount = 0;
 80014f8:	87e3      	strh	r3, [r4, #62]	; 0x3e

    /* Reset CRC Calculation */
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80014fa:	6aa3      	ldr	r3, [r4, #40]	; 0x28

    /* Check the parameters */
    assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

    /* Process Locked */
    __HAL_LOCK(hspi);
 80014fc:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
    hspi->pRxBuffPtr  = NULL;
    hspi->RxXferSize  = 0;
    hspi->RxXferCount = 0;

    /* Reset CRC Calculation */
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001500:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000

    /* Configure communication */
    hspi->State = HAL_SPI_STATE_BUSY_TX;
    hspi->ErrorCode   = HAL_SPI_ERROR_NONE;

    hspi->pTxBuffPtr  = pData;
 8001504:	6321      	str	r1, [r4, #48]	; 0x30
    hspi->TxXferSize  = Size;
 8001506:	86a2      	strh	r2, [r4, #52]	; 0x34
    hspi->TxXferCount = Size;
 8001508:	86e2      	strh	r2, [r4, #54]	; 0x36
 800150a:	6823      	ldr	r3, [r4, #0]
    hspi->pRxBuffPtr  = NULL;
    hspi->RxXferSize  = 0;
    hspi->RxXferCount = 0;

    /* Reset CRC Calculation */
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800150c:	d107      	bne.n	800151e <HAL_SPI_Transmit+0x60>
    {
      SPI_RESET_CRC(hspi);
 800150e:	6818      	ldr	r0, [r3, #0]
 8001510:	f420 5000 	bic.w	r0, r0, #8192	; 0x2000
 8001514:	6018      	str	r0, [r3, #0]
 8001516:	6818      	ldr	r0, [r3, #0]
 8001518:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
 800151c:	6018      	str	r0, [r3, #0]
    }

    if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800151e:	68a0      	ldr	r0, [r4, #8]
      /* Enable SPI peripheral */
      __HAL_SPI_ENABLE(hspi);
    }

    /* Transmit data in 8 Bit mode */
    if(hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8001520:	68e6      	ldr	r6, [r4, #12]
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
    {
      SPI_RESET_CRC(hspi);
    }

    if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001522:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    {
      /* Configure communication direction : 1Line */
      SPI_1LINE_TX(hspi);
 8001526:	bf02      	ittt	eq
 8001528:	6818      	ldreq	r0, [r3, #0]
 800152a:	f440 4080 	orreq.w	r0, r0, #16384	; 0x4000
 800152e:	6018      	streq	r0, [r3, #0]
    }

    /* Check if the SPI is already enabled */ 
    if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8001530:	6818      	ldr	r0, [r3, #0]
 8001532:	0640      	lsls	r0, r0, #25
    {
      /* Enable SPI peripheral */
      __HAL_SPI_ENABLE(hspi);
 8001534:	bf5e      	ittt	pl
 8001536:	6818      	ldrpl	r0, [r3, #0]
 8001538:	f040 0040 	orrpl.w	r0, r0, #64	; 0x40
 800153c:	6018      	strpl	r0, [r3, #0]
 800153e:	6860      	ldr	r0, [r4, #4]
    }

    /* Transmit data in 8 Bit mode */
    if(hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8001540:	b9f6      	cbnz	r6, 8001580 <HAL_SPI_Transmit+0xc2>
    {
      if((hspi->Init.Mode == SPI_MODE_SLAVE)|| (hspi->TxXferCount == 0x01))
 8001542:	b108      	cbz	r0, 8001548 <HAL_SPI_Transmit+0x8a>
 8001544:	2a01      	cmp	r2, #1
 8001546:	d117      	bne.n	8001578 <HAL_SPI_Transmit+0xba>
      {
        hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 8001548:	1c48      	adds	r0, r1, #1
 800154a:	6320      	str	r0, [r4, #48]	; 0x30
 800154c:	7809      	ldrb	r1, [r1, #0]
        hspi->TxXferCount--;
 800154e:	3a01      	subs	r2, #1
    /* Transmit data in 8 Bit mode */
    if(hspi->Init.DataSize == SPI_DATASIZE_8BIT)
    {
      if((hspi->Init.Mode == SPI_MODE_SLAVE)|| (hspi->TxXferCount == 0x01))
      {
        hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 8001550:	60d9      	str	r1, [r3, #12]
        hspi->TxXferCount--;
 8001552:	86e2      	strh	r2, [r4, #54]	; 0x36
 8001554:	e010      	b.n	8001578 <HAL_SPI_Transmit+0xba>
      }

      while(hspi->TxXferCount > 0)
      {
        /* Wait until TXE flag is set to send data */
        if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8001556:	462b      	mov	r3, r5
 8001558:	2200      	movs	r2, #0
 800155a:	2102      	movs	r1, #2
 800155c:	4620      	mov	r0, r4
 800155e:	f7ff ff65 	bl	800142c <SPI_WaitOnFlagUntilTimeout>
 8001562:	2800      	cmp	r0, #0
 8001564:	d13e      	bne.n	80015e4 <HAL_SPI_Transmit+0x126>
        { 
          return HAL_TIMEOUT;
        }
        hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 8001566:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001568:	6822      	ldr	r2, [r4, #0]
 800156a:	1c59      	adds	r1, r3, #1
 800156c:	6321      	str	r1, [r4, #48]	; 0x30
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount--;
 8001572:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001574:	3b01      	subs	r3, #1
 8001576:	86e3      	strh	r3, [r4, #54]	; 0x36
      {
        hspi->Instance->DR = (*hspi->pTxBuffPtr++);
        hspi->TxXferCount--;
      }

      while(hspi->TxXferCount > 0)
 8001578:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800157a:	2b00      	cmp	r3, #0
 800157c:	d1eb      	bne.n	8001556 <HAL_SPI_Transmit+0x98>
 800157e:	e01c      	b.n	80015ba <HAL_SPI_Transmit+0xfc>
      }
    }
    /* Transmit data in 16 Bit mode */
    else
    {
      if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 8001580:	b108      	cbz	r0, 8001586 <HAL_SPI_Transmit+0xc8>
 8001582:	2a01      	cmp	r2, #1
 8001584:	d116      	bne.n	80015b4 <HAL_SPI_Transmit+0xf6>
      {
        hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 8001586:	f831 0b02 	ldrh.w	r0, [r1], #2
        hspi->pTxBuffPtr+=2;
        hspi->TxXferCount--;
 800158a:	3a01      	subs	r2, #1
    /* Transmit data in 16 Bit mode */
    else
    {
      if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
      {
        hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 800158c:	60d8      	str	r0, [r3, #12]
        hspi->pTxBuffPtr+=2;
 800158e:	6321      	str	r1, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8001590:	86e2      	strh	r2, [r4, #54]	; 0x36
 8001592:	e00f      	b.n	80015b4 <HAL_SPI_Transmit+0xf6>
      }

      while(hspi->TxXferCount > 0)
      {
        /* Wait until TXE flag is set to send data */
        if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8001594:	462b      	mov	r3, r5
 8001596:	2200      	movs	r2, #0
 8001598:	2102      	movs	r1, #2
 800159a:	4620      	mov	r0, r4
 800159c:	f7ff ff46 	bl	800142c <SPI_WaitOnFlagUntilTimeout>
 80015a0:	bb00      	cbnz	r0, 80015e4 <HAL_SPI_Transmit+0x126>
        { 
          return HAL_TIMEOUT;
        }
        hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 80015a2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80015a4:	6822      	ldr	r2, [r4, #0]
 80015a6:	f833 1b02 	ldrh.w	r1, [r3], #2
 80015aa:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr+=2;
 80015ac:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80015ae:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80015b0:	3b01      	subs	r3, #1
 80015b2:	86e3      	strh	r3, [r4, #54]	; 0x36
        hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
        hspi->pTxBuffPtr+=2;
        hspi->TxXferCount--;
      }

      while(hspi->TxXferCount > 0)
 80015b4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d1ec      	bne.n	8001594 <HAL_SPI_Transmit+0xd6>
        hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
        hspi->pTxBuffPtr+=2;
        hspi->TxXferCount--;
      }
      /* Enable CRC Transmission */
      if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) 
 80015ba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
    }

    /* Wait until TXE flag is set to send data */
    if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
 80015bc:	2102      	movs	r1, #2
        hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
        hspi->pTxBuffPtr+=2;
        hspi->TxXferCount--;
      }
      /* Enable CRC Transmission */
      if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) 
 80015be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80015c2:	bf08      	it	eq
 80015c4:	6822      	ldreq	r2, [r4, #0]
      }
    }

    /* Wait until TXE flag is set to send data */
    if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
 80015c6:	4620      	mov	r0, r4
        hspi->TxXferCount--;
      }
      /* Enable CRC Transmission */
      if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) 
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80015c8:	bf02      	ittt	eq
 80015ca:	6813      	ldreq	r3, [r2, #0]
 80015cc:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 80015d0:	6013      	streq	r3, [r2, #0]
      }
    }

    /* Wait until TXE flag is set to send data */
    if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
 80015d2:	462b      	mov	r3, r5
 80015d4:	2200      	movs	r2, #0
 80015d6:	f7ff ff29 	bl	800142c <SPI_WaitOnFlagUntilTimeout>
 80015da:	b128      	cbz	r0, 80015e8 <HAL_SPI_Transmit+0x12a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80015dc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80015de:	f043 0310 	orr.w	r3, r3, #16
 80015e2:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 80015e4:	2003      	movs	r0, #3
 80015e6:	e017      	b.n	8001618 <HAL_SPI_Transmit+0x15a>
    }

    /* Wait until Busy flag is reset before disabling SPI */
    if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_BSY, SET, Timeout) != HAL_OK)
 80015e8:	462b      	mov	r3, r5
 80015ea:	2201      	movs	r2, #1
 80015ec:	2180      	movs	r1, #128	; 0x80
 80015ee:	4620      	mov	r0, r4
 80015f0:	f7ff ff1c 	bl	800142c <SPI_WaitOnFlagUntilTimeout>
 80015f4:	2800      	cmp	r0, #0
 80015f6:	d1f1      	bne.n	80015dc <HAL_SPI_Transmit+0x11e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
      return HAL_TIMEOUT;
    }
 
    /* Clear OVERUN flag in 2 Lines communication mode because received is not read */
    if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80015f8:	68a3      	ldr	r3, [r4, #8]
 80015fa:	b92b      	cbnz	r3, 8001608 <HAL_SPI_Transmit+0x14a>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80015fc:	6823      	ldr	r3, [r4, #0]
 80015fe:	68da      	ldr	r2, [r3, #12]
 8001600:	9201      	str	r2, [sp, #4]
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	9301      	str	r3, [sp, #4]
 8001606:	9b01      	ldr	r3, [sp, #4]
    }

    hspi->State = HAL_SPI_STATE_READY; 
 8001608:	2301      	movs	r3, #1
 800160a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800160e:	2300      	movs	r3, #0
 8001610:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50

    return HAL_OK;
 8001614:	e000      	b.n	8001618 <HAL_SPI_Transmit+0x15a>
  }
  else
  {
    return HAL_BUSY;
 8001616:	2002      	movs	r0, #2
  }
}
 8001618:	b002      	add	sp, #8
 800161a:	bd70      	pop	{r4, r5, r6, pc}

0800161c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *                the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800161c:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 800161e:	4604      	mov	r4, r0
 8001620:	2800      	cmp	r0, #0
 8001622:	d034      	beq.n	800168e <HAL_SPI_Init+0x72>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  assert_param(IS_SPI_CRC_CALCULATION(hspi->Init.CRCCalculation));
  assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));

  if(hspi->State == HAL_SPI_STATE_RESET)
 8001624:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8001628:	b90b      	cbnz	r3, 800162e <HAL_SPI_Init+0x12>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800162a:	f001 f96b 	bl	8002904 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800162e:	68a1      	ldr	r1, [r4, #8]
 8001630:	6860      	ldr	r0, [r4, #4]
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
  }
  
  hspi->State = HAL_SPI_STATE_BUSY;
 8001632:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001634:	4308      	orrs	r0, r1
 8001636:	68e1      	ldr	r1, [r4, #12]
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
  }
  
  hspi->State = HAL_SPI_STATE_BUSY;
 8001638:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800163c:	4308      	orrs	r0, r1
 800163e:	6921      	ldr	r1, [r4, #16]
  }
  
  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disble the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001640:	6823      	ldr	r3, [r4, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001642:	4308      	orrs	r0, r1
 8001644:	6961      	ldr	r1, [r4, #20]
  }
  
  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disble the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001646:	681a      	ldr	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001648:	4308      	orrs	r0, r1
 800164a:	69e1      	ldr	r1, [r4, #28]
  }
  
  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disble the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800164c:	f022 0240 	bic.w	r2, r2, #64	; 0x40

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001650:	4308      	orrs	r0, r1
 8001652:	6a21      	ldr	r1, [r4, #32]
  }
  
  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disble the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001654:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001656:	4308      	orrs	r0, r1
 8001658:	69a2      	ldr	r2, [r4, #24]
 800165a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800165c:	4308      	orrs	r0, r1
 800165e:	f402 7100 	and.w	r1, r2, #512	; 0x200
 8001662:	4301      	orrs	r1, r0
 8001664:	6019      	str	r1, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001666:	0c12      	lsrs	r2, r2, #16
 8001668:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800166a:	f002 0204 	and.w	r2, r2, #4
 800166e:	430a      	orrs	r2, r1
 8001670:	605a      	str	r2, [r3, #4]

  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8001672:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
     Revision ID information is only available in Debug mode, so Workaround could not be implemented
     to distinguish Rev Z devices (issue present) from more recent version (issue fixed).
     So, in case of Revison Z F101 or F103 devices, below variable should be assigned to 1 */
  uCRCErrorWorkaroundCheck = 0;
#else
  uCRCErrorWorkaroundCheck = 0;
 8001674:	2000      	movs	r0, #0
  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode));

  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8001676:	611a      	str	r2, [r3, #16]

#if defined (STM32F101x6) || defined (STM32F101xB) || defined (STM32F101xE) || defined (STM32F101xG) || defined (STM32F102x6) || defined (STM32F102xB) || defined (STM32F103x6) || defined (STM32F103xB) || defined (STM32F103xE) || defined (STM32F103xG) || defined (STM32F105xC) || defined (STM32F107xC)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001678:	69da      	ldr	r2, [r3, #28]
 800167a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800167e:	61da      	str	r2, [r3, #28]
     Revision ID information is only available in Debug mode, so Workaround could not be implemented
     to distinguish Rev Z devices (issue present) from more recent version (issue fixed).
     So, in case of Revison Z F101 or F103 devices, below variable should be assigned to 1 */
  uCRCErrorWorkaroundCheck = 0;
#else
  uCRCErrorWorkaroundCheck = 0;
 8001680:	4b04      	ldr	r3, [pc, #16]	; (8001694 <HAL_SPI_Init+0x78>)
#endif

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001682:	6560      	str	r0, [r4, #84]	; 0x54
     Revision ID information is only available in Debug mode, so Workaround could not be implemented
     to distinguish Rev Z devices (issue present) from more recent version (issue fixed).
     So, in case of Revison Z F101 or F103 devices, below variable should be assigned to 1 */
  uCRCErrorWorkaroundCheck = 0;
#else
  uCRCErrorWorkaroundCheck = 0;
 8001684:	7018      	strb	r0, [r3, #0]
#endif

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
  hspi->State = HAL_SPI_STATE_READY;
 8001686:	2301      	movs	r3, #1
 8001688:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  
  return HAL_OK;
 800168c:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  /* Check the SPI handle allocation */
  if(hspi == NULL)
  {
    return HAL_ERROR;
 800168e:	2001      	movs	r0, #1

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
  hspi->State = HAL_SPI_STATE_READY;
  
  return HAL_OK;
}
 8001690:	bd10      	pop	{r4, pc}
 8001692:	bf00      	nop
 8001694:	20000178 	.word	0x20000178

08001698 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8001698:	b084      	sub	sp, #16
 800169a:	a801      	add	r0, sp, #4
 800169c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 80016a0:	b004      	add	sp, #16
 80016a2:	2000      	movs	r0, #0
 80016a4:	4770      	bx	lr

080016a6 <USB_EnableGlobalInt>:
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
    | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 80016a6:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80016aa:	b29b      	uxth	r3, r3
 80016ac:	f443 433d 	orr.w	r3, r3, #48384	; 0xbd00
 80016b0:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  
  return HAL_OK;
}
 80016b4:	2000      	movs	r0, #0
 80016b6:	4770      	bx	lr

080016b8 <USB_DisableGlobalInt>:
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
    | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 80016b8:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80016bc:	f423 5374 	bic.w	r3, r3, #15616	; 0x3d00
 80016c0:	045b      	lsls	r3, r3, #17
 80016c2:	0c5b      	lsrs	r3, r3, #17
 80016c4:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  
  return HAL_OK;
}
 80016c8:	2000      	movs	r0, #0
 80016ca:	4770      	bx	lr

080016cc <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 80016cc:	2000      	movs	r0, #0
 80016ce:	4770      	bx	lr

080016d0 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{    
 80016d0:	b084      	sub	sp, #16
 80016d2:	b510      	push	{r4, lr}
 80016d4:	ac03      	add	r4, sp, #12
 80016d6:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  
  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
    
  return HAL_OK;
}
 80016da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  */
HAL_StatusTypeDef USB_DevInit (USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{    
  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 80016de:	2301      	movs	r3, #1
 80016e0:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  
  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 80016e4:	2300      	movs	r3, #0
 80016e6:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  
  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
    
  return HAL_OK;
}
 80016ea:	b004      	add	sp, #16
  
  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 
  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 80016ec:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  
  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80016f0:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
    
  return HAL_OK;
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	4770      	bx	lr

080016f8 <USB_ActivateEndpoint>:
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  /* initialize Endpoint */
  switch (ep->type)
 80016f8:	78cb      	ldrb	r3, [r1, #3]
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80016fa:	b530      	push	{r4, r5, lr}
 80016fc:	780a      	ldrb	r2, [r1, #0]
  /* initialize Endpoint */
  switch (ep->type)
 80016fe:	2b03      	cmp	r3, #3
 8001700:	d82b      	bhi.n	800175a <USB_ActivateEndpoint+0x62>
 8001702:	e8df f003 	tbb	[pc, r3]
 8001706:	1f02      	.short	0x1f02
 8001708:	150c      	.short	0x150c
  {
  case EP_TYPE_CTRL:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_CONTROL);
 800170a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800170e:	b29b      	uxth	r3, r3
 8001710:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8001714:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001718:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800171c:	e01b      	b.n	8001756 <USB_ActivateEndpoint+0x5e>
    break;
  case EP_TYPE_BULK:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_BULK);
 800171e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001722:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8001726:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800172a:	041b      	lsls	r3, r3, #16
 800172c:	0c1b      	lsrs	r3, r3, #16
 800172e:	e012      	b.n	8001756 <USB_ActivateEndpoint+0x5e>
    break;
  case EP_TYPE_INTR:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_INTERRUPT);
 8001730:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001734:	b29b      	uxth	r3, r3
 8001736:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800173a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800173e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8001742:	e008      	b.n	8001756 <USB_ActivateEndpoint+0x5e>
    break;
  case EP_TYPE_ISOC:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_ISOCHRONOUS);
 8001744:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001748:	b29b      	uxth	r3, r3
 800174a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800174e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001752:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001756:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    break;
  default:
      break;
  } 
  
  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800175a:	780c      	ldrb	r4, [r1, #0]
 800175c:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8001760:	f444 4200 	orr.w	r2, r4, #32768	; 0x8000
 8001764:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001768:	051b      	lsls	r3, r3, #20
 800176a:	0d1b      	lsrs	r3, r3, #20
 800176c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001770:	4313      	orrs	r3, r2
 8001772:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
  
  if (ep->doublebuffer == 0) 
 8001776:	7a8b      	ldrb	r3, [r1, #10]
 8001778:	780d      	ldrb	r5, [r1, #0]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d174      	bne.n	8001868 <USB_ActivateEndpoint+0x170>
  {
    if (ep->is_in)
 800177e:	784a      	ldrb	r2, [r1, #1]
 8001780:	888b      	ldrh	r3, [r1, #4]
 8001782:	b33a      	cbz	r2, 80017d4 <USB_ActivateEndpoint+0xdc>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8001784:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8001788:	085b      	lsrs	r3, r3, #1
 800178a:	b292      	uxth	r2, r2
 800178c:	eb02 04c5 	add.w	r4, r2, r5, lsl #3
 8001790:	005b      	lsls	r3, r3, #1
 8001792:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8001796:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800179a:	780a      	ldrb	r2, [r1, #0]
 800179c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80017a0:	065b      	lsls	r3, r3, #25
 80017a2:	d50b      	bpl.n	80017bc <USB_ActivateEndpoint+0xc4>
 80017a4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80017a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80017ac:	051b      	lsls	r3, r3, #20
 80017ae:	0d1b      	lsrs	r3, r3, #20
 80017b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017b4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80017b8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      /* Configure NAK status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK); 
 80017bc:	780a      	ldrb	r2, [r1, #0]
 80017be:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80017c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80017c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80017ca:	041b      	lsls	r3, r3, #16
 80017cc:	0c1b      	lsrs	r3, r3, #16
 80017ce:	f083 0320 	eor.w	r3, r3, #32
 80017d2:	e0fb      	b.n	80019cc <USB_ActivateEndpoint+0x2d4>
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80017d4:	f8b0 4050 	ldrh.w	r4, [r0, #80]	; 0x50
 80017d8:	085b      	lsrs	r3, r3, #1
 80017da:	b2a4      	uxth	r4, r4
 80017dc:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80017e0:	3404      	adds	r4, #4
 80017e2:	005b      	lsls	r3, r3, #1
 80017e4:	f500 6280 	add.w	r2, r0, #1024	; 0x400
 80017e8:	f842 3014 	str.w	r3, [r2, r4, lsl #1]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80017ec:	f8b0 4050 	ldrh.w	r4, [r0, #80]	; 0x50
 80017f0:	780b      	ldrb	r3, [r1, #0]
 80017f2:	690d      	ldr	r5, [r1, #16]
 80017f4:	b2a4      	uxth	r4, r4
 80017f6:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 80017fa:	2d3e      	cmp	r5, #62	; 0x3e
 80017fc:	f104 0406 	add.w	r4, r4, #6
 8001800:	d90b      	bls.n	800181a <USB_ActivateEndpoint+0x122>
 8001802:	f3c5 134f 	ubfx	r3, r5, #5, #16
 8001806:	06ed      	lsls	r5, r5, #27
 8001808:	bf04      	itt	eq
 800180a:	f103 33ff 	addeq.w	r3, r3, #4294967295
 800180e:	b29b      	uxtheq	r3, r3
 8001810:	ea6f 63c3 	mvn.w	r3, r3, lsl #27
 8001814:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001818:	e006      	b.n	8001828 <USB_ActivateEndpoint+0x130>
 800181a:	f3c5 034f 	ubfx	r3, r5, #1, #16
 800181e:	07ed      	lsls	r5, r5, #31
 8001820:	bf44      	itt	mi
 8001822:	3301      	addmi	r3, #1
 8001824:	b29b      	uxthmi	r3, r3
 8001826:	029b      	lsls	r3, r3, #10
 8001828:	b29b      	uxth	r3, r3
 800182a:	f842 3014 	str.w	r3, [r2, r4, lsl #1]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800182e:	780a      	ldrb	r2, [r1, #0]
 8001830:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001834:	045c      	lsls	r4, r3, #17
 8001836:	d50b      	bpl.n	8001850 <USB_ActivateEndpoint+0x158>
 8001838:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800183c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001840:	051b      	lsls	r3, r3, #20
 8001842:	0d1b      	lsrs	r3, r3, #20
 8001844:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001848:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800184c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001850:	780a      	ldrb	r2, [r1, #0]
 8001852:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001856:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800185a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800185e:	041b      	lsls	r3, r3, #16
 8001860:	0c1b      	lsrs	r3, r3, #16
 8001862:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8001866:	e0b1      	b.n	80019cc <USB_ActivateEndpoint+0x2d4>
  }
  /*Double Buffer*/
  else
  {
    /*Set the endpoint as double buffered*/
    PCD_SET_EP_DBUF(USBx, ep->num);
 8001868:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
 800186c:	f500 6480 	add.w	r4, r0, #1024	; 0x400
 8001870:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8001874:	051b      	lsls	r3, r3, #20
 8001876:	0d1b      	lsrs	r3, r3, #20
 8001878:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800187c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001880:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
    /*Set buffer address for double buffered mode*/
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num,ep->pmaaddr0, ep->pmaaddr1);
 8001884:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001888:	780a      	ldrb	r2, [r1, #0]
 800188a:	b29b      	uxth	r3, r3
 800188c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001890:	88ca      	ldrh	r2, [r1, #6]
 8001892:	0852      	lsrs	r2, r2, #1
 8001894:	0052      	lsls	r2, r2, #1
 8001896:	f844 2013 	str.w	r2, [r4, r3, lsl #1]
 800189a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800189e:	780a      	ldrb	r2, [r1, #0]
 80018a0:	b29b      	uxth	r3, r3
 80018a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80018a6:	890a      	ldrh	r2, [r1, #8]
 80018a8:	3304      	adds	r3, #4
 80018aa:	0852      	lsrs	r2, r2, #1
 80018ac:	0052      	lsls	r2, r2, #1
 80018ae:	f844 2013 	str.w	r2, [r4, r3, lsl #1]
    
    if (ep->is_in==0)
 80018b2:	784b      	ldrb	r3, [r1, #1]
 80018b4:	780a      	ldrb	r2, [r1, #0]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d146      	bne.n	8001948 <USB_ActivateEndpoint+0x250>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80018ba:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80018be:	045b      	lsls	r3, r3, #17
 80018c0:	d50b      	bpl.n	80018da <USB_ActivateEndpoint+0x1e2>
 80018c2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80018c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80018ca:	051b      	lsls	r3, r3, #20
 80018cc:	0d1b      	lsrs	r3, r3, #20
 80018ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80018d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018d6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80018da:	780a      	ldrb	r2, [r1, #0]
 80018dc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80018e0:	065d      	lsls	r5, r3, #25
 80018e2:	d50b      	bpl.n	80018fc <USB_ActivateEndpoint+0x204>
 80018e4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80018e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80018ec:	051b      	lsls	r3, r3, #20
 80018ee:	0d1b      	lsrs	r3, r3, #20
 80018f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018f4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80018f8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      
      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80018fc:	780a      	ldrb	r2, [r1, #0]
 80018fe:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001902:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001906:	051b      	lsls	r3, r3, #20
 8001908:	0d1b      	lsrs	r3, r3, #20
 800190a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800190e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001912:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001916:	780a      	ldrb	r2, [r1, #0]
 8001918:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800191c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001920:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001924:	041b      	lsls	r3, r3, #16
 8001926:	0c1b      	lsrs	r3, r3, #16
 8001928:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800192c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001930:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001934:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8001938:	780a      	ldrb	r2, [r1, #0]
 800193a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800193e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001942:	051b      	lsls	r3, r3, #20
 8001944:	0d1b      	lsrs	r3, r3, #20
 8001946:	e041      	b.n	80019cc <USB_ActivateEndpoint+0x2d4>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001948:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800194c:	045c      	lsls	r4, r3, #17
 800194e:	d50b      	bpl.n	8001968 <USB_ActivateEndpoint+0x270>
 8001950:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001954:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001958:	051b      	lsls	r3, r3, #20
 800195a:	0d1b      	lsrs	r3, r3, #20
 800195c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001960:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001964:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001968:	780a      	ldrb	r2, [r1, #0]
 800196a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800196e:	065b      	lsls	r3, r3, #25
 8001970:	d50b      	bpl.n	800198a <USB_ActivateEndpoint+0x292>
 8001972:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001976:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800197a:	051b      	lsls	r3, r3, #20
 800197c:	0d1b      	lsrs	r3, r3, #20
 800197e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001982:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001986:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 800198a:	780a      	ldrb	r2, [r1, #0]
 800198c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001990:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001994:	051b      	lsls	r3, r3, #20
 8001996:	0d1b      	lsrs	r3, r3, #20
 8001998:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800199c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019a0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80019a4:	780a      	ldrb	r2, [r1, #0]
 80019a6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80019aa:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80019ae:	051b      	lsls	r3, r3, #20
 80019b0:	0d1b      	lsrs	r3, r3, #20
 80019b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019ba:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80019be:	780a      	ldrb	r2, [r1, #0]
 80019c0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80019c4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80019c8:	049b      	lsls	r3, r3, #18
 80019ca:	0c9b      	lsrs	r3, r3, #18
 80019cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019d4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }
  
  return HAL_OK;
}
 80019d8:	2000      	movs	r0, #0
 80019da:	bd30      	pop	{r4, r5, pc}

080019dc <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80019dc:	b510      	push	{r4, lr}
  if (ep->doublebuffer == 0) 
 80019de:	7a8c      	ldrb	r4, [r1, #10]
 80019e0:	784a      	ldrb	r2, [r1, #1]
 80019e2:	780b      	ldrb	r3, [r1, #0]
 80019e4:	bb1c      	cbnz	r4, 8001a2e <USB_DeactivateEndpoint+0x52>
  {
    if (ep->is_in)
 80019e6:	b182      	cbz	r2, 8001a0a <USB_DeactivateEndpoint+0x2e>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80019e8:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80019ec:	0652      	lsls	r2, r2, #25
 80019ee:	d55b      	bpl.n	8001aa8 <USB_DeactivateEndpoint+0xcc>
 80019f0:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80019f4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80019f8:	0512      	lsls	r2, r2, #20
 80019fa:	0d12      	lsrs	r2, r2, #20
 80019fc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a00:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8001a04:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
 8001a08:	e04e      	b.n	8001aa8 <USB_DeactivateEndpoint+0xcc>
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS); 
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001a0a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001a0e:	0454      	lsls	r4, r2, #17
 8001a10:	f140 808d 	bpl.w	8001b2e <USB_DeactivateEndpoint+0x152>
 8001a14:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001a18:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001a1c:	0512      	lsls	r2, r2, #20
 8001a1e:	0d12      	lsrs	r2, r2, #20
 8001a20:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001a24:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001a28:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
 8001a2c:	e07f      	b.n	8001b2e <USB_DeactivateEndpoint+0x152>
    }
  }
  /*Double Buffer*/
  else
  { 
    if (ep->is_in==0)
 8001a2e:	2a00      	cmp	r2, #0
 8001a30:	d142      	bne.n	8001ab8 <USB_DeactivateEndpoint+0xdc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001a32:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001a36:	0452      	lsls	r2, r2, #17
 8001a38:	d50b      	bpl.n	8001a52 <USB_DeactivateEndpoint+0x76>
 8001a3a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001a3e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001a42:	0512      	lsls	r2, r2, #20
 8001a44:	0d12      	lsrs	r2, r2, #20
 8001a46:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001a4a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001a4e:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001a52:	780a      	ldrb	r2, [r1, #0]
 8001a54:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001a58:	065c      	lsls	r4, r3, #25
 8001a5a:	d50b      	bpl.n	8001a74 <USB_DeactivateEndpoint+0x98>
 8001a5c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001a60:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001a64:	051b      	lsls	r3, r3, #20
 8001a66:	0d1b      	lsrs	r3, r3, #20
 8001a68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a6c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001a70:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      
      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8001a74:	780a      	ldrb	r2, [r1, #0]
 8001a76:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001a7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001a7e:	051b      	lsls	r3, r3, #20
 8001a80:	0d1b      	lsrs	r3, r3, #20
 8001a82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a86:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001a8a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001a8e:	780a      	ldrb	r2, [r1, #0]
 8001a90:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001a94:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001a98:	049b      	lsls	r3, r3, #18
 8001a9a:	0c9b      	lsrs	r3, r3, #18
 8001a9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001aa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001aa4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8001aa8:	780a      	ldrb	r2, [r1, #0]
 8001aaa:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001aae:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001ab2:	051b      	lsls	r3, r3, #20
 8001ab4:	0d1b      	lsrs	r3, r3, #20
 8001ab6:	e041      	b.n	8001b3c <USB_DeactivateEndpoint+0x160>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001ab8:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001abc:	0452      	lsls	r2, r2, #17
 8001abe:	d50b      	bpl.n	8001ad8 <USB_DeactivateEndpoint+0xfc>
 8001ac0:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001ac4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001ac8:	0512      	lsls	r2, r2, #20
 8001aca:	0d12      	lsrs	r2, r2, #20
 8001acc:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001ad0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001ad4:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001ad8:	780a      	ldrb	r2, [r1, #0]
 8001ada:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001ade:	065b      	lsls	r3, r3, #25
 8001ae0:	d50b      	bpl.n	8001afa <USB_DeactivateEndpoint+0x11e>
 8001ae2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001ae6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001aea:	051b      	lsls	r3, r3, #20
 8001aec:	0d1b      	lsrs	r3, r3, #20
 8001aee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001af2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001af6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8001afa:	780a      	ldrb	r2, [r1, #0]
 8001afc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001b00:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001b04:	051b      	lsls	r3, r3, #20
 8001b06:	0d1b      	lsrs	r3, r3, #20
 8001b08:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b10:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8001b14:	780a      	ldrb	r2, [r1, #0]
 8001b16:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001b1a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001b1e:	051b      	lsls	r3, r3, #20
 8001b20:	0d1b      	lsrs	r3, r3, #20
 8001b22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b2a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001b2e:	780a      	ldrb	r2, [r1, #0]
 8001b30:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001b34:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001b38:	049b      	lsls	r3, r3, #18
 8001b3a:	0c9b      	lsrs	r3, r3, #18
 8001b3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b44:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }
  
  return HAL_OK;
}
 8001b48:	2000      	movs	r0, #0
 8001b4a:	bd10      	pop	{r4, pc}

08001b4c <USB_EPSetStall>:
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx , USB_EPTypeDef *ep)
{
  if (ep->num == 0)
 8001b4c:	780a      	ldrb	r2, [r1, #0]
 8001b4e:	b97a      	cbnz	r2, 8001b70 <USB_EPSetStall+0x24>
  {
    /* This macro sets STALL status for RX & TX*/ 
    PCD_SET_EP_TXRX_STATUS(USBx, ep->num, USB_EP_RX_STALL, USB_EP_TX_STALL); 
 8001b50:	8803      	ldrh	r3, [r0, #0]
 8001b52:	b29b      	uxth	r3, r3
 8001b54:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001b58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001b5c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001b60:	f083 0310 	eor.w	r3, r3, #16
 8001b64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b6c:	8003      	strh	r3, [r0, #0]
 8001b6e:	e01c      	b.n	8001baa <USB_EPSetStall+0x5e>
  }
  else
  {
    if (ep->is_in)
 8001b70:	784b      	ldrb	r3, [r1, #1]
 8001b72:	b153      	cbz	r3, 8001b8a <USB_EPSetStall+0x3e>
    {
      PCD_SET_EP_TX_STATUS(USBx, ep->num , USB_EP_TX_STALL); 
 8001b74:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001b78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001b7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001b80:	041b      	lsls	r3, r3, #16
 8001b82:	0c1b      	lsrs	r3, r3, #16
 8001b84:	f083 0310 	eor.w	r3, r3, #16
 8001b88:	e009      	b.n	8001b9e <USB_EPSetStall+0x52>
    }
    else
    {
      PCD_SET_EP_RX_STATUS(USBx, ep->num , USB_EP_RX_STALL);
 8001b8a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001b8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001b92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b96:	041b      	lsls	r3, r3, #16
 8001b98:	0c1b      	lsrs	r3, r3, #16
 8001b9a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001b9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ba2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ba6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }
  return HAL_OK;
}
 8001baa:	2000      	movs	r0, #0
 8001bac:	4770      	bx	lr

08001bae <USB_EPClearStall>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in)
 8001bae:	784b      	ldrb	r3, [r1, #1]
 8001bb0:	780a      	ldrb	r2, [r1, #0]
 8001bb2:	b1db      	cbz	r3, 8001bec <USB_EPClearStall+0x3e>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001bb4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001bb8:	065b      	lsls	r3, r3, #25
 8001bba:	d50b      	bpl.n	8001bd4 <USB_EPClearStall+0x26>
 8001bbc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001bc0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001bc4:	051b      	lsls	r3, r3, #20
 8001bc6:	0d1b      	lsrs	r3, r3, #20
 8001bc8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bcc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001bd0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8001bd4:	780a      	ldrb	r2, [r1, #0]
 8001bd6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001bda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001bde:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001be2:	041b      	lsls	r3, r3, #16
 8001be4:	0c1b      	lsrs	r3, r3, #16
 8001be6:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8001bea:	e01a      	b.n	8001c22 <USB_EPClearStall+0x74>
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001bec:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001bf0:	045b      	lsls	r3, r3, #17
 8001bf2:	d50b      	bpl.n	8001c0c <USB_EPClearStall+0x5e>
 8001bf4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001bf8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001bfc:	051b      	lsls	r3, r3, #20
 8001bfe:	0d1b      	lsrs	r3, r3, #20
 8001c00:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c08:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001c0c:	780a      	ldrb	r2, [r1, #0]
 8001c0e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001c12:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001c16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c1a:	041b      	lsls	r3, r3, #16
 8001c1c:	0c1b      	lsrs	r3, r3, #16
 8001c1e:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8001c22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c2a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }
  return HAL_OK;
}
 8001c2e:	2000      	movs	r0, #0
 8001c30:	4770      	bx	lr

08001c32 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_TypeDef *USBx, uint8_t address)
{
  if(address == 0) 
 8001c32:	b911      	cbnz	r1, 8001c3a <USB_SetDevAddress+0x8>
  {
   /* set device address and enable function */
   USBx->DADDR = USB_DADDR_EF;
 8001c34:	2380      	movs	r3, #128	; 0x80
 8001c36:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }
  
  return HAL_OK;
}
 8001c3a:	2000      	movs	r0, #0
 8001c3c:	4770      	bx	lr

08001c3e <USB_DevConnect>:
 8001c3e:	2000      	movs	r0, #0
 8001c40:	4770      	bx	lr

08001c42 <USB_DevDisconnect>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8001c42:	2000      	movs	r0, #0
 8001c44:	4770      	bx	lr

08001c46 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts (USB_TypeDef *USBx)
{
  uint32_t tmpreg = 0;
  
  tmpreg = USBx->ISTR;
 8001c46:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 8001c4a:	b280      	uxth	r0, r0
 8001c4c:	4770      	bx	lr

08001c4e <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8001c4e:	2000      	movs	r0, #0
 8001c50:	4770      	bx	lr

08001c52 <USB_WritePMA>:
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
 8001c52:	3301      	adds	r3, #1
  uint32_t index = 0, temp1 = 0, temp2 = 0;
  uint16_t *pdwVal = NULL;
  
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8001c54:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  * @param  wPMABufAddr : address into PMA.
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8001c58:	b510      	push	{r4, lr}
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
 8001c5a:	105b      	asrs	r3, r3, #1
  uint32_t index = 0, temp1 = 0, temp2 = 0;
  uint16_t *pdwVal = NULL;
  
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8001c5c:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  for (index = nbytes; index != 0; index--)
 8001c60:	2400      	movs	r4, #0
 8001c62:	42a3      	cmp	r3, r4
 8001c64:	d005      	beq.n	8001c72 <USB_WritePMA+0x20>
 8001c66:	f831 0b02 	ldrh.w	r0, [r1], #2
  {
    temp1 = (uint16_t) * pbUsrBuf;
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
    *pdwVal++ = temp2;
 8001c6a:	f822 0024 	strh.w	r0, [r2, r4, lsl #2]
 8001c6e:	3401      	adds	r4, #1
 8001c70:	e7f7      	b.n	8001c62 <USB_WritePMA+0x10>
    pdwVal++;
    pbUsrBuf++;
  }
}
 8001c72:	bd10      	pop	{r4, pc}

08001c74 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx , USB_EPTypeDef *ep)
{
 8001c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c76:	4604      	mov	r4, r0
  uint16_t pmabuffer = 0;
  uint32_t len = ep->xfer_len;
  
  /* IN endpoint */
  if (ep->is_in == 1)
 8001c78:	7848      	ldrb	r0, [r1, #1]
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx , USB_EPTypeDef *ep)
{
 8001c7a:	460e      	mov	r6, r1
  uint16_t pmabuffer = 0;
  uint32_t len = ep->xfer_len;
  
  /* IN endpoint */
  if (ep->is_in == 1)
 8001c7c:	2801      	cmp	r0, #1
 8001c7e:	698b      	ldr	r3, [r1, #24]
 8001c80:	690a      	ldr	r2, [r1, #16]
 8001c82:	7a8f      	ldrb	r7, [r1, #10]
 8001c84:	d157      	bne.n	8001d36 <USB_EPStartXfer+0xc2>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8001c86:	461d      	mov	r5, r3
 8001c88:	4293      	cmp	r3, r2
    {
      len=ep->maxpacket;
      ep->xfer_len-=len; 
 8001c8a:	bf83      	ittte	hi
 8001c8c:	1a9d      	subhi	r5, r3, r2
 8001c8e:	618d      	strhi	r5, [r1, #24]
 8001c90:	4615      	movhi	r5, r2
    }
    else
    {  
      len=ep->xfer_len;
      ep->xfer_len =0;
 8001c92:	2300      	movls	r3, #0
 8001c94:	bf98      	it	ls
 8001c96:	618b      	strls	r3, [r1, #24]
 8001c98:	b2ab      	uxth	r3, r5
    }
    
    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0) 
 8001c9a:	b97f      	cbnz	r7, 8001cbc <USB_EPStartXfer+0x48>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, len);
 8001c9c:	888a      	ldrh	r2, [r1, #4]
 8001c9e:	4620      	mov	r0, r4
 8001ca0:	6949      	ldr	r1, [r1, #20]
 8001ca2:	f7ff ffd6 	bl	8001c52 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8001ca6:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 8001caa:	7832      	ldrb	r2, [r6, #0]
 8001cac:	b29b      	uxth	r3, r3
 8001cae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001cb2:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8001cb6:	f8c3 5404 	str.w	r5, [r3, #1028]	; 0x404
 8001cba:	e030      	b.n	8001d1e <USB_EPStartXfer+0xaa>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if (PCD_GET_ENDPOINT(USBx, ep->num)& USB_EP_DTOG_TX)
 8001cbc:	780a      	ldrb	r2, [r1, #0]
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
        pmabuffer = ep->pmaaddr0;
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, len);
 8001cbe:	4620      	mov	r0, r4
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
    }
    else
    {
      /* Write the data to the USB endpoint */
      if (PCD_GET_ENDPOINT(USBx, ep->num)& USB_EP_DTOG_TX)
 8001cc0:	f834 1022 	ldrh.w	r1, [r4, r2, lsl #2]
 8001cc4:	00d2      	lsls	r2, r2, #3
 8001cc6:	f011 0f40 	tst.w	r1, #64	; 0x40
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8001cca:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 8001cce:	b289      	uxth	r1, r1
 8001cd0:	440a      	add	r2, r1
 8001cd2:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8001cd6:	f8c2 5404 	str.w	r5, [r2, #1028]	; 0x404
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
        pmabuffer = ep->pmaaddr0;
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, len);
 8001cda:	6971      	ldr	r1, [r6, #20]
      /* Write the data to the USB endpoint */
      if (PCD_GET_ENDPOINT(USBx, ep->num)& USB_EP_DTOG_TX)
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
        pmabuffer = ep->pmaaddr1;
 8001cdc:	bf14      	ite	ne
 8001cde:	8932      	ldrhne	r2, [r6, #8]
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
        pmabuffer = ep->pmaaddr0;
 8001ce0:	88f2      	ldrheq	r2, [r6, #6]
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, len);
 8001ce2:	f7ff ffb6 	bl	8001c52 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8001ce6:	7873      	ldrb	r3, [r6, #1]
 8001ce8:	7832      	ldrb	r2, [r6, #0]
 8001cea:	b953      	cbnz	r3, 8001d02 <USB_EPStartXfer+0x8e>
 8001cec:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8001cf0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001cf4:	051b      	lsls	r3, r3, #20
 8001cf6:	0d1b      	lsrs	r3, r3, #20
 8001cf8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cfc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001d00:	e00b      	b.n	8001d1a <USB_EPStartXfer+0xa6>
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d10b      	bne.n	8001d1e <USB_EPStartXfer+0xaa>
 8001d06:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8001d0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d0e:	051b      	lsls	r3, r3, #20
 8001d10:	0d1b      	lsrs	r3, r3, #20
 8001d12:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d1a:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
    }
    
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8001d1e:	7832      	ldrb	r2, [r6, #0]
 8001d20:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8001d24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001d28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001d2c:	041b      	lsls	r3, r3, #16
 8001d2e:	0c1b      	lsrs	r3, r3, #16
 8001d30:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8001d34:	e066      	b.n	8001e04 <USB_EPStartXfer+0x190>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8001d36:	4293      	cmp	r3, r2
    {
      len=ep->maxpacket;
      ep->xfer_len-=len; 
 8001d38:	bf8b      	itete	hi
 8001d3a:	1a9b      	subhi	r3, r3, r2
    }
    else
    {
      len=ep->xfer_len;
      ep->xfer_len =0;
 8001d3c:	2200      	movls	r2, #0
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
    {
      len=ep->maxpacket;
      ep->xfer_len-=len; 
 8001d3e:	618b      	strhi	r3, [r1, #24]
    }
    else
    {
      len=ep->xfer_len;
      ep->xfer_len =0;
 8001d40:	618a      	strls	r2, [r1, #24]
 8001d42:	bf88      	it	hi
 8001d44:	4613      	movhi	r3, r2
 8001d46:	7809      	ldrb	r1, [r1, #0]
    }
    
    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0) 
 8001d48:	b327      	cbz	r7, 8001d94 <USB_EPStartXfer+0x120>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8001d4a:	bb00      	cbnz	r0, 8001d8e <USB_EPStartXfer+0x11a>
 8001d4c:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
 8001d50:	2b3e      	cmp	r3, #62	; 0x3e
 8001d52:	b292      	uxth	r2, r2
 8001d54:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8001d58:	f101 0102 	add.w	r1, r1, #2
 8001d5c:	f504 6080 	add.w	r0, r4, #1024	; 0x400
 8001d60:	d90b      	bls.n	8001d7a <USB_EPStartXfer+0x106>
 8001d62:	f3c3 124f 	ubfx	r2, r3, #5, #16
 8001d66:	06dd      	lsls	r5, r3, #27
 8001d68:	bf04      	itt	eq
 8001d6a:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8001d6e:	b292      	uxtheq	r2, r2
 8001d70:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8001d74:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8001d78:	e006      	b.n	8001d88 <USB_EPStartXfer+0x114>
 8001d7a:	f3c3 024f 	ubfx	r2, r3, #1, #16
 8001d7e:	07df      	lsls	r7, r3, #31
 8001d80:	bf44      	itt	mi
 8001d82:	3201      	addmi	r2, #1
 8001d84:	b292      	uxthmi	r2, r2
 8001d86:	0292      	lsls	r2, r2, #10
 8001d88:	b292      	uxth	r2, r2
 8001d8a:	f840 2011 	str.w	r2, [r0, r1, lsl #1]
 8001d8e:	7872      	ldrb	r2, [r6, #1]
 8001d90:	7831      	ldrb	r1, [r6, #0]
 8001d92:	bb0a      	cbnz	r2, 8001dd8 <USB_EPStartXfer+0x164>
 8001d94:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
 8001d98:	2b3e      	cmp	r3, #62	; 0x3e
 8001d9a:	b292      	uxth	r2, r2
 8001d9c:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8001da0:	f101 0106 	add.w	r1, r1, #6
 8001da4:	f504 6080 	add.w	r0, r4, #1024	; 0x400
 8001da8:	d90b      	bls.n	8001dc2 <USB_EPStartXfer+0x14e>
 8001daa:	f3c3 124f 	ubfx	r2, r3, #5, #16
 8001dae:	06dd      	lsls	r5, r3, #27
 8001db0:	bf04      	itt	eq
 8001db2:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8001db6:	b292      	uxtheq	r2, r2
 8001db8:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8001dbc:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8001dc0:	e006      	b.n	8001dd0 <USB_EPStartXfer+0x15c>
 8001dc2:	f3c3 024f 	ubfx	r2, r3, #1, #16
 8001dc6:	07db      	lsls	r3, r3, #31
 8001dc8:	bf44      	itt	mi
 8001dca:	3201      	addmi	r2, #1
 8001dcc:	b292      	uxthmi	r2, r2
 8001dce:	0292      	lsls	r2, r2, #10
 8001dd0:	b292      	uxth	r2, r2
 8001dd2:	f840 2011 	str.w	r2, [r0, r1, lsl #1]
 8001dd6:	e00a      	b.n	8001dee <USB_EPStartXfer+0x17a>
 8001dd8:	2a01      	cmp	r2, #1
 8001dda:	d108      	bne.n	8001dee <USB_EPStartXfer+0x17a>
 8001ddc:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
 8001de0:	b292      	uxth	r2, r2
 8001de2:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8001de6:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8001dea:	f8c1 3404 	str.w	r3, [r1, #1028]	; 0x404
    }
    
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001dee:	7832      	ldrb	r2, [r6, #0]
 8001df0:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8001df4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001df8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001dfc:	041b      	lsls	r3, r3, #16
 8001dfe:	0c1b      	lsrs	r3, r3, #16
 8001e00:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8001e04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e0c:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
  }
  
  return HAL_OK;
}
 8001e10:	2000      	movs	r0, #0
 8001e12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001e14 <USB_ReadPMA>:
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
 8001e14:	3301      	adds	r3, #1
  uint32_t index = 0;
  uint32_t *pdwVal = NULL;
  
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8001e16:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  * @param  wPMABufAddr : address into PMA.
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8001e1a:	b510      	push	{r4, lr}
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
 8001e1c:	105b      	asrs	r3, r3, #1
  uint32_t index = 0;
  uint32_t *pdwVal = NULL;
  
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8001e1e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  for (index = nbytes; index != 0; index--)
 8001e22:	2400      	movs	r4, #0
 8001e24:	42a3      	cmp	r3, r4
 8001e26:	d005      	beq.n	8001e34 <USB_ReadPMA+0x20>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 8001e28:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 8001e2c:	f821 0014 	strh.w	r0, [r1, r4, lsl #1]
 8001e30:	3401      	adds	r4, #1
 8001e32:	e7f7      	b.n	8001e24 <USB_ReadPMA+0x10>
    pbUsrBuf++;
  }
}
 8001e34:	bd10      	pop	{r4, pc}

08001e36 <USBD_CDC_DataIn>:
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8001e36:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  if(pdev->pClassData != NULL)
 8001e3a:	b11b      	cbz	r3, 8001e44 <USBD_CDC_DataIn+0xe>
  {
    
    hcdc->TxState = 0;
 8001e3c:	2000      	movs	r0, #0
 8001e3e:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214

    return USBD_OK;
 8001e42:	4770      	bx	lr
  }
  else
  {
    return USBD_FAIL;
 8001e44:	2002      	movs	r0, #2
  }
}
 8001e46:	4770      	bx	lr

08001e48 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 8001e48:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
 8001e4c:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8001e4e:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 8001e52:	b15b      	cbz	r3, 8001e6c <USBD_CDC_EP0_RxReady+0x24>
 8001e54:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8001e58:	28ff      	cmp	r0, #255	; 0xff
 8001e5a:	d007      	beq.n	8001e6c <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8001e62:	4621      	mov	r1, r4
 8001e64:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      hcdc->CmdLength);
      hcdc->CmdOpCode = 0xFF; 
 8001e66:	23ff      	movs	r3, #255	; 0xff
 8001e68:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
      
  }
  return USBD_OK;
}
 8001e6c:	2000      	movs	r0, #0
 8001e6e:	bd10      	pop	{r4, pc}

08001e70 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8001e70:	2343      	movs	r3, #67	; 0x43
 8001e72:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8001e74:	4800      	ldr	r0, [pc, #0]	; (8001e78 <USBD_CDC_GetFSCfgDesc+0x8>)
 8001e76:	4770      	bx	lr
 8001e78:	20000000 	.word	0x20000000

08001e7c <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8001e7c:	2343      	movs	r3, #67	; 0x43
 8001e7e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8001e80:	4800      	ldr	r0, [pc, #0]	; (8001e84 <USBD_CDC_GetHSCfgDesc+0x8>)
 8001e82:	4770      	bx	lr
 8001e84:	200000cc 	.word	0x200000cc

08001e88 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8001e88:	2343      	movs	r3, #67	; 0x43
 8001e8a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8001e8c:	4800      	ldr	r0, [pc, #0]	; (8001e90 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8001e8e:	4770      	bx	lr
 8001e90:	20000088 	.word	0x20000088

08001e94 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8001e94:	230a      	movs	r3, #10
 8001e96:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8001e98:	4800      	ldr	r0, [pc, #0]	; (8001e9c <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8001e9a:	4770      	bx	lr
 8001e9c:	2000007c 	.word	0x2000007c

08001ea0 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{      
 8001ea0:	b538      	push	{r3, r4, r5, lr}
 8001ea2:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8001ea4:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  
  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8001ea8:	f000 fef6 	bl	8002c98 <USBD_LL_GetRxDataSize>
  
  /* USB data will be immediately processed, this allow next USB traffic being 
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8001eac:	f8d5 3218 	ldr.w	r3, [r5, #536]	; 0x218
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{      
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  
  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8001eb0:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
  
  /* USB data will be immediately processed, this allow next USB traffic being 
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8001eb4:	b14b      	cbz	r3, 8001eca <USBD_CDC_DataOut+0x2a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8001eb6:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 8001eba:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 8001ec4:	4798      	blx	r3

    return USBD_OK;
 8001ec6:	2000      	movs	r0, #0
 8001ec8:	bd38      	pop	{r3, r4, r5, pc}
  }
  else
  {
    return USBD_FAIL;
 8001eca:	2002      	movs	r0, #2
  }
}
 8001ecc:	bd38      	pop	{r3, r4, r5, pc}
	...

08001ed0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev, 
                                USBD_SetupReqTypedef *req)
{
 8001ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  static uint8_t ifalt = 0;
    
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8001ed2:	780f      	ldrb	r7, [r1, #0]
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev, 
                                USBD_SetupReqTypedef *req)
{
 8001ed4:	4606      	mov	r6, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  static uint8_t ifalt = 0;
    
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8001ed6:	f017 0360 	ands.w	r3, r7, #96	; 0x60
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev, 
                                USBD_SetupReqTypedef *req)
{
 8001eda:	460c      	mov	r4, r1
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  static uint8_t ifalt = 0;
    
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8001edc:	d022      	beq.n	8001f24 <USBD_CDC_Setup+0x54>
 8001ede:	2b20      	cmp	r3, #32
 8001ee0:	d127      	bne.n	8001f32 <USBD_CDC_Setup+0x62>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 8001ee2:	88ca      	ldrh	r2, [r1, #6]
 8001ee4:	784b      	ldrb	r3, [r1, #1]
 8001ee6:	b1ba      	cbz	r2, 8001f18 <USBD_CDC_Setup+0x48>
    {
      if (req->bmRequest & 0x80)
 8001ee8:	0639      	lsls	r1, r7, #24
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev, 
                                USBD_SetupReqTypedef *req)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8001eea:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
    {
      if (req->bmRequest & 0x80)
 8001eee:	d509      	bpl.n	8001f04 <USBD_CDC_Setup+0x34>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8001ef0:	f8d0 121c 	ldr.w	r1, [r0, #540]	; 0x21c
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	688f      	ldr	r7, [r1, #8]
 8001ef8:	4629      	mov	r1, r5
 8001efa:	47b8      	blx	r7
                                                          (uint8_t *)hcdc->data,
                                                          req->wLength);
          USBD_CtlSendData (pdev, 
 8001efc:	88e2      	ldrh	r2, [r4, #6]
 8001efe:	4629      	mov	r1, r5
 8001f00:	4630      	mov	r0, r6
 8001f02:	e014      	b.n	8001f2e <USBD_CDC_Setup+0x5e>
                            (uint8_t *)hcdc->data,
                            req->wLength);
      }
      else
      {
        hcdc->CmdOpCode = req->bRequest;
 8001f04:	f885 3200 	strb.w	r3, [r5, #512]	; 0x200
        hcdc->CmdLength = req->wLength;
 8001f08:	88e3      	ldrh	r3, [r4, #6]
        
        USBD_CtlPrepareRx (pdev, 
 8001f0a:	4629      	mov	r1, r5
                            req->wLength);
      }
      else
      {
        hcdc->CmdOpCode = req->bRequest;
        hcdc->CmdLength = req->wLength;
 8001f0c:	f885 3201 	strb.w	r3, [r5, #513]	; 0x201
        
        USBD_CtlPrepareRx (pdev, 
 8001f10:	88e2      	ldrh	r2, [r4, #6]
 8001f12:	f000 fb8f 	bl	8002634 <USBD_CtlPrepareRx>
 8001f16:	e00c      	b.n	8001f32 <USBD_CDC_Setup+0x62>
      }
      
    }
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8001f18:	f8d0 021c 	ldr.w	r0, [r0, #540]	; 0x21c
 8001f1c:	6884      	ldr	r4, [r0, #8]
 8001f1e:	4618      	mov	r0, r3
 8001f20:	47a0      	blx	r4
 8001f22:	e006      	b.n	8001f32 <USBD_CDC_Setup+0x62>
                                                        0);
    }
    break;

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8001f24:	784b      	ldrb	r3, [r1, #1]
 8001f26:	2b0a      	cmp	r3, #10
 8001f28:	d103      	bne.n	8001f32 <USBD_CDC_Setup+0x62>
    {      
    case USB_REQ_GET_INTERFACE :
      USBD_CtlSendData (pdev,
 8001f2a:	4903      	ldr	r1, [pc, #12]	; (8001f38 <USBD_CDC_Setup+0x68>)
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	f000 fb6c 	bl	800260a <USBD_CtlSendData>
 
  default: 
    break;
  }
  return USBD_OK;
}
 8001f32:	2000      	movs	r0, #0
 8001f34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f36:	bf00      	nop
 8001f38:	20000179 	.word	0x20000179

08001f3c <USBD_CDC_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, 
                                 uint8_t cfgidx)
{
 8001f3c:	b510      	push	{r4, lr}
 8001f3e:	4604      	mov	r4, r0
  uint8_t ret = 0;
  
  /* Open EP IN */
  USBD_LL_CloseEP(pdev,
 8001f40:	2181      	movs	r1, #129	; 0x81
 8001f42:	f000 fe45 	bl	8002bd0 <USBD_LL_CloseEP>
              CDC_IN_EP);
  
  /* Open EP OUT */
  USBD_LL_CloseEP(pdev,
 8001f46:	2101      	movs	r1, #1
 8001f48:	4620      	mov	r0, r4
 8001f4a:	f000 fe41 	bl	8002bd0 <USBD_LL_CloseEP>
              CDC_OUT_EP);
  
  /* Open Command IN EP */
  USBD_LL_CloseEP(pdev,
 8001f4e:	2182      	movs	r1, #130	; 0x82
 8001f50:	4620      	mov	r0, r4
 8001f52:	f000 fe3d 	bl	8002bd0 <USBD_LL_CloseEP>
              CDC_CMD_EP);
  
  
  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8001f56:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 8001f5a:	b153      	cbz	r3, 8001f72 <USBD_CDC_DeInit+0x36>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8001f5c:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8001f64:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 8001f68:	f000 fea0 	bl	8002cac <USBD_static_free>
    pdev->pClassData = NULL;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
  }
  
  return ret;
}
 8001f72:	2000      	movs	r0, #0
 8001f74:	bd10      	pop	{r4, pc}

08001f76 <USBD_CDC_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
 8001f76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint8_t ret = 0;
  USBD_CDC_HandleTypeDef   *hcdc;
  
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8001f78:	7c03      	ldrb	r3, [r0, #16]
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
 8001f7a:	4604      	mov	r4, r0
  uint8_t ret = 0;
  USBD_CDC_HandleTypeDef   *hcdc;
  
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8001f7c:	b943      	cbnz	r3, 8001f90 <USBD_CDC_Init+0x1a>
  {  
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 8001f7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f82:	2202      	movs	r2, #2
 8001f84:	2181      	movs	r1, #129	; 0x81
 8001f86:	f000 fe13 	bl	8002bb0 <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_HS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 8001f8a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f8e:	e005      	b.n	8001f9c <USBD_CDC_Init+0x26>
    
  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 8001f90:	2340      	movs	r3, #64	; 0x40
 8001f92:	2202      	movs	r2, #2
 8001f94:	2181      	movs	r1, #129	; 0x81
 8001f96:	f000 fe0b 	bl	8002bb0 <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 8001f9a:	2340      	movs	r3, #64	; 0x40
 8001f9c:	2202      	movs	r2, #2
 8001f9e:	2101      	movs	r1, #1
 8001fa0:	4620      	mov	r0, r4
 8001fa2:	f000 fe05 	bl	8002bb0 <USBD_LL_OpenEP>
                   CDC_OUT_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_OUT_PACKET_SIZE);
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev,
 8001fa6:	2308      	movs	r3, #8
 8001fa8:	2203      	movs	r2, #3
 8001faa:	2182      	movs	r1, #130	; 0x82
 8001fac:	4620      	mov	r0, r4
 8001fae:	f000 fdff 	bl	8002bb0 <USBD_LL_OpenEP>
                 CDC_CMD_EP,
                 USBD_EP_TYPE_INTR,
                 CDC_CMD_PACKET_SIZE);
  
    
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8001fb2:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8001fb6:	f000 fe75 	bl	8002ca4 <USBD_static_malloc>
 8001fba:	4606      	mov	r6, r0
 8001fbc:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
  
  if(pdev->pClassData == NULL)
 8001fc0:	b1e8      	cbz	r0, 8001ffe <USBD_CDC_Init+0x88>
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
    
    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8001fc2:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
    
    /* Init Xfer states */
    hcdc->TxState =0;
 8001fc6:	2500      	movs	r5, #0
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
    
    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4798      	blx	r3
    
    /* Init Xfer states */
    hcdc->TxState =0;
    hcdc->RxState =0;
       
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8001fcc:	7c27      	ldrb	r7, [r4, #16]
    
    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
    
    /* Init Xfer states */
    hcdc->TxState =0;
 8001fce:	f8c6 5214 	str.w	r5, [r6, #532]	; 0x214
    hcdc->RxState =0;
 8001fd2:	f8c6 5218 	str.w	r5, [r6, #536]	; 0x218
       
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8001fd6:	b94f      	cbnz	r7, 8001fec <USBD_CDC_Init+0x76>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8001fd8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fdc:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 8001fe0:	2101      	movs	r1, #1
 8001fe2:	4620      	mov	r0, r4
 8001fe4:	f000 fe4a 	bl	8002c7c <USBD_LL_PrepareReceive>
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
  uint8_t ret = 0;
 8001fe8:	4638      	mov	r0, r7
 8001fea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8001fec:	2340      	movs	r3, #64	; 0x40
 8001fee:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 8001ff2:	2101      	movs	r1, #1
 8001ff4:	4620      	mov	r0, r4
 8001ff6:	f000 fe41 	bl	8002c7c <USBD_LL_PrepareReceive>
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
  uint8_t ret = 0;
 8001ffa:	4628      	mov	r0, r5
 8001ffc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
  
  if(pdev->pClassData == NULL)
  {
    ret = 1; 
 8001ffe:	2001      	movs	r0, #1
    }
    
    
  }
  return ret;
}
 8002000:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002002 <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;
  
  if(fops != NULL)
 8002002:	b119      	cbz	r1, 800200c <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData= fops;
 8002004:	f8c0 121c 	str.w	r1, [r0, #540]	; 0x21c
    ret = USBD_OK;    
 8002008:	2000      	movs	r0, #0
 800200a:	4770      	bx	lr
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;
 800200c:	2002      	movs	r0, #2
    pdev->pUserData= fops;
    ret = USBD_OK;    
  }
  
  return ret;
}
 800200e:	4770      	bx	lr

08002010 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002010:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;  
  
  return USBD_OK;  
}
 8002014:	2000      	movs	r0, #0
                                uint8_t  *pbuff,
                                uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  
  hcdc->TxBuffer = pbuff;
 8002016:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;  
 800201a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  
  return USBD_OK;  
}
 800201e:	4770      	bx	lr

08002020 <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  
  hcdc->RxBuffer = pbuff;
 8002020:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  return USBD_OK;
}
 8002024:	2000      	movs	r0, #0
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  
  hcdc->RxBuffer = pbuff;
 8002026:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
  
  return USBD_OK;
}
 800202a:	4770      	bx	lr

0800202c <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800202c:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
 8002030:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8002032:	b162      	cbz	r2, 800204e <USBD_CDC_ReceivePacket+0x22>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8002034:	7c04      	ldrb	r4, [r0, #16]
 8002036:	b914      	cbnz	r4, 800203e <USBD_CDC_ReceivePacket+0x12>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8002038:	f44f 7300 	mov.w	r3, #512	; 0x200
 800203c:	e000      	b.n	8002040 <USBD_CDC_ReceivePacket+0x14>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800203e:	2340      	movs	r3, #64	; 0x40
 8002040:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8002044:	2101      	movs	r1, #1
 8002046:	f000 fe19 	bl	8002c7c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800204a:	2000      	movs	r0, #0
 800204c:	bd10      	pop	{r4, pc}
  }
  else
  {
    return USBD_FAIL;
 800204e:	2002      	movs	r0, #2
  }
}
 8002050:	bd10      	pop	{r4, pc}

08002052 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8002052:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8002054:	b180      	cbz	r0, 8002078 <USBD_Init+0x26>
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8002056:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800205a:	b113      	cbz	r3, 8002062 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 800205c:	2300      	movs	r3, #0
 800205e:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8002062:	b109      	cbz	r1, 8002068 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8002064:	f8c0 1210 	str.w	r1, [r0, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8002068:	2301      	movs	r3, #1
 800206a:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  pdev->id = id;
 800206e:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8002070:	f000 fd48 	bl	8002b04 <USBD_LL_Init>
  
  return USBD_OK; 
 8002074:	2000      	movs	r0, #0
 8002076:	bd08      	pop	{r3, pc}
{
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
  {
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
 8002078:	2002      	movs	r0, #2
  pdev->id = id;
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
  
  return USBD_OK; 
}
 800207a:	bd08      	pop	{r3, pc}

0800207c <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 800207c:	b119      	cbz	r1, 8002086 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800207e:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    status = USBD_OK;
 8002082:	2000      	movs	r0, #0
 8002084:	4770      	bx	lr
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 8002086:	2002      	movs	r0, #2
  }
  
  return status;
}
 8002088:	4770      	bx	lr

0800208a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800208a:	b508      	push	{r3, lr}
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 800208c:	f000 fd82 	bl	8002b94 <USBD_LL_Start>
  
  return USBD_OK;  
}
 8002090:	2000      	movs	r0, #0
 8002092:	bd08      	pop	{r3, pc}

08002094 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8002094:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;
  
  if(pdev->pClass != NULL)
 8002096:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800209a:	b90b      	cbnz	r3, 80020a0 <USBD_SetClassConfig+0xc>
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800209c:	2002      	movs	r0, #2
 800209e:	bd08      	pop	{r3, pc}
  
  if(pdev->pClass != NULL)
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4798      	blx	r3
 80020a4:	2800      	cmp	r0, #0
 80020a6:	d1f9      	bne.n	800209c <USBD_SetClassConfig+0x8>
    {
      ret = USBD_OK;
    }
  }
  return ret; 
}
 80020a8:	bd08      	pop	{r3, pc}

080020aa <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80020aa:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 80020ac:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	4798      	blx	r3
  return USBD_OK;
}
 80020b4:	2000      	movs	r0, #0
 80020b6:	bd08      	pop	{r3, pc}

080020b8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80020b8:	b538      	push	{r3, r4, r5, lr}
 80020ba:	4604      	mov	r4, r0

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80020bc:	f500 7502 	add.w	r5, r0, #520	; 0x208
 80020c0:	4628      	mov	r0, r5
 80020c2:	f000 f8e2 	bl	800228a <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 80020c6:	2301      	movs	r3, #1
 80020c8:	f8c4 31f4 	str.w	r3, [r4, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
  
  switch (pdev->request.bmRequest & 0x1F) 
 80020cc:	f894 1208 	ldrb.w	r1, [r4, #520]	; 0x208
{

  USBD_ParseSetupRequest(&pdev->request, psetup);
  
  pdev->ep0_state = USBD_EP0_SETUP;
  pdev->ep0_data_len = pdev->request.wLength;
 80020d0:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 80020d4:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  
  switch (pdev->request.bmRequest & 0x1F) 
 80020d8:	f001 031f 	and.w	r3, r1, #31
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d00c      	beq.n	80020fa <USBD_LL_SetupStage+0x42>
 80020e0:	d306      	bcc.n	80020f0 <USBD_LL_SetupStage+0x38>
 80020e2:	2b02      	cmp	r3, #2
 80020e4:	d10e      	bne.n	8002104 <USBD_LL_SetupStage+0x4c>
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &pdev->request);
    break;
    
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
 80020e6:	4629      	mov	r1, r5
 80020e8:	4620      	mov	r0, r4
 80020ea:	f000 fa0f 	bl	800250c <USBD_StdEPReq>
    break;
 80020ee:	e00e      	b.n	800210e <USBD_LL_SetupStage+0x56>
  pdev->ep0_data_len = pdev->request.wLength;
  
  switch (pdev->request.bmRequest & 0x1F) 
  {
  case USB_REQ_RECIPIENT_DEVICE:   
    USBD_StdDevReq (pdev, &pdev->request);
 80020f0:	4629      	mov	r1, r5
 80020f2:	4620      	mov	r0, r4
 80020f4:	f000 f8e8 	bl	80022c8 <USBD_StdDevReq>
    break;
 80020f8:	e009      	b.n	800210e <USBD_LL_SetupStage+0x56>
    
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &pdev->request);
 80020fa:	4629      	mov	r1, r5
 80020fc:	4620      	mov	r0, r4
 80020fe:	f000 f9ed 	bl	80024dc <USBD_StdItfReq>
    break;
 8002102:	e004      	b.n	800210e <USBD_LL_SetupStage+0x56>
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
    break;
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 8002104:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8002108:	4620      	mov	r0, r4
 800210a:	f000 fd6f 	bl	8002bec <USBD_LL_StallEP>
    break;
  }  
  return USBD_OK;  
}
 800210e:	2000      	movs	r0, #0
 8002110:	bd38      	pop	{r3, r4, r5, pc}

08002112 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 8002112:	b538      	push	{r3, r4, r5, lr}
 8002114:	4604      	mov	r4, r0
 8002116:	4615      	mov	r5, r2
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 8002118:	bb09      	cbnz	r1, 800215e <USBD_LL_DataOutStage+0x4c>
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800211a:	f8d0 31f4 	ldr.w	r3, [r0, #500]	; 0x1f4
 800211e:	2b03      	cmp	r3, #3
 8002120:	d126      	bne.n	8002170 <USBD_LL_DataOutStage+0x5e>
    {
      if(pep->rem_length > pep->maxpacket)
 8002122:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
 8002126:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
 800212a:	4291      	cmp	r1, r2
 800212c:	d90a      	bls.n	8002144 <USBD_LL_DataOutStage+0x32>
      {
        pep->rem_length -=  pep->maxpacket;
 800212e:	1a8b      	subs	r3, r1, r2
       
        USBD_CtlContinueRx (pdev, 
 8002130:	429a      	cmp	r2, r3
 8002132:	bf28      	it	cs
 8002134:	461a      	movcs	r2, r3
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
    {
      if(pep->rem_length > pep->maxpacket)
      {
        pep->rem_length -=  pep->maxpacket;
 8002136:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
       
        USBD_CtlContinueRx (pdev, 
 800213a:	b292      	uxth	r2, r2
 800213c:	4629      	mov	r1, r5
 800213e:	f000 fa88 	bl	8002652 <USBD_CtlContinueRx>
 8002142:	e015      	b.n	8002170 <USBD_LL_DataOutStage+0x5e>
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8002144:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002148:	691b      	ldr	r3, [r3, #16]
 800214a:	b123      	cbz	r3, 8002156 <USBD_LL_DataOutStage+0x44>
 800214c:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002150:	2a03      	cmp	r2, #3
 8002152:	d100      	bne.n	8002156 <USBD_LL_DataOutStage+0x44>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
        {
          pdev->pClass->EP0_RxReady(pdev); 
 8002154:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8002156:	4620      	mov	r0, r4
 8002158:	f000 fa83 	bl	8002662 <USBD_CtlSendStatus>
 800215c:	e008      	b.n	8002170 <USBD_LL_DataOutStage+0x5e>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL)&&
 800215e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002162:	699b      	ldr	r3, [r3, #24]
 8002164:	b123      	cbz	r3, 8002170 <USBD_LL_DataOutStage+0x5e>
 8002166:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800216a:	2a03      	cmp	r2, #3
 800216c:	d100      	bne.n	8002170 <USBD_LL_DataOutStage+0x5e>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum); 
 800216e:	4798      	blx	r3
  }  
  return USBD_OK;
}
 8002170:	2000      	movs	r0, #0
 8002172:	bd38      	pop	{r3, r4, r5, pc}

08002174 <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 8002174:	b570      	push	{r4, r5, r6, lr}
 8002176:	4613      	mov	r3, r2
 8002178:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 800217a:	460e      	mov	r6, r1
 800217c:	2900      	cmp	r1, #0
 800217e:	d13c      	bne.n	80021fa <USBD_LL_DataInStage+0x86>
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8002180:	f8d0 21f4 	ldr.w	r2, [r0, #500]	; 0x1f4
 8002184:	2a02      	cmp	r2, #2
 8002186:	d130      	bne.n	80021ea <USBD_LL_DataInStage+0x76>
    {
      if(pep->rem_length > pep->maxpacket)
 8002188:	69c5      	ldr	r5, [r0, #28]
 800218a:	6a02      	ldr	r2, [r0, #32]
 800218c:	4295      	cmp	r5, r2
 800218e:	d907      	bls.n	80021a0 <USBD_LL_DataInStage+0x2c>
      {
        pep->rem_length -=  pep->maxpacket;
 8002190:	1aaa      	subs	r2, r5, r2
 8002192:	61c2      	str	r2, [r0, #28]
        
        USBD_CtlContinueSendData (pdev, 
 8002194:	4619      	mov	r1, r3
 8002196:	b292      	uxth	r2, r2
 8002198:	f000 fa44 	bl	8002624 <USBD_CtlContinueSendData>
                                  pdata, 
                                  pep->rem_length);
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 800219c:	4633      	mov	r3, r6
 800219e:	e011      	b.n	80021c4 <USBD_LL_DataInStage+0x50>
                                NULL,
                                0);  
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0) &&
 80021a0:	6983      	ldr	r3, [r0, #24]
 80021a2:	fbb3 f5f2 	udiv	r5, r3, r2
 80021a6:	fb02 3515 	mls	r5, r2, r5, r3
 80021aa:	b98d      	cbnz	r5, 80021d0 <USBD_LL_DataInStage+0x5c>
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d80f      	bhi.n	80021d0 <USBD_LL_DataInStage+0x5c>
           (pep->total_length >= pep->maxpacket) &&
 80021b0:	f8d0 21f8 	ldr.w	r2, [r0, #504]	; 0x1f8
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d20b      	bcs.n	80021d0 <USBD_LL_DataInStage+0x5c>
             (pep->total_length < pdev->ep0_data_len ))
        {
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
 80021b8:	462a      	mov	r2, r5
 80021ba:	f000 fa33 	bl	8002624 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 80021be:	462b      	mov	r3, r5
           (pep->total_length >= pep->maxpacket) &&
             (pep->total_length < pdev->ep0_data_len ))
        {
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
          pdev->ep0_data_len = 0;
 80021c0:	f8c4 51f8 	str.w	r5, [r4, #504]	; 0x1f8
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 80021c4:	461a      	mov	r2, r3
 80021c6:	4619      	mov	r1, r3
 80021c8:	4620      	mov	r0, r4
 80021ca:	f000 fd57 	bl	8002c7c <USBD_LL_PrepareReceive>
 80021ce:	e00c      	b.n	80021ea <USBD_LL_DataInStage+0x76>
                                NULL,
                                0);
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80021d0:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 80021d4:	68db      	ldr	r3, [r3, #12]
 80021d6:	b12b      	cbz	r3, 80021e4 <USBD_LL_DataInStage+0x70>
 80021d8:	f894 21fc 	ldrb.w	r2, [r4, #508]	; 0x1fc
 80021dc:	2a03      	cmp	r2, #3
 80021de:	d101      	bne.n	80021e4 <USBD_LL_DataInStage+0x70>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
          {
            pdev->pClass->EP0_TxSent(pdev); 
 80021e0:	4620      	mov	r0, r4
 80021e2:	4798      	blx	r3
          }          
          USBD_CtlReceiveStatus(pdev);
 80021e4:	4620      	mov	r0, r4
 80021e6:	f000 fa47 	bl	8002678 <USBD_CtlReceiveStatus>
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 80021ea:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d10c      	bne.n	800220c <USBD_LL_DataInStage+0x98>
    {
      USBD_RunTestMode(pdev); 
      pdev->dev_test_mode = 0;
 80021f2:	2300      	movs	r3, #0
 80021f4:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
 80021f8:	e008      	b.n	800220c <USBD_LL_DataInStage+0x98>
    }
  }
  else if((pdev->pClass->DataIn != NULL)&& 
 80021fa:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80021fe:	695b      	ldr	r3, [r3, #20]
 8002200:	b123      	cbz	r3, 800220c <USBD_LL_DataInStage+0x98>
 8002202:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002206:	2a03      	cmp	r2, #3
 8002208:	d100      	bne.n	800220c <USBD_LL_DataInStage+0x98>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
 800220a:	4798      	blx	r3
  }  
  return USBD_OK;
}
 800220c:	2000      	movs	r0, #0
 800220e:	bd70      	pop	{r4, r5, r6, pc}

08002210 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8002210:	b538      	push	{r3, r4, r5, lr}
 8002212:	4604      	mov	r4, r0
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8002214:	2200      	movs	r2, #0
 8002216:	4611      	mov	r1, r2
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8002218:	2540      	movs	r5, #64	; 0x40
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 800221a:	2340      	movs	r3, #64	; 0x40
 800221c:	f000 fcc8 	bl	8002bb0 <USBD_LL_OpenEP>
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 8002220:	462b      	mov	r3, r5
  USBD_LL_OpenEP(pdev,
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8002222:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 8002226:	2200      	movs	r2, #0
 8002228:	2180      	movs	r1, #128	; 0x80
 800222a:	4620      	mov	r0, r4
 800222c:	f000 fcc0 	bl	8002bb0 <USBD_LL_OpenEP>
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8002230:	2301      	movs	r3, #1
 8002232:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 8002236:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
  USBD_LL_OpenEP(pdev,
              0x80,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800223a:	6225      	str	r5, [r4, #32]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  
  if (pdev->pClassData) 
 800223c:	b12b      	cbz	r3, 800224a <USBD_LL_Reset+0x3a>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 800223e:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8002242:	7921      	ldrb	r1, [r4, #4]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	4620      	mov	r0, r4
 8002248:	4798      	blx	r3
 
  
  return USBD_OK;
}
 800224a:	2000      	movs	r0, #0
 800224c:	bd38      	pop	{r3, r4, r5, pc}

0800224e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 800224e:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 8002250:	2000      	movs	r0, #0
 8002252:	4770      	bx	lr

08002254 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8002254:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8002258:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800225c:	2304      	movs	r3, #4
 800225e:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 8002262:	2000      	movs	r0, #0
 8002264:	4770      	bx	lr

08002266 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;  
 8002266:	f890 31fd 	ldrb.w	r3, [r0, #509]	; 0x1fd
 800226a:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 800226e:	2000      	movs	r0, #0
 8002270:	4770      	bx	lr

08002272 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8002272:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8002274:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002278:	2a03      	cmp	r2, #3
 800227a:	d104      	bne.n	8002286 <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 800227c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002280:	69db      	ldr	r3, [r3, #28]
 8002282:	b103      	cbz	r3, 8002286 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 8002284:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 8002286:	2000      	movs	r0, #0
 8002288:	bd08      	pop	{r3, pc}

0800228a <USBD_ParseSetupRequest>:
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
  req->bmRequest     = *(uint8_t *)  (pdata);
 800228a:	780b      	ldrb	r3, [r1, #0]
 800228c:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800228e:	784b      	ldrb	r3, [r1, #1]
 8002290:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8002292:	78ca      	ldrb	r2, [r1, #3]
 8002294:	788b      	ldrb	r3, [r1, #2]
 8002296:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800229a:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800229c:	794a      	ldrb	r2, [r1, #5]
 800229e:	790b      	ldrb	r3, [r1, #4]
 80022a0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80022a4:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 80022a6:	79ca      	ldrb	r2, [r1, #7]
 80022a8:	798b      	ldrb	r3, [r1, #6]
 80022aa:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80022ae:	80c3      	strh	r3, [r0, #6]
 80022b0:	4770      	bx	lr

080022b2 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80022b2:	b510      	push	{r4, lr}
 80022b4:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80);
 80022b6:	2180      	movs	r1, #128	; 0x80
 80022b8:	f000 fc98 	bl	8002bec <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 80022bc:	4620      	mov	r0, r4
}
 80022be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80);
  USBD_LL_StallEP(pdev , 0);
 80022c2:	2100      	movs	r1, #0
 80022c4:	f000 bc92 	b.w	8002bec <USBD_LL_StallEP>

080022c8 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80022c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
  USBD_StatusTypeDef ret = USBD_OK;  
  
  switch (req->bRequest) 
 80022ca:	784b      	ldrb	r3, [r1, #1]
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80022cc:	4604      	mov	r4, r0
 80022ce:	460d      	mov	r5, r1
  USBD_StatusTypeDef ret = USBD_OK;  
  
  switch (req->bRequest) 
 80022d0:	2b09      	cmp	r3, #9
 80022d2:	f200 80f9 	bhi.w	80024c8 <USBD_StdDevReq+0x200>
 80022d6:	e8df f013 	tbh	[pc, r3, lsl #1]
 80022da:	00cb      	.short	0x00cb
 80022dc:	00f700e2 	.word	0x00f700e2
 80022e0:	00f700de 	.word	0x00f700de
 80022e4:	000a0075 	.word	0x000a0075
 80022e8:	00bb00f7 	.word	0x00bb00f7
 80022ec:	0091      	.short	0x0091
{
  uint16_t len;
  uint8_t *pbuf;
  
    
  switch (req->wValue >> 8)
 80022ee:	884b      	ldrh	r3, [r1, #2]
 80022f0:	0a1a      	lsrs	r2, r3, #8
 80022f2:	3a01      	subs	r2, #1
 80022f4:	2a06      	cmp	r2, #6
 80022f6:	f200 80e7 	bhi.w	80024c8 <USBD_StdDevReq+0x200>
 80022fa:	e8df f012 	tbh	[pc, r2, lsl #1]
 80022fe:	0007      	.short	0x0007
 8002300:	0017000b 	.word	0x0017000b
 8002304:	00e500e5 	.word	0x00e500e5
 8002308:	0047003c 	.word	0x0047003c
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif    
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800230c:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	e017      	b.n	8002344 <USBD_StdDevReq+0x7c>
    break;
    
  case USB_DESC_TYPE_CONFIGURATION:     
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 8002314:	7c02      	ldrb	r2, [r0, #16]
 8002316:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800231a:	b90a      	cbnz	r2, 8002320 <USBD_StdDevReq+0x58>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800231c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800231e:	e000      	b.n	8002322 <USBD_StdDevReq+0x5a>
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8002320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002322:	f10d 0006 	add.w	r0, sp, #6
 8002326:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8002328:	2302      	movs	r3, #2
 800232a:	e03a      	b.n	80023a2 <USBD_StdDevReq+0xda>
    }
    break;
    
  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800232c:	b2db      	uxtb	r3, r3
 800232e:	2b05      	cmp	r3, #5
 8002330:	f200 80ca 	bhi.w	80024c8 <USBD_StdDevReq+0x200>
 8002334:	e8df f003 	tbb	[pc, r3]
 8002338:	130f0b03 	.word	0x130f0b03
 800233c:	1b17      	.short	0x1b17
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 800233e:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f10d 0106 	add.w	r1, sp, #6
 8002348:	7c20      	ldrb	r0, [r4, #16]
 800234a:	4798      	blx	r3
 800234c:	e02a      	b.n	80023a4 <USBD_StdDevReq+0xdc>
      break;
      
    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800234e:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	e7f6      	b.n	8002344 <USBD_StdDevReq+0x7c>
      break;
      
    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8002356:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	e7f2      	b.n	8002344 <USBD_StdDevReq+0x7c>
      break;
      
    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800235e:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002362:	691b      	ldr	r3, [r3, #16]
 8002364:	e7ee      	b.n	8002344 <USBD_StdDevReq+0x7c>
      break;
      
    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8002366:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800236a:	695b      	ldr	r3, [r3, #20]
 800236c:	e7ea      	b.n	8002344 <USBD_StdDevReq+0x7c>
      break;
      
    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800236e:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002372:	699b      	ldr	r3, [r3, #24]
 8002374:	e7e6      	b.n	8002344 <USBD_StdDevReq+0x7c>
#endif   
    }
    break;
  case USB_DESC_TYPE_DEVICE_QUALIFIER:                   

    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8002376:	7c03      	ldrb	r3, [r0, #16]
 8002378:	2b00      	cmp	r3, #0
 800237a:	f040 80a5 	bne.w	80024c8 <USBD_StdDevReq+0x200>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800237e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002382:	f10d 0006 	add.w	r0, sp, #6
 8002386:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002388:	4798      	blx	r3
 800238a:	e00b      	b.n	80023a4 <USBD_StdDevReq+0xdc>
      USBD_CtlError(pdev , req);
      return;
    } 

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 800238c:	7c03      	ldrb	r3, [r0, #16]
 800238e:	2b00      	cmp	r3, #0
 8002390:	f040 809a 	bne.w	80024c8 <USBD_StdDevReq+0x200>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8002394:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002398:	f10d 0006 	add.w	r0, sp, #6
 800239c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239e:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80023a0:	2307      	movs	r3, #7
 80023a2:	7043      	strb	r3, [r0, #1]
  default: 
     USBD_CtlError(pdev , req);
    return;
  }
  
  if((len != 0)&& (req->wLength != 0))
 80023a4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80023a8:	2a00      	cmp	r2, #0
 80023aa:	f000 8091 	beq.w	80024d0 <USBD_StdDevReq+0x208>
 80023ae:	88eb      	ldrh	r3, [r5, #6]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	f000 808d 	beq.w	80024d0 <USBD_StdDevReq+0x208>
  {
    
    len = MIN(len , req->wLength);
 80023b6:	429a      	cmp	r2, r3
 80023b8:	bf28      	it	cs
 80023ba:	461a      	movcs	r2, r3
    
    USBD_CtlSendData (pdev, 
 80023bc:	4601      	mov	r1, r0
  }
  
  if((len != 0)&& (req->wLength != 0))
  {
    
    len = MIN(len , req->wLength);
 80023be:	f8ad 2006 	strh.w	r2, [sp, #6]
 80023c2:	e064      	b.n	800248e <USBD_StdDevReq+0x1c6>
static void USBD_SetAddress(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 80023c4:	888b      	ldrh	r3, [r1, #4]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d17e      	bne.n	80024c8 <USBD_StdDevReq+0x200>
 80023ca:	88cb      	ldrh	r3, [r1, #6]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d17b      	bne.n	80024c8 <USBD_StdDevReq+0x200>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80023d0:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
{
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 80023d4:	788e      	ldrb	r6, [r1, #2]
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80023d6:	2b03      	cmp	r3, #3
{
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 80023d8:	f006 067f 	and.w	r6, r6, #127	; 0x7f
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80023dc:	d074      	beq.n	80024c8 <USBD_StdDevReq+0x200>
    {
      USBD_CtlError(pdev , req);
    } 
    else 
    {
      pdev->dev_address = dev_addr;
 80023de:	f880 61fe 	strb.w	r6, [r0, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 80023e2:	4631      	mov	r1, r6
 80023e4:	f000 fc2e 	bl	8002c44 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 80023e8:	4620      	mov	r0, r4
 80023ea:	f000 f93a 	bl	8002662 <USBD_CtlSendStatus>
      
      if (dev_addr != 0) 
 80023ee:	b10e      	cbz	r6, 80023f4 <USBD_StdDevReq+0x12c>
      {
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 80023f0:	2302      	movs	r3, #2
 80023f2:	e000      	b.n	80023f6 <USBD_StdDevReq+0x12e>
      } 
      else 
      {
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 80023f4:	2301      	movs	r3, #1
 80023f6:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
 80023fa:	e069      	b.n	80024d0 <USBD_StdDevReq+0x208>
                           USBD_SetupReqTypedef *req)
{
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 80023fc:	7889      	ldrb	r1, [r1, #2]
 80023fe:	4e36      	ldr	r6, [pc, #216]	; (80024d8 <USBD_StdDevReq+0x210>)
  
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8002400:	2901      	cmp	r1, #1
                           USBD_SetupReqTypedef *req)
{
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 8002402:	7031      	strb	r1, [r6, #0]
  
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8002404:	d860      	bhi.n	80024c8 <USBD_StdDevReq+0x200>
  {            
     USBD_CtlError(pdev , req);                              
  } 
  else 
  {
    switch (pdev->dev_state) 
 8002406:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800240a:	2b02      	cmp	r3, #2
 800240c:	d002      	beq.n	8002414 <USBD_StdDevReq+0x14c>
 800240e:	2b03      	cmp	r3, #3
 8002410:	d008      	beq.n	8002424 <USBD_StdDevReq+0x15c>
 8002412:	e059      	b.n	80024c8 <USBD_StdDevReq+0x200>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx) 
 8002414:	2900      	cmp	r1, #0
 8002416:	d053      	beq.n	80024c0 <USBD_StdDevReq+0x1f8>
      {                                			   							   							   				
        pdev->dev_config = cfgidx;
 8002418:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800241a:	2303      	movs	r3, #3
    switch (pdev->dev_state) 
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx) 
      {                                			   							   							   				
        pdev->dev_config = cfgidx;
 800241c:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800241e:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
 8002422:	e00f      	b.n	8002444 <USBD_StdDevReq+0x17c>
         USBD_CtlSendStatus(pdev);
      }
      break;
      
    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0) 
 8002424:	b931      	cbnz	r1, 8002434 <USBD_StdDevReq+0x16c>
      {                           
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8002426:	2302      	movs	r3, #2
 8002428:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 800242c:	6041      	str	r1, [r0, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 800242e:	f7ff fe3c 	bl	80020aa <USBD_ClrClassConfig>
 8002432:	e045      	b.n	80024c0 <USBD_StdDevReq+0x1f8>
        USBD_CtlSendStatus(pdev);
        
      } 
      else  if (cfgidx != pdev->dev_config) 
 8002434:	6841      	ldr	r1, [r0, #4]
 8002436:	2901      	cmp	r1, #1
 8002438:	d042      	beq.n	80024c0 <USBD_StdDevReq+0x1f8>
      {
        /* Clear old configuration */
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 800243a:	b2c9      	uxtb	r1, r1
 800243c:	f7ff fe35 	bl	80020aa <USBD_ClrClassConfig>
        
        /* set new configuration */
        pdev->dev_config = cfgidx;
 8002440:	7831      	ldrb	r1, [r6, #0]
 8002442:	6061      	str	r1, [r4, #4]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8002444:	4620      	mov	r0, r4
 8002446:	f7ff fe25 	bl	8002094 <USBD_SetClassConfig>
 800244a:	2802      	cmp	r0, #2
 800244c:	d138      	bne.n	80024c0 <USBD_StdDevReq+0x1f8>
 800244e:	e03b      	b.n	80024c8 <USBD_StdDevReq+0x200>
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{

  if (req->wLength != 1) 
 8002450:	88ca      	ldrh	r2, [r1, #6]
 8002452:	2a01      	cmp	r2, #1
 8002454:	d138      	bne.n	80024c8 <USBD_StdDevReq+0x200>
  {                   
     USBD_CtlError(pdev , req);
  }
  else 
  {
    switch (pdev->dev_state )  
 8002456:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800245a:	2b02      	cmp	r3, #2
 800245c:	d003      	beq.n	8002466 <USBD_StdDevReq+0x19e>
 800245e:	2b03      	cmp	r3, #3
 8002460:	d132      	bne.n	80024c8 <USBD_StdDevReq+0x200>
                        1);
      break;
      
    case USBD_STATE_CONFIGURED:   
      
      USBD_CtlSendData (pdev, 
 8002462:	1d01      	adds	r1, r0, #4
 8002464:	e013      	b.n	800248e <USBD_StdDevReq+0x1c6>
  else 
  {
    switch (pdev->dev_state )  
    {
    case USBD_STATE_ADDRESSED:                     
      pdev->dev_default_config = 0;
 8002466:	4601      	mov	r1, r0
 8002468:	2300      	movs	r3, #0
 800246a:	f841 3f08 	str.w	r3, [r1, #8]!
 800246e:	e00e      	b.n	800248e <USBD_StdDevReq+0x1c6>
static void USBD_GetStatus(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
  
    
  switch (pdev->dev_state) 
 8002470:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8002474:	3b02      	subs	r3, #2
 8002476:	2b01      	cmp	r3, #1
 8002478:	d826      	bhi.n	80024c8 <USBD_StdDevReq+0x200>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    
#if ( USBD_SELF_POWERED == 1)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 800247a:	2301      	movs	r3, #1
 800247c:	60c3      	str	r3, [r0, #12]
#else
    pdev->dev_config_status = 0;                                   
#endif
                      
    if (pdev->dev_remote_wakeup) 
 800247e:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 8002482:	b10b      	cbz	r3, 8002488 <USBD_StdDevReq+0x1c0>
    {
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 8002484:	2303      	movs	r3, #3
 8002486:	60c3      	str	r3, [r0, #12]
    }
    
    USBD_CtlSendData (pdev, 
 8002488:	2202      	movs	r2, #2
 800248a:	f104 010c 	add.w	r1, r4, #12
 800248e:	4620      	mov	r0, r4
 8002490:	f000 f8bb 	bl	800260a <USBD_CtlSendData>
 8002494:	e01c      	b.n	80024d0 <USBD_StdDevReq+0x208>
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8002496:	884b      	ldrh	r3, [r1, #2]
 8002498:	2b01      	cmp	r3, #1
 800249a:	d119      	bne.n	80024d0 <USBD_StdDevReq+0x208>
 800249c:	e008      	b.n	80024b0 <USBD_StdDevReq+0x1e8>
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
  switch (pdev->dev_state)
 800249e:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80024a2:	3b02      	subs	r3, #2
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d80f      	bhi.n	80024c8 <USBD_StdDevReq+0x200>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 80024a8:	884b      	ldrh	r3, [r1, #2]
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d110      	bne.n	80024d0 <USBD_StdDevReq+0x208>
    {
      pdev->dev_remote_wakeup = 0; 
 80024ae:	2300      	movs	r3, #0
 80024b0:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 80024b4:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 80024b8:	4629      	mov	r1, r5
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	4620      	mov	r0, r4
 80024be:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 80024c0:	4620      	mov	r0, r4
 80024c2:	f000 f8ce 	bl	8002662 <USBD_CtlSendStatus>
 80024c6:	e003      	b.n	80024d0 <USBD_StdDevReq+0x208>
  case USB_REQ_CLEAR_FEATURE:                                   
    USBD_ClrFeature (pdev , req);
    break;
    
  default:  
    USBD_CtlError(pdev , req);
 80024c8:	4629      	mov	r1, r5
 80024ca:	4620      	mov	r0, r4
 80024cc:	f7ff fef1 	bl	80022b2 <USBD_CtlError>
    break;
  }
  
  return ret;
}
 80024d0:	2000      	movs	r0, #0
 80024d2:	b002      	add	sp, #8
 80024d4:	bd70      	pop	{r4, r5, r6, pc}
 80024d6:	bf00      	nop
 80024d8:	2000017a 	.word	0x2000017a

080024dc <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80024dc:	b538      	push	{r3, r4, r5, lr}
  USBD_StatusTypeDef ret = USBD_OK; 
  
  switch (pdev->dev_state) 
 80024de:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80024e2:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret = USBD_OK; 
  
  switch (pdev->dev_state) 
 80024e4:	2b03      	cmp	r3, #3
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80024e6:	460d      	mov	r5, r1
  USBD_StatusTypeDef ret = USBD_OK; 
  
  switch (pdev->dev_state) 
 80024e8:	d10c      	bne.n	8002504 <USBD_StdItfReq+0x28>
  {
  case USBD_STATE_CONFIGURED:
    
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 80024ea:	790b      	ldrb	r3, [r1, #4]
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d809      	bhi.n	8002504 <USBD_StdItfReq+0x28>
    {
      pdev->pClass->Setup (pdev, req); 
 80024f0:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	4798      	blx	r3
      
      if((req->wLength == 0)&& (ret == USBD_OK))
 80024f8:	88eb      	ldrh	r3, [r5, #6]
 80024fa:	b92b      	cbnz	r3, 8002508 <USBD_StdItfReq+0x2c>
      {
         USBD_CtlSendStatus(pdev);
 80024fc:	4620      	mov	r0, r4
 80024fe:	f000 f8b0 	bl	8002662 <USBD_CtlSendStatus>
 8002502:	e001      	b.n	8002508 <USBD_StdItfReq+0x2c>
       USBD_CtlError(pdev , req);
    }
    break;
    
  default:
     USBD_CtlError(pdev , req);
 8002504:	f7ff fed5 	bl	80022b2 <USBD_CtlError>
    break;
  }
  return USBD_OK;
}
 8002508:	2000      	movs	r0, #0
 800250a:	bd38      	pop	{r3, r4, r5, pc}

0800250c <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800250c:	b570      	push	{r4, r5, r6, lr}
  USBD_StatusTypeDef ret = USBD_OK; 
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
  
  /* Check if it is a class request */
  if ((req->bmRequest & 0x60) == 0x20)
 800250e:	780a      	ldrb	r2, [r1, #0]
{
  
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK; 
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
 8002510:	888e      	ldrh	r6, [r1, #4]
  
  /* Check if it is a class request */
  if ((req->bmRequest & 0x60) == 0x20)
 8002512:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8002516:	2a20      	cmp	r2, #32
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8002518:	4604      	mov	r4, r0
 800251a:	460d      	mov	r5, r1
  
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK; 
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
 800251c:	b2f3      	uxtb	r3, r6
  
  /* Check if it is a class request */
  if ((req->bmRequest & 0x60) == 0x20)
 800251e:	d104      	bne.n	800252a <USBD_StdEPReq+0x1e>
  {
    pdev->pClass->Setup (pdev, req);
 8002520:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	4798      	blx	r3
    
    return USBD_OK;
 8002528:	e051      	b.n	80025ce <USBD_StdEPReq+0xc2>
  }
  
  switch (req->bRequest) 
 800252a:	784a      	ldrb	r2, [r1, #1]
 800252c:	2a01      	cmp	r2, #1
 800252e:	d010      	beq.n	8002552 <USBD_StdEPReq+0x46>
 8002530:	d326      	bcc.n	8002580 <USBD_StdEPReq+0x74>
 8002532:	2a03      	cmp	r2, #3
 8002534:	d14b      	bne.n	80025ce <USBD_StdEPReq+0xc2>
  {
    
  case USB_REQ_SET_FEATURE :
    
    switch (pdev->dev_state) 
 8002536:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800253a:	2a02      	cmp	r2, #2
 800253c:	d027      	beq.n	800258e <USBD_StdEPReq+0x82>
 800253e:	2a03      	cmp	r2, #3
 8002540:	d143      	bne.n	80025ca <USBD_StdEPReq+0xbe>
        USBD_LL_StallEP(pdev , ep_addr);
      }
      break;	
      
    case USBD_STATE_CONFIGURED:   
      if (req->wValue == USB_FEATURE_EP_HALT)
 8002542:	884a      	ldrh	r2, [r1, #2]
 8002544:	b992      	cbnz	r2, 800256c <USBD_StdEPReq+0x60>
      {
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8002546:	065e      	lsls	r6, r3, #25
 8002548:	d010      	beq.n	800256c <USBD_StdEPReq+0x60>
        { 
          USBD_LL_StallEP(pdev , ep_addr);
 800254a:	4619      	mov	r1, r3
 800254c:	f000 fb4e 	bl	8002bec <USBD_LL_StallEP>
 8002550:	e00c      	b.n	800256c <USBD_StdEPReq+0x60>
    }
    break;
    
  case USB_REQ_CLEAR_FEATURE :
    
    switch (pdev->dev_state) 
 8002552:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002556:	2a02      	cmp	r2, #2
 8002558:	d019      	beq.n	800258e <USBD_StdEPReq+0x82>
 800255a:	2a03      	cmp	r2, #3
 800255c:	d135      	bne.n	80025ca <USBD_StdEPReq+0xbe>
        USBD_LL_StallEP(pdev , ep_addr);
      }
      break;	
      
    case USBD_STATE_CONFIGURED:   
      if (req->wValue == USB_FEATURE_EP_HALT)
 800255e:	884a      	ldrh	r2, [r1, #2]
 8002560:	bbaa      	cbnz	r2, 80025ce <USBD_StdEPReq+0xc2>
      {
        if ((ep_addr & 0x7F) != 0x00) 
 8002562:	0659      	lsls	r1, r3, #25
 8002564:	d008      	beq.n	8002578 <USBD_StdEPReq+0x6c>
        {        
          USBD_LL_ClearStallEP(pdev , ep_addr);
 8002566:	4619      	mov	r1, r3
 8002568:	f000 fb4e 	bl	8002c08 <USBD_LL_ClearStallEP>
          pdev->pClass->Setup (pdev, req);
 800256c:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8002570:	4629      	mov	r1, r5
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	4620      	mov	r0, r4
 8002576:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8002578:	4620      	mov	r0, r4
 800257a:	f000 f872 	bl	8002662 <USBD_CtlSendStatus>
 800257e:	e026      	b.n	80025ce <USBD_StdEPReq+0xc2>
      break;    
    }
    break;
    
  case USB_REQ_GET_STATUS:                  
    switch (pdev->dev_state) 
 8002580:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002584:	2a02      	cmp	r2, #2
 8002586:	d002      	beq.n	800258e <USBD_StdEPReq+0x82>
 8002588:	2a03      	cmp	r2, #3
 800258a:	d006      	beq.n	800259a <USBD_StdEPReq+0x8e>
 800258c:	e01d      	b.n	80025ca <USBD_StdEPReq+0xbe>
    {
    case USBD_STATE_ADDRESSED:          
      if ((ep_addr & 0x7F) != 0x00) 
 800258e:	065a      	lsls	r2, r3, #25
 8002590:	d01d      	beq.n	80025ce <USBD_StdEPReq+0xc2>
      {
        USBD_LL_StallEP(pdev , ep_addr);
 8002592:	4619      	mov	r1, r3
 8002594:	f000 fb2a 	bl	8002bec <USBD_LL_StallEP>
 8002598:	e019      	b.n	80025ce <USBD_StdEPReq+0xc2>
 800259a:	f003 057f 	and.w	r5, r3, #127	; 0x7f
      }
      break;	
      
    case USBD_STATE_CONFIGURED:
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 800259e:	f016 0f80 	tst.w	r6, #128	; 0x80
 80025a2:	eb00 1505 	add.w	r5, r0, r5, lsl #4
                                         &pdev->ep_out[ep_addr & 0x7F];
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 80025a6:	4619      	mov	r1, r3
        USBD_LL_StallEP(pdev , ep_addr);
      }
      break;	
      
    case USBD_STATE_CONFIGURED:
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 80025a8:	bf14      	ite	ne
 80025aa:	3514      	addne	r5, #20
 80025ac:	f505 7582 	addeq.w	r5, r5, #260	; 0x104
                                         &pdev->ep_out[ep_addr & 0x7F];
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 80025b0:	f000 fb38 	bl	8002c24 <USBD_LL_IsStallEP>
 80025b4:	b110      	cbz	r0, 80025bc <USBD_StdEPReq+0xb0>
      {
        pep->status = 0x0001;     
 80025b6:	2301      	movs	r3, #1
 80025b8:	602b      	str	r3, [r5, #0]
 80025ba:	e000      	b.n	80025be <USBD_StdEPReq+0xb2>
      }
      else
      {
        pep->status = 0x0000;  
 80025bc:	6028      	str	r0, [r5, #0]
      }
      
      USBD_CtlSendData (pdev,
 80025be:	2202      	movs	r2, #2
 80025c0:	4629      	mov	r1, r5
 80025c2:	4620      	mov	r0, r4
 80025c4:	f000 f821 	bl	800260a <USBD_CtlSendData>
                        (uint8_t *)&pep->status,
                        2);
      break;
 80025c8:	e001      	b.n	80025ce <USBD_StdEPReq+0xc2>
      
    default:                         
      USBD_CtlError(pdev , req);
 80025ca:	f7ff fe72 	bl	80022b2 <USBD_CtlError>
    
  default:
    break;
  }
  return ret;
}
 80025ce:	2000      	movs	r0, #0
 80025d0:	bd70      	pop	{r4, r5, r6, pc}

080025d2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80025d2:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0;
  
  if (desc != NULL) 
 80025d4:	b1c0      	cbz	r0, 8002608 <USBD_GetString+0x36>
 80025d6:	4605      	mov	r5, r0
 80025d8:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;

    while (*buf != '\0') 
 80025da:	f815 4b01 	ldrb.w	r4, [r5], #1
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	2c00      	cmp	r4, #0
 80025e2:	d1f9      	bne.n	80025d8 <USBD_GetString+0x6>
{
  uint8_t idx = 0;
  
  if (desc != NULL) 
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
 80025e4:	005b      	lsls	r3, r3, #1
 80025e6:	3302      	adds	r3, #2
 80025e8:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *len;
 80025ea:	700b      	strb	r3, [r1, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 80025ec:	2303      	movs	r3, #3
 80025ee:	704b      	strb	r3, [r1, #1]
 80025f0:	3801      	subs	r0, #1
 80025f2:	2302      	movs	r3, #2
    
    while (*desc != '\0') 
 80025f4:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80025f8:	b135      	cbz	r5, 8002608 <USBD_GetString+0x36>
    {
      unicode[idx++] = *desc++;
 80025fa:	1c5a      	adds	r2, r3, #1
 80025fc:	54cd      	strb	r5, [r1, r3]
 80025fe:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0x00;
 8002600:	3302      	adds	r3, #2
 8002602:	b2db      	uxtb	r3, r3
 8002604:	548c      	strb	r4, [r1, r2]
 8002606:	e7f5      	b.n	80025f4 <USBD_GetString+0x22>
 8002608:	bd30      	pop	{r4, r5, pc}

0800260a <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 800260a:	4613      	mov	r3, r2
 800260c:	b510      	push	{r4, lr}
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 800260e:	2202      	movs	r2, #2
 8002610:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 8002614:	6183      	str	r3, [r0, #24]
  pdev->ep_in[0].rem_length   = len;
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8002616:	460a      	mov	r2, r1
                               uint16_t len)
{
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;
 8002618:	61c3      	str	r3, [r0, #28]
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 800261a:	2100      	movs	r1, #0
 800261c:	f000 fb20 	bl	8002c60 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8002620:	2000      	movs	r0, #0
 8002622:	bd10      	pop	{r4, pc}

08002624 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 8002624:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 8002626:	4613      	mov	r3, r2
 8002628:	460a      	mov	r2, r1
 800262a:	2100      	movs	r1, #0
 800262c:	f000 fb18 	bl	8002c60 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8002630:	2000      	movs	r0, #0
 8002632:	bd08      	pop	{r3, pc}

08002634 <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 8002634:	4613      	mov	r3, r2
 8002636:	b510      	push	{r4, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 8002638:	2203      	movs	r2, #3
 800263a:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
 800263e:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
  pdev->ep_out[0].rem_length   = len;
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 8002642:	460a      	mov	r2, r1
                                  uint16_t len)
{
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length   = len;
 8002644:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 8002648:	2100      	movs	r1, #0
 800264a:	f000 fb17 	bl	8002c7c <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
}
 800264e:	2000      	movs	r0, #0
 8002650:	bd10      	pop	{r4, pc}

08002652 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 8002652:	b508      	push	{r3, lr}

  USBD_LL_PrepareReceive (pdev,
 8002654:	4613      	mov	r3, r2
 8002656:	460a      	mov	r2, r1
 8002658:	2100      	movs	r1, #0
 800265a:	f000 fb0f 	bl	8002c7c <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
}
 800265e:	2000      	movs	r0, #0
 8002660:	bd08      	pop	{r3, pc}

08002662 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 8002662:	b508      	push	{r3, lr}

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8002664:	2304      	movs	r3, #4
 8002666:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 800266a:	2300      	movs	r3, #0
 800266c:	461a      	mov	r2, r3
 800266e:	4619      	mov	r1, r3
 8002670:	f000 faf6 	bl	8002c60 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8002674:	2000      	movs	r0, #0
 8002676:	bd08      	pop	{r3, pc}

08002678 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 8002678:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 800267a:	2305      	movs	r3, #5
 800267c:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 8002680:	2300      	movs	r3, #0
 8002682:	461a      	mov	r2, r3
 8002684:	4619      	mov	r1, r3
 8002686:	f000 faf9 	bl	8002c7c <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
}
 800268a:	2000      	movs	r0, #0
 800268c:	bd08      	pop	{r3, pc}

0800268e <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 800268e:	b510      	push	{r4, lr}
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002690:	f44f 3380 	mov.w	r3, #65536	; 0x10000
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8002694:	b094      	sub	sp, #80	; 0x50
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002696:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002698:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800269a:	2100      	movs	r1, #0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800269c:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800269e:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026a0:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80026a2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80026a6:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80026a8:	910c      	str	r1, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80026aa:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80026ac:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80026ae:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026b0:	f7fe fad2 	bl	8000c58 <HAL_RCC_OscConfig>
 80026b4:	b100      	cbz	r0, 80026b8 <SystemClock_Config+0x2a>
 80026b6:	e7fe      	b.n	80026b6 <SystemClock_Config+0x28>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80026b8:	230f      	movs	r3, #15
 80026ba:	9305      	str	r3, [sp, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80026bc:	9007      	str	r0, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80026be:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80026c2:	9009      	str	r0, [sp, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80026c4:	4621      	mov	r1, r4
 80026c6:	a805      	add	r0, sp, #20

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80026c8:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80026ca:	9308      	str	r3, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80026cc:	f7fe fd6c 	bl	80011a8 <HAL_RCC_ClockConfig>
 80026d0:	b100      	cbz	r0, 80026d4 <SystemClock_Config+0x46>
 80026d2:	e7fe      	b.n	80026d2 <SystemClock_Config+0x44>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80026d4:	2310      	movs	r3, #16
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80026d6:	9004      	str	r0, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026d8:	a801      	add	r0, sp, #4
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80026da:	9301      	str	r3, [sp, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026dc:	f7fe fe1c 	bl	8001318 <HAL_RCCEx_PeriphCLKConfig>
 80026e0:	4604      	mov	r4, r0
 80026e2:	b100      	cbz	r0, 80026e6 <SystemClock_Config+0x58>
 80026e4:	e7fe      	b.n	80026e4 <SystemClock_Config+0x56>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80026e6:	f7fe fe11 	bl	800130c <HAL_RCC_GetHCLKFreq>
 80026ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026ee:	fbb0 f0f3 	udiv	r0, r0, r3
 80026f2:	f7fd fdbd 	bl	8000270 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80026f6:	2004      	movs	r0, #4
 80026f8:	f7fd fdd0 	bl	800029c <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80026fc:	4622      	mov	r2, r4
 80026fe:	4621      	mov	r1, r4
 8002700:	f04f 30ff 	mov.w	r0, #4294967295
 8002704:	f7fd fd74 	bl	80001f0 <HAL_NVIC_SetPriority>
}
 8002708:	b014      	add	sp, #80	; 0x50
 800270a:	bd10      	pop	{r4, pc}

0800270c <main>:
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

int main(void)
{
 800270c:	b530      	push	{r4, r5, lr}
 800270e:	b089      	sub	sp, #36	; 0x24
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002710:	f7fd fd2e 	bl	8000170 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002714:	f7ff ffbb 	bl	800268e <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002718:	4b51      	ldr	r3, [pc, #324]	; (8002860 <main+0x154>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800271a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800271e:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002720:	4850      	ldr	r0, [pc, #320]	; (8002864 <main+0x158>)
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002722:	f042 0210 	orr.w	r2, r2, #16
 8002726:	619a      	str	r2, [r3, #24]
 8002728:	699a      	ldr	r2, [r3, #24]
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800272a:	2501      	movs	r5, #1
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800272c:	f002 0210 	and.w	r2, r2, #16
 8002730:	9201      	str	r2, [sp, #4]
 8002732:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002734:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : NRF_IRQ_Pin */
  GPIO_InitStruct.Pin = NRF_IRQ_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002736:	2400      	movs	r4, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002738:	f042 0220 	orr.w	r2, r2, #32
 800273c:	619a      	str	r2, [r3, #24]
 800273e:	699a      	ldr	r2, [r3, #24]
 8002740:	f002 0220 	and.w	r2, r2, #32
 8002744:	9202      	str	r2, [sp, #8]
 8002746:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002748:	699a      	ldr	r2, [r3, #24]
 800274a:	f042 0204 	orr.w	r2, r2, #4
 800274e:	619a      	str	r2, [r3, #24]
 8002750:	699b      	ldr	r3, [r3, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002752:	2200      	movs	r2, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002754:	f003 0304 	and.w	r3, r3, #4
 8002758:	9303      	str	r3, [sp, #12]
 800275a:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800275c:	f7fd fe88 	bl	8000470 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 8002760:	2200      	movs	r2, #0
 8002762:	2108      	movs	r1, #8
 8002764:	4840      	ldr	r0, [pc, #256]	; (8002868 <main+0x15c>)
 8002766:	f7fd fe83 	bl	8000470 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800276a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800276e:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002770:	a904      	add	r1, sp, #16
  HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002772:	2302      	movs	r3, #2
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002774:	483b      	ldr	r0, [pc, #236]	; (8002864 <main+0x158>)
  HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002776:	9307      	str	r3, [sp, #28]
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002778:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800277a:	f7fd fda1 	bl	80002c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF_IRQ_Pin */
  GPIO_InitStruct.Pin = NRF_IRQ_Pin;
 800277e:	2304      	movs	r3, #4
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(NRF_IRQ_GPIO_Port, &GPIO_InitStruct);
 8002780:	a904      	add	r1, sp, #16
 8002782:	4839      	ldr	r0, [pc, #228]	; (8002868 <main+0x15c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : NRF_IRQ_Pin */
  GPIO_InitStruct.Pin = NRF_IRQ_Pin;
 8002784:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002786:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002788:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(NRF_IRQ_GPIO_Port, &GPIO_InitStruct);
 800278a:	f7fd fd99 	bl	80002c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF_CE_Pin */
  GPIO_InitStruct.Pin = NRF_CE_Pin;
 800278e:	2308      	movs	r3, #8
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
  HAL_GPIO_Init(NRF_CE_GPIO_Port, &GPIO_InitStruct);
 8002790:	4835      	ldr	r0, [pc, #212]	; (8002868 <main+0x15c>)
 8002792:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(NRF_IRQ_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : NRF_CE_Pin */
  GPIO_InitStruct.Pin = NRF_CE_Pin;
 8002794:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002796:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002798:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(NRF_CE_GPIO_Port, &GPIO_InitStruct);
 800279a:	f7fd fd91 	bl	80002c0 <HAL_GPIO_Init>

/* SPI1 init function */
static void MX_SPI1_Init(void)
{

  hspi1.Instance = SPI1;
 800279e:	4833      	ldr	r0, [pc, #204]	; (800286c <main+0x160>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80027a0:	4a33      	ldr	r2, [pc, #204]	; (8002870 <main+0x164>)
 80027a2:	f44f 7382 	mov.w	r3, #260	; 0x104
 80027a6:	e880 000c 	stmia.w	r0, {r2, r3}
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80027aa:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80027ae:	6183      	str	r3, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80027b0:	2320      	movs	r3, #32
 80027b2:	61c3      	str	r3, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 10;
 80027b4:	230a      	movs	r3, #10
static void MX_SPI1_Init(void)
{

  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80027b6:	6084      	str	r4, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80027b8:	60c4      	str	r4, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80027ba:	6104      	str	r4, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80027bc:	6144      	str	r4, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80027be:	6204      	str	r4, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80027c0:	6244      	str	r4, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027c2:	6284      	str	r4, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80027c4:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80027c6:	f7fe ff29 	bl	800161c <HAL_SPI_Init>
 80027ca:	b100      	cbz	r0, 80027ce <main+0xc2>
 80027cc:	e7fe      	b.n	80027cc <main+0xc0>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_SPI1_Init();
  MX_USB_DEVICE_Init();
 80027ce:	f000 f8ff 	bl	80029d0 <MX_USB_DEVICE_Init>
  uint8_t str[20];


  while (1)
  {
	  buff[0]=0xAA;
 80027d2:	23aa      	movs	r3, #170	; 0xaa
 80027d4:	f88d 3010 	strb.w	r3, [sp, #16]
	  buff[1]=0x11;
	  HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 80027d8:	2200      	movs	r2, #0


  while (1)
  {
	  buff[0]=0xAA;
	  buff[1]=0x11;
 80027da:	2311      	movs	r3, #17
	  HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 80027dc:	2108      	movs	r1, #8
 80027de:	4822      	ldr	r0, [pc, #136]	; (8002868 <main+0x15c>)


  while (1)
  {
	  buff[0]=0xAA;
	  buff[1]=0x11;
 80027e0:	f88d 3011 	strb.w	r3, [sp, #17]
	  HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 80027e4:	f7fd fe44 	bl	8000470 <HAL_GPIO_WritePin>
	  if(HAL_SPI_Transmit(&hspi1, buff, 2, SPI_MAX_TIMEOUT)==HAL_OK){
 80027e8:	2202      	movs	r2, #2
 80027ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027ee:	a904      	add	r1, sp, #16
 80027f0:	481e      	ldr	r0, [pc, #120]	; (800286c <main+0x160>)
 80027f2:	f7fe fe64 	bl	80014be <HAL_SPI_Transmit>
 80027f6:	4602      	mov	r2, r0
 80027f8:	b920      	cbnz	r0, 8002804 <main+0xf8>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80027fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80027fe:	4819      	ldr	r0, [pc, #100]	; (8002864 <main+0x158>)
 8002800:	f7fd fe36 	bl	8000470 <HAL_GPIO_WritePin>
	  }
	  HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_SET);
 8002804:	2201      	movs	r2, #1
 8002806:	2108      	movs	r1, #8
 8002808:	4817      	ldr	r0, [pc, #92]	; (8002868 <main+0x15c>)
 800280a:	f7fd fe31 	bl	8000470 <HAL_GPIO_WritePin>

	  HAL_Delay(200);
 800280e:	20c8      	movs	r0, #200	; 0xc8
 8002810:	f7fd fcce 	bl	80001b0 <HAL_Delay>


	  buff[0]=0x10;
 8002814:	2310      	movs	r3, #16
 8002816:	f88d 3010 	strb.w	r3, [sp, #16]
	  buff[1]=0x22;
	  HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 800281a:	2200      	movs	r2, #0

	  HAL_Delay(200);


	  buff[0]=0x10;
	  buff[1]=0x22;
 800281c:	2322      	movs	r3, #34	; 0x22
	  HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 800281e:	2108      	movs	r1, #8
 8002820:	4811      	ldr	r0, [pc, #68]	; (8002868 <main+0x15c>)

	  HAL_Delay(200);


	  buff[0]=0x10;
	  buff[1]=0x22;
 8002822:	f88d 3011 	strb.w	r3, [sp, #17]
	  HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 8002826:	f7fd fe23 	bl	8000470 <HAL_GPIO_WritePin>

	  if(HAL_SPI_Transmit(&hspi1, buff, 2, SPI_MAX_TIMEOUT)==HAL_OK){
 800282a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800282e:	2202      	movs	r2, #2
 8002830:	a904      	add	r1, sp, #16
 8002832:	480e      	ldr	r0, [pc, #56]	; (800286c <main+0x160>)
 8002834:	f7fe fe43 	bl	80014be <HAL_SPI_Transmit>
 8002838:	b940      	cbnz	r0, 800284c <main+0x140>
	  		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800283a:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 800283e:	2201      	movs	r2, #1
 8002840:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002844:	f500 3088 	add.w	r0, r0, #69632	; 0x11000
 8002848:	f7fd fe12 	bl	8000470 <HAL_GPIO_WritePin>
	  	  }
	  HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_SET);
 800284c:	2201      	movs	r2, #1
 800284e:	2108      	movs	r1, #8
 8002850:	4805      	ldr	r0, [pc, #20]	; (8002868 <main+0x15c>)
 8002852:	f7fd fe0d 	bl	8000470 <HAL_GPIO_WritePin>
	  HAL_Delay(200);
 8002856:	20c8      	movs	r0, #200	; 0xc8
 8002858:	f7fd fcaa 	bl	80001b0 <HAL_Delay>

  /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */

  }
 800285c:	e7b9      	b.n	80027d2 <main+0xc6>
 800285e:	bf00      	nop
 8002860:	40021000 	.word	0x40021000
 8002864:	40011000 	.word	0x40011000
 8002868:	40010800 	.word	0x40010800
 800286c:	2000039c 	.word	0x2000039c
 8002870:	40013000 	.word	0x40013000

08002874 <_Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void _Error_Handler(char * file, int line)
{
 8002874:	e7fe      	b.n	8002874 <_Error_Handler>
	...

08002878 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002878:	4b20      	ldr	r3, [pc, #128]	; (80028fc <HAL_MspInit+0x84>)
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800287a:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800287c:	699a      	ldr	r2, [r3, #24]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800287e:	2003      	movs	r0, #3
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002880:	f042 0201 	orr.w	r2, r2, #1
 8002884:	619a      	str	r2, [r3, #24]
 8002886:	699b      	ldr	r3, [r3, #24]
 8002888:	f003 0301 	and.w	r3, r3, #1
 800288c:	9301      	str	r3, [sp, #4]
 800288e:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002890:	f7fd fc9c 	bl	80001cc <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8002894:	2200      	movs	r2, #0
 8002896:	4611      	mov	r1, r2
 8002898:	f06f 000b 	mvn.w	r0, #11
 800289c:	f7fd fca8 	bl	80001f0 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80028a0:	2200      	movs	r2, #0
 80028a2:	4611      	mov	r1, r2
 80028a4:	f06f 000a 	mvn.w	r0, #10
 80028a8:	f7fd fca2 	bl	80001f0 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80028ac:	2200      	movs	r2, #0
 80028ae:	4611      	mov	r1, r2
 80028b0:	f06f 0009 	mvn.w	r0, #9
 80028b4:	f7fd fc9c 	bl	80001f0 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80028b8:	2200      	movs	r2, #0
 80028ba:	4611      	mov	r1, r2
 80028bc:	f06f 0004 	mvn.w	r0, #4
 80028c0:	f7fd fc96 	bl	80001f0 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80028c4:	2200      	movs	r2, #0
 80028c6:	4611      	mov	r1, r2
 80028c8:	f06f 0003 	mvn.w	r0, #3
 80028cc:	f7fd fc90 	bl	80001f0 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80028d0:	2200      	movs	r2, #0
 80028d2:	4611      	mov	r1, r2
 80028d4:	f06f 0001 	mvn.w	r0, #1
 80028d8:	f7fd fc8a 	bl	80001f0 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80028dc:	2200      	movs	r2, #0
 80028de:	4611      	mov	r1, r2
 80028e0:	f04f 30ff 	mov.w	r0, #4294967295
 80028e4:	f7fd fc84 	bl	80001f0 <HAL_NVIC_SetPriority>

    /**DISABLE: JTAG-DP Disabled and SW-DP Disabled 
    */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80028e8:	4a05      	ldr	r2, [pc, #20]	; (8002900 <HAL_MspInit+0x88>)
 80028ea:	6853      	ldr	r3, [r2, #4]
 80028ec:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80028f0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80028f4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028f6:	b003      	add	sp, #12
 80028f8:	f85d fb04 	ldr.w	pc, [sp], #4
 80028fc:	40021000 	.word	0x40021000
 8002900:	40010000 	.word	0x40010000

08002904 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002904:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
 8002906:	6802      	ldr	r2, [r0, #0]
 8002908:	4b11      	ldr	r3, [pc, #68]	; (8002950 <HAL_SPI_MspInit+0x4c>)
 800290a:	429a      	cmp	r2, r3
 800290c:	d11d      	bne.n	800294a <HAL_SPI_MspInit+0x46>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800290e:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 8002912:	699a      	ldr	r2, [r3, #24]
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002914:	a902      	add	r1, sp, #8
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002916:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800291a:	619a      	str	r2, [r3, #24]
 800291c:	699b      	ldr	r3, [r3, #24]
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800291e:	480d      	ldr	r0, [pc, #52]	; (8002954 <HAL_SPI_MspInit+0x50>)
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002920:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002924:	9301      	str	r3, [sp, #4]
 8002926:	9b01      	ldr	r3, [sp, #4]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8002928:	23b0      	movs	r3, #176	; 0xb0
 800292a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800292c:	2302      	movs	r3, #2
 800292e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002930:	2303      	movs	r3, #3
 8002932:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002934:	f7fd fcc4 	bl	80002c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002938:	2340      	movs	r3, #64	; 0x40
 800293a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800293c:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800293e:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002940:	4804      	ldr	r0, [pc, #16]	; (8002954 <HAL_SPI_MspInit+0x50>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002942:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002944:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002946:	f7fd fcbb 	bl	80002c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800294a:	b007      	add	sp, #28
 800294c:	f85d fb04 	ldr.w	pc, [sp], #4
 8002950:	40013000 	.word	0x40013000
 8002954:	40010800 	.word	0x40010800

08002958 <NMI_Handler>:
 8002958:	4770      	bx	lr

0800295a <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 800295a:	e7fe      	b.n	800295a <HardFault_Handler>

0800295c <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 800295c:	e7fe      	b.n	800295c <MemManage_Handler>

0800295e <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 800295e:	e7fe      	b.n	800295e <BusFault_Handler>

08002960 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8002960:	e7fe      	b.n	8002960 <UsageFault_Handler>

08002962 <SVC_Handler>:
 8002962:	4770      	bx	lr

08002964 <DebugMon_Handler>:
 8002964:	4770      	bx	lr

08002966 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8002966:	4770      	bx	lr

08002968 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8002968:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800296a:	f7fd fc13 	bl	8000194 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800296e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  HAL_SYSTICK_IRQHandler();
 8002972:	f7fd bca0 	b.w	80002b6 <HAL_SYSTICK_IRQHandler>
	...

08002978 <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002978:	4801      	ldr	r0, [pc, #4]	; (8002980 <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 800297a:	f7fd bea1 	b.w	80006c0 <HAL_PCD_IRQHandler>
 800297e:	bf00      	nop
 8002980:	20000620 	.word	0x20000620

08002984 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002984:	4b0f      	ldr	r3, [pc, #60]	; (80029c4 <SystemInit+0x40>)
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	f042 0201 	orr.w	r2, r2, #1
 800298c:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 800298e:	6859      	ldr	r1, [r3, #4]
 8002990:	4a0d      	ldr	r2, [pc, #52]	; (80029c8 <SystemInit+0x44>)
 8002992:	400a      	ands	r2, r1
 8002994:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800299c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80029a0:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80029a8:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80029aa:	685a      	ldr	r2, [r3, #4]
 80029ac:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80029b0:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 80029b2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80029b6:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80029b8:	4b04      	ldr	r3, [pc, #16]	; (80029cc <SystemInit+0x48>)
 80029ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80029be:	609a      	str	r2, [r3, #8]
 80029c0:	4770      	bx	lr
 80029c2:	bf00      	nop
 80029c4:	40021000 	.word	0x40021000
 80029c8:	f8ff0000 	.word	0xf8ff0000
 80029cc:	e000ed00 	.word	0xe000ed00

080029d0 <MX_USB_DEVICE_Init>:
/* USB Device Core handle declaration */
USBD_HandleTypeDef hUsbDeviceFS;

/* init function */				        
void MX_USB_DEVICE_Init(void)
{
 80029d0:	b510      	push	{r4, lr}
  /* Init Device Library,Add Supported Class and Start the library*/
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 80029d2:	4c09      	ldr	r4, [pc, #36]	; (80029f8 <MX_USB_DEVICE_Init+0x28>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	4909      	ldr	r1, [pc, #36]	; (80029fc <MX_USB_DEVICE_Init+0x2c>)
 80029d8:	4620      	mov	r0, r4
 80029da:	f7ff fb3a 	bl	8002052 <USBD_Init>

  USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC);
 80029de:	4908      	ldr	r1, [pc, #32]	; (8002a00 <MX_USB_DEVICE_Init+0x30>)
 80029e0:	4620      	mov	r0, r4
 80029e2:	f7ff fb4b 	bl	800207c <USBD_RegisterClass>

  USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS);
 80029e6:	4620      	mov	r0, r4
 80029e8:	4906      	ldr	r1, [pc, #24]	; (8002a04 <MX_USB_DEVICE_Init+0x34>)
 80029ea:	f7ff fb0a 	bl	8002002 <USBD_CDC_RegisterInterface>

  USBD_Start(&hUsbDeviceFS);
 80029ee:	4620      	mov	r0, r4

}
 80029f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC);

  USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS);

  USBD_Start(&hUsbDeviceFS);
 80029f4:	f7ff bb49 	b.w	800208a <USBD_Start>
 80029f8:	200003f4 	.word	0x200003f4
 80029fc:	20000124 	.word	0x20000124
 8002a00:	20000044 	.word	0x20000044
 8002a04:	20000114 	.word	0x20000114

08002a08 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */ 
  return (USBD_OK);
  /* USER CODE END 4 */ 
}
 8002a08:	2000      	movs	r0, #0
 8002a0a:	4770      	bx	lr

08002a0c <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8002a0c:	2000      	movs	r0, #0
 8002a0e:	4770      	bx	lr

08002a10 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS (uint8_t* Buf, uint32_t *Len)
{
 8002a10:	b510      	push	{r4, lr}
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8002a12:	4c05      	ldr	r4, [pc, #20]	; (8002a28 <CDC_Receive_FS+0x18>)
 8002a14:	4601      	mov	r1, r0
 8002a16:	4620      	mov	r0, r4
 8002a18:	f7ff fb02 	bl	8002020 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8002a1c:	4620      	mov	r0, r4
 8002a1e:	f7ff fb05 	bl	800202c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
  /* USER CODE END 6 */ 
}
 8002a22:	2000      	movs	r0, #0
 8002a24:	bd10      	pop	{r4, pc}
 8002a26:	bf00      	nop
 8002a28:	200003f4 	.word	0x200003f4

08002a2c <CDC_Init_FS>:
  *         Initializes the CDC media low layer over the FS USB IP
  * @param  None
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{ 
 8002a2c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN 3 */ 
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8002a2e:	4c06      	ldr	r4, [pc, #24]	; (8002a48 <CDC_Init_FS+0x1c>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	4906      	ldr	r1, [pc, #24]	; (8002a4c <CDC_Init_FS+0x20>)
 8002a34:	4620      	mov	r0, r4
 8002a36:	f7ff faeb 	bl	8002010 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8002a3a:	4905      	ldr	r1, [pc, #20]	; (8002a50 <CDC_Init_FS+0x24>)
 8002a3c:	4620      	mov	r0, r4
 8002a3e:	f7ff faef 	bl	8002020 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
  /* USER CODE END 3 */ 
}
 8002a42:	2000      	movs	r0, #0
 8002a44:	bd10      	pop	{r4, pc}
 8002a46:	bf00      	nop
 8002a48:	200003f4 	.word	0x200003f4
 8002a4c:	2000061c 	.word	0x2000061c
 8002a50:	20000618 	.word	0x20000618

08002a54 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8002a54:	b507      	push	{r0, r1, r2, lr}
  if(pcdHandle->Instance==USB)
 8002a56:	4b0d      	ldr	r3, [pc, #52]	; (8002a8c <HAL_PCD_MspInit+0x38>)
 8002a58:	6802      	ldr	r2, [r0, #0]
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d112      	bne.n	8002a84 <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8002a5e:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8002a62:	69da      	ldr	r2, [r3, #28]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8002a64:	2014      	movs	r0, #20
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8002a66:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002a6a:	61da      	str	r2, [r3, #28]
 8002a6c:	69db      	ldr	r3, [r3, #28]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8002a6e:	2200      	movs	r2, #0
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8002a70:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a74:	9301      	str	r3, [sp, #4]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8002a76:	4611      	mov	r1, r2
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8002a78:	9b01      	ldr	r3, [sp, #4]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8002a7a:	f7fd fbb9 	bl	80001f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8002a7e:	2014      	movs	r0, #20
 8002a80:	f7fd fbea 	bl	8000258 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8002a84:	b003      	add	sp, #12
 8002a86:	f85d fb04 	ldr.w	pc, [sp], #4
 8002a8a:	bf00      	nop
 8002a8c:	40005c00 	.word	0x40005c00

08002a90 <HAL_PCD_SetupStageCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8002a90:	f500 717b 	add.w	r1, r0, #1004	; 0x3ec
 8002a94:	f8d0 041c 	ldr.w	r0, [r0, #1052]	; 0x41c
 8002a98:	f7ff bb0e 	b.w	80020b8 <USBD_LL_SetupStage>

08002a9c <HAL_PCD_DataOutStageCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8002a9c:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8002aa0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002aa4:	f8d0 041c 	ldr.w	r0, [r0, #1052]	; 0x41c
 8002aa8:	f7ff bb33 	b.w	8002112 <USBD_LL_DataOutStage>

08002aac <HAL_PCD_DataInStageCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8002aac:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8002ab0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ab2:	f8d0 041c 	ldr.w	r0, [r0, #1052]	; 0x41c
 8002ab6:	f7ff bb5d 	b.w	8002174 <USBD_LL_DataInStage>

08002aba <HAL_PCD_SOFCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8002aba:	f8d0 041c 	ldr.w	r0, [r0, #1052]	; 0x41c
 8002abe:	f7ff bbd8 	b.w	8002272 <USBD_LL_SOF>

08002ac2 <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 8002ac2:	b510      	push	{r4, lr}
 8002ac4:	4604      	mov	r4, r0
	
  default:
    speed = USBD_SPEED_FULL;    
    break;    
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);  
 8002ac6:	2101      	movs	r1, #1
 8002ac8:	f8d0 041c 	ldr.w	r0, [r0, #1052]	; 0x41c
 8002acc:	f7ff fbbf 	bl	800224e <USBD_LL_SetSpeed>
  
  /*Reset Device*/
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8002ad0:	f8d4 041c 	ldr.w	r0, [r4, #1052]	; 0x41c
}
 8002ad4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    break;    
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);  
  
  /*Reset Device*/
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8002ad8:	f7ff bb9a 	b.w	8002210 <USBD_LL_Reset>

08002adc <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8002adc:	b510      	push	{r4, lr}
 8002ade:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8002ae0:	f8d0 041c 	ldr.w	r0, [r0, #1052]	; 0x41c
 8002ae4:	f7ff fbb6 	bl	8002254 <USBD_LL_Suspend>
  /*Enter in STOP mode */
  /* USER CODE BEGIN 2 */  
  if (hpcd->Init.low_power_enable)
 8002ae8:	69a3      	ldr	r3, [r4, #24]
 8002aea:	b123      	cbz	r3, 8002af6 <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8002aec:	4a02      	ldr	r2, [pc, #8]	; (8002af8 <HAL_PCD_SuspendCallback+0x1c>)
 8002aee:	6913      	ldr	r3, [r2, #16]
 8002af0:	f043 0306 	orr.w	r3, r3, #6
 8002af4:	6113      	str	r3, [r2, #16]
 8002af6:	bd10      	pop	{r4, pc}
 8002af8:	e000ed00 	.word	0xe000ed00

08002afc <HAL_PCD_ResumeCallback>:
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8002afc:	f8d0 041c 	ldr.w	r0, [r0, #1052]	; 0x41c
 8002b00:	f7ff bbb1 	b.w	8002266 <USBD_LL_Resume>

08002b04 <USBD_LL_Init>:
  * @brief  Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_Init (USBD_HandleTypeDef *pdev)
{ 
 8002b04:	b510      	push	{r4, lr}
 8002b06:	4604      	mov	r4, r0
  pdev->pData = &hpcd_USB_FS;

  hpcd_USB_FS.Instance = USB;
  hpcd_USB_FS.Init.dev_endpoints = 8;
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_8;
 8002b08:	491f      	ldr	r1, [pc, #124]	; (8002b88 <USBD_LL_Init+0x84>)
  */
USBD_StatusTypeDef  USBD_LL_Init (USBD_HandleTypeDef *pdev)
{ 
  /* Init USB_IP */
  /* Link The driver to the stack */
  hpcd_USB_FS.pData = pdev;
 8002b0a:	4820      	ldr	r0, [pc, #128]	; (8002b8c <USBD_LL_Init+0x88>)
  pdev->pData = &hpcd_USB_FS;

  hpcd_USB_FS.Instance = USB;
  hpcd_USB_FS.Init.dev_endpoints = 8;
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_8;
 8002b0c:	2302      	movs	r3, #2
 8002b0e:	2208      	movs	r2, #8
 8002b10:	f04f 0e03 	mov.w	lr, #3
  */
USBD_StatusTypeDef  USBD_LL_Init (USBD_HandleTypeDef *pdev)
{ 
  /* Init USB_IP */
  /* Link The driver to the stack */
  hpcd_USB_FS.pData = pdev;
 8002b14:	f8c0 441c 	str.w	r4, [r0, #1052]	; 0x41c
  pdev->pData = &hpcd_USB_FS;

  hpcd_USB_FS.Instance = USB;
  hpcd_USB_FS.Init.dev_endpoints = 8;
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_8;
 8002b18:	e880 400e 	stmia.w	r0, {r1, r2, r3, lr}
USBD_StatusTypeDef  USBD_LL_Init (USBD_HandleTypeDef *pdev)
{ 
  /* Init USB_IP */
  /* Link The driver to the stack */
  hpcd_USB_FS.pData = pdev;
  pdev->pData = &hpcd_USB_FS;
 8002b1c:	f8c4 0220 	str.w	r0, [r4, #544]	; 0x220

  hpcd_USB_FS.Instance = USB;
  hpcd_USB_FS.Init.dev_endpoints = 8;
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_8;
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8002b20:	2300      	movs	r3, #0
 8002b22:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8002b24:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8002b26:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8002b28:	f7fd fca6 	bl	8000478 <HAL_PCD_Init>
 8002b2c:	b120      	cbz	r0, 8002b38 <USBD_LL_Init+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002b2e:	f44f 718d 	mov.w	r1, #282	; 0x11a
 8002b32:	4817      	ldr	r0, [pc, #92]	; (8002b90 <USBD_LL_Init+0x8c>)
 8002b34:	f7ff fe9e 	bl	8002874 <_Error_Handler>
  }

  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8002b38:	2200      	movs	r2, #0
 8002b3a:	4611      	mov	r1, r2
 8002b3c:	2318      	movs	r3, #24
 8002b3e:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8002b42:	f7fe f871 	bl	8000c28 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8002b46:	2358      	movs	r3, #88	; 0x58
 8002b48:	2200      	movs	r2, #0
 8002b4a:	2180      	movs	r1, #128	; 0x80
 8002b4c:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8002b50:	f7fe f86a 	bl	8000c28 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);  
 8002b54:	23c0      	movs	r3, #192	; 0xc0
 8002b56:	2200      	movs	r2, #0
 8002b58:	2181      	movs	r1, #129	; 0x81
 8002b5a:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8002b5e:	f7fe f863 	bl	8000c28 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8002b62:	f44f 7388 	mov.w	r3, #272	; 0x110
 8002b66:	2200      	movs	r2, #0
 8002b68:	2101      	movs	r1, #1
 8002b6a:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8002b6e:	f7fe f85b 	bl	8000c28 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);  
 8002b72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b76:	2200      	movs	r2, #0
 8002b78:	2182      	movs	r1, #130	; 0x82
 8002b7a:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8002b7e:	f7fe f853 	bl	8000c28 <HAL_PCDEx_PMAConfig>
  return USBD_OK;
}
 8002b82:	2000      	movs	r0, #0
 8002b84:	bd10      	pop	{r4, pc}
 8002b86:	bf00      	nop
 8002b88:	40005c00 	.word	0x40005c00
 8002b8c:	20000620 	.word	0x20000620
 8002b90:	08002e2a 	.word	0x08002e2a

08002b94 <USBD_LL_Start>:
  * @brief  Starts the Low Level portion of the Device driver. 
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8002b94:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8002b96:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002b9a:	f7fd fcd7 	bl	800054c <HAL_PCD_Start>
 8002b9e:	2803      	cmp	r0, #3
 8002ba0:	bf9a      	itte	ls
 8002ba2:	4b02      	ldrls	r3, [pc, #8]	; (8002bac <USBD_LL_Start+0x18>)
 8002ba4:	5c18      	ldrbls	r0, [r3, r0]
 8002ba6:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8002ba8:	bd08      	pop	{r3, pc}
 8002baa:	bf00      	nop
 8002bac:	08002e26 	.word	0x08002e26

08002bb0 <USBD_LL_OpenEP>:
  */
USBD_StatusTypeDef  USBD_LL_OpenEP  (USBD_HandleTypeDef *pdev, 
                                      uint8_t  ep_addr,                                      
                                      uint8_t  ep_type,
                                      uint16_t ep_mps)
{
 8002bb0:	b510      	push	{r4, lr}
 8002bb2:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, 
 8002bb4:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002bb8:	4613      	mov	r3, r2
 8002bba:	4622      	mov	r2, r4
 8002bbc:	f7fd fcf1 	bl	80005a2 <HAL_PCD_EP_Open>
 8002bc0:	2803      	cmp	r0, #3
 8002bc2:	bf9a      	itte	ls
 8002bc4:	4b01      	ldrls	r3, [pc, #4]	; (8002bcc <USBD_LL_OpenEP+0x1c>)
 8002bc6:	5c18      	ldrbls	r0, [r3, r0]
 8002bc8:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 8002bca:	bd10      	pop	{r4, pc}
 8002bcc:	08002e26 	.word	0x08002e26

08002bd0 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_CloseEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 8002bd0:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8002bd2:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002bd6:	f7fd fd07 	bl	80005e8 <HAL_PCD_EP_Close>
 8002bda:	2803      	cmp	r0, #3
 8002bdc:	bf9a      	itte	ls
 8002bde:	4b02      	ldrls	r3, [pc, #8]	; (8002be8 <USBD_LL_CloseEP+0x18>)
 8002be0:	5c18      	ldrbls	r0, [r3, r0]
 8002be2:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8002be4:	bd08      	pop	{r3, pc}
 8002be6:	bf00      	nop
 8002be8:	08002e26 	.word	0x08002e26

08002bec <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_StallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 8002bec:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8002bee:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002bf2:	f7fd ffcd 	bl	8000b90 <HAL_PCD_EP_SetStall>
 8002bf6:	2803      	cmp	r0, #3
 8002bf8:	bf9a      	itte	ls
 8002bfa:	4b02      	ldrls	r3, [pc, #8]	; (8002c04 <USBD_LL_StallEP+0x18>)
 8002bfc:	5c18      	ldrbls	r0, [r3, r0]
 8002bfe:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8002c00:	bd08      	pop	{r3, pc}
 8002c02:	bf00      	nop
 8002c04:	08002e26 	.word	0x08002e26

08002c08 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_ClearStallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 8002c08:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8002c0a:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002c0e:	f7fd ffe8 	bl	8000be2 <HAL_PCD_EP_ClrStall>
 8002c12:	2803      	cmp	r0, #3
 8002c14:	bf9a      	itte	ls
 8002c16:	4b02      	ldrls	r3, [pc, #8]	; (8002c20 <USBD_LL_ClearStallEP+0x18>)
 8002c18:	5c18      	ldrbls	r0, [r3, r0]
 8002c1a:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 8002c1c:	bd08      	pop	{r3, pc}
 8002c1e:	bf00      	nop
 8002c20:	08002e26 	.word	0x08002e26

08002c24 <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 8002c24:	060a      	lsls	r2, r1, #24
  * @param  ep_addr: Endpoint Number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8002c26:	f8d0 3220 	ldr.w	r3, [r0, #544]	; 0x220
  
  if((ep_addr & 0x80) == 0x80)
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8002c2a:	bf45      	ittet	mi
 8002c2c:	f001 017f 	andmi.w	r1, r1, #127	; 0x7f
 8002c30:	eb03 1341 	addmi.w	r3, r3, r1, lsl #5
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8002c34:	eb03 1341 	addpl.w	r3, r3, r1, lsl #5
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8002c38:	f893 002a 	ldrbmi.w	r0, [r3, #42]	; 0x2a
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8002c3c:	bf58      	it	pl
 8002c3e:	f893 020a 	ldrbpl.w	r0, [r3, #522]	; 0x20a
  }
}
 8002c42:	4770      	bx	lr

08002c44 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_SetUSBAddress (USBD_HandleTypeDef *pdev, uint8_t dev_addr)   
{
 8002c44:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8002c46:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002c4a:	f7fd fc96 	bl	800057a <HAL_PCD_SetAddress>
 8002c4e:	2803      	cmp	r0, #3
 8002c50:	bf9a      	itte	ls
 8002c52:	4b02      	ldrls	r3, [pc, #8]	; (8002c5c <USBD_LL_SetUSBAddress+0x18>)
 8002c54:	5c18      	ldrbls	r0, [r3, r0]
 8002c56:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8002c58:	bd08      	pop	{r3, pc}
 8002c5a:	bf00      	nop
 8002c5c:	08002e26 	.word	0x08002e26

08002c60 <USBD_LL_Transmit>:
  */
USBD_StatusTypeDef  USBD_LL_Transmit (USBD_HandleTypeDef *pdev, 
                                      uint8_t  ep_addr,                                      
                                      uint8_t  *pbuf,
                                      uint16_t  size)
{
 8002c60:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8002c62:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002c66:	f7fd fd0b 	bl	8000680 <HAL_PCD_EP_Transmit>
 8002c6a:	2803      	cmp	r0, #3
 8002c6c:	bf9a      	itte	ls
 8002c6e:	4b02      	ldrls	r3, [pc, #8]	; (8002c78 <USBD_LL_Transmit+0x18>)
 8002c70:	5c18      	ldrbls	r0, [r3, r0]
 8002c72:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;    
}
 8002c74:	bd08      	pop	{r3, pc}
 8002c76:	bf00      	nop
 8002c78:	08002e26 	.word	0x08002e26

08002c7c <USBD_LL_PrepareReceive>:
  */
USBD_StatusTypeDef  USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, 
                                           uint8_t  ep_addr,                                      
                                           uint8_t  *pbuf,
                                           uint16_t  size)
{
 8002c7c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8002c7e:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002c82:	f7fd fcd2 	bl	800062a <HAL_PCD_EP_Receive>
 8002c86:	2803      	cmp	r0, #3
 8002c88:	bf9a      	itte	ls
 8002c8a:	4b02      	ldrls	r3, [pc, #8]	; (8002c94 <USBD_LL_PrepareReceive+0x18>)
 8002c8c:	5c18      	ldrbls	r0, [r3, r0]
 8002c8e:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 8002c90:	bd08      	pop	{r3, pc}
 8002c92:	bf00      	nop
 8002c94:	08002e26 	.word	0x08002e26

08002c98 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize  (USBD_HandleTypeDef *pdev, uint8_t  ep_addr)  
{
 8002c98:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8002c9a:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002c9e:	f7fd fce8 	bl	8000672 <HAL_PCD_EP_GetRxCount>
}
 8002ca2:	bd08      	pop	{r3, pc}

08002ca4 <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
}
 8002ca4:	4800      	ldr	r0, [pc, #0]	; (8002ca8 <USBD_static_malloc+0x4>)
 8002ca6:	4770      	bx	lr
 8002ca8:	2000017c 	.word	0x2000017c

08002cac <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  *p pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8002cac:	4770      	bx	lr

08002cae <HAL_PCDEx_SetConnectionState>:
* @param hpcd: PCD handle
* @param state: connection state (0 : disconnected / 1: connected) 
* @retval None
*/
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
{
 8002cae:	4770      	bx	lr

08002cb0 <USBD_FS_DeviceDescriptor>:
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_DeviceDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
  *length = sizeof(USBD_FS_DeviceDesc);
 8002cb0:	2312      	movs	r3, #18
 8002cb2:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 8002cb4:	4800      	ldr	r0, [pc, #0]	; (8002cb8 <USBD_FS_DeviceDescriptor+0x8>)
 8002cb6:	4770      	bx	lr
 8002cb8:	20000144 	.word	0x20000144

08002cbc <USBD_FS_LangIDStrDescriptor>:
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_LangIDStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
  *length =  sizeof(USBD_LangIDDesc);  
 8002cbc:	2304      	movs	r3, #4
 8002cbe:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 8002cc0:	4800      	ldr	r0, [pc, #0]	; (8002cc4 <USBD_FS_LangIDStrDescriptor+0x8>)
 8002cc2:	4770      	bx	lr
 8002cc4:	20000140 	.word	0x20000140

08002cc8 <USBD_FS_ManufacturerStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_ManufacturerStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8002cc8:	b510      	push	{r4, lr}
  USBD_GetString (USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8002cca:	4c04      	ldr	r4, [pc, #16]	; (8002cdc <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8002ccc:	460a      	mov	r2, r1
 8002cce:	4804      	ldr	r0, [pc, #16]	; (8002ce0 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8002cd0:	4621      	mov	r1, r4
 8002cd2:	f7ff fc7e 	bl	80025d2 <USBD_GetString>
  return USBD_StrDesc;
}
 8002cd6:	4620      	mov	r0, r4
 8002cd8:	bd10      	pop	{r4, pc}
 8002cda:	bf00      	nop
 8002cdc:	20000a40 	.word	0x20000a40
 8002ce0:	08002e3d 	.word	0x08002e3d

08002ce4 <USBD_FS_ProductStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_ProductStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8002ce4:	b510      	push	{r4, lr}
  if(speed == 0)
  {   
    USBD_GetString (USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8002ce6:	4c04      	ldr	r4, [pc, #16]	; (8002cf8 <USBD_FS_ProductStrDescriptor+0x14>)
 8002ce8:	460a      	mov	r2, r1
 8002cea:	4804      	ldr	r0, [pc, #16]	; (8002cfc <USBD_FS_ProductStrDescriptor+0x18>)
 8002cec:	4621      	mov	r1, r4
 8002cee:	f7ff fc70 	bl	80025d2 <USBD_GetString>
  else
  {
    USBD_GetString (USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);    
  }
  return USBD_StrDesc;
}
 8002cf2:	4620      	mov	r0, r4
 8002cf4:	bd10      	pop	{r4, pc}
 8002cf6:	bf00      	nop
 8002cf8:	20000a40 	.word	0x20000a40
 8002cfc:	08002e50 	.word	0x08002e50

08002d00 <USBD_FS_SerialStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_SerialStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8002d00:	b510      	push	{r4, lr}
  if(speed  == USBD_SPEED_HIGH)
  {    
    USBD_GetString (USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 8002d02:	4c04      	ldr	r4, [pc, #16]	; (8002d14 <USBD_FS_SerialStrDescriptor+0x14>)
 8002d04:	460a      	mov	r2, r1
 8002d06:	4804      	ldr	r0, [pc, #16]	; (8002d18 <USBD_FS_SerialStrDescriptor+0x18>)
 8002d08:	4621      	mov	r1, r4
 8002d0a:	f7ff fc62 	bl	80025d2 <USBD_GetString>
  else
  {
    USBD_GetString (USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);    
  }
  return USBD_StrDesc;
}
 8002d0e:	4620      	mov	r0, r4
 8002d10:	bd10      	pop	{r4, pc}
 8002d12:	bf00      	nop
 8002d14:	20000a40 	.word	0x20000a40
 8002d18:	08002e66 	.word	0x08002e66

08002d1c <USBD_FS_ConfigStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_ConfigStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8002d1c:	b510      	push	{r4, lr}
  if(speed  == USBD_SPEED_HIGH)
  {  
    USBD_GetString (USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8002d1e:	4c04      	ldr	r4, [pc, #16]	; (8002d30 <USBD_FS_ConfigStrDescriptor+0x14>)
 8002d20:	460a      	mov	r2, r1
 8002d22:	4804      	ldr	r0, [pc, #16]	; (8002d34 <USBD_FS_ConfigStrDescriptor+0x18>)
 8002d24:	4621      	mov	r1, r4
 8002d26:	f7ff fc54 	bl	80025d2 <USBD_GetString>
  else
  {
    USBD_GetString (USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length); 
  }
  return USBD_StrDesc;  
}
 8002d2a:	4620      	mov	r0, r4
 8002d2c:	bd10      	pop	{r4, pc}
 8002d2e:	bf00      	nop
 8002d30:	20000a40 	.word	0x20000a40
 8002d34:	08002e73 	.word	0x08002e73

08002d38 <USBD_FS_InterfaceStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_InterfaceStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8002d38:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString (USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8002d3a:	4c04      	ldr	r4, [pc, #16]	; (8002d4c <USBD_FS_InterfaceStrDescriptor+0x14>)
 8002d3c:	460a      	mov	r2, r1
 8002d3e:	4804      	ldr	r0, [pc, #16]	; (8002d50 <USBD_FS_InterfaceStrDescriptor+0x18>)
 8002d40:	4621      	mov	r1, r4
 8002d42:	f7ff fc46 	bl	80025d2 <USBD_GetString>
  else
  {
    USBD_GetString (USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;  
}
 8002d46:	4620      	mov	r0, r4
 8002d48:	bd10      	pop	{r4, pc}
 8002d4a:	bf00      	nop
 8002d4c:	20000a40 	.word	0x20000a40
 8002d50:	08002e7e 	.word	0x08002e7e

08002d54 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002d54:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002d56:	e003      	b.n	8002d60 <LoopCopyDataInit>

08002d58 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002d58:	4b0b      	ldr	r3, [pc, #44]	; (8002d88 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002d5a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002d5c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002d5e:	3104      	adds	r1, #4

08002d60 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002d60:	480a      	ldr	r0, [pc, #40]	; (8002d8c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002d62:	4b0b      	ldr	r3, [pc, #44]	; (8002d90 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002d64:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002d66:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002d68:	d3f6      	bcc.n	8002d58 <CopyDataInit>
  ldr r2, =_sbss
 8002d6a:	4a0a      	ldr	r2, [pc, #40]	; (8002d94 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002d6c:	e002      	b.n	8002d74 <LoopFillZerobss>

08002d6e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002d6e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002d70:	f842 3b04 	str.w	r3, [r2], #4

08002d74 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002d74:	4b08      	ldr	r3, [pc, #32]	; (8002d98 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002d76:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002d78:	d3f9      	bcc.n	8002d6e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002d7a:	f7ff fe03 	bl	8002984 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d7e:	f000 f80f 	bl	8002da0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002d82:	f7ff fcc3 	bl	800270c <main>
  bx lr
 8002d86:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
  b LoopCopyDataInit

CopyDataInit:
  ldr r3, =_sidata
 8002d88:	08002e94 	.word	0x08002e94
  ldr r3, [r3, r1]
  str r3, [r0, r1]
  adds r1, r1, #4

LoopCopyDataInit:
  ldr r0, =_sdata
 8002d8c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002d90:	20000158 	.word	0x20000158
  adds r2, r0, r1
  cmp r2, r3
  bcc CopyDataInit
  ldr r2, =_sbss
 8002d94:	20000158 	.word	0x20000158
FillZerobss:
  movs r3, #0
  str r3, [r2], #4

LoopFillZerobss:
  ldr r3, = _ebss
 8002d98:	20000c40 	.word	0x20000c40

08002d9c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002d9c:	e7fe      	b.n	8002d9c <ADC1_2_IRQHandler>
	...

08002da0 <__libc_init_array>:
 8002da0:	4b0e      	ldr	r3, [pc, #56]	; (8002ddc <__libc_init_array+0x3c>)
 8002da2:	b570      	push	{r4, r5, r6, lr}
 8002da4:	461e      	mov	r6, r3
 8002da6:	4c0e      	ldr	r4, [pc, #56]	; (8002de0 <__libc_init_array+0x40>)
 8002da8:	2500      	movs	r5, #0
 8002daa:	1ae4      	subs	r4, r4, r3
 8002dac:	10a4      	asrs	r4, r4, #2
 8002dae:	42a5      	cmp	r5, r4
 8002db0:	d004      	beq.n	8002dbc <__libc_init_array+0x1c>
 8002db2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002db6:	4798      	blx	r3
 8002db8:	3501      	adds	r5, #1
 8002dba:	e7f8      	b.n	8002dae <__libc_init_array+0xe>
 8002dbc:	f000 f816 	bl	8002dec <_init>
 8002dc0:	4b08      	ldr	r3, [pc, #32]	; (8002de4 <__libc_init_array+0x44>)
 8002dc2:	4c09      	ldr	r4, [pc, #36]	; (8002de8 <__libc_init_array+0x48>)
 8002dc4:	461e      	mov	r6, r3
 8002dc6:	1ae4      	subs	r4, r4, r3
 8002dc8:	10a4      	asrs	r4, r4, #2
 8002dca:	2500      	movs	r5, #0
 8002dcc:	42a5      	cmp	r5, r4
 8002dce:	d004      	beq.n	8002dda <__libc_init_array+0x3a>
 8002dd0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002dd4:	4798      	blx	r3
 8002dd6:	3501      	adds	r5, #1
 8002dd8:	e7f8      	b.n	8002dcc <__libc_init_array+0x2c>
 8002dda:	bd70      	pop	{r4, r5, r6, pc}
 8002ddc:	08002e8c 	.word	0x08002e8c
 8002de0:	08002e8c 	.word	0x08002e8c
 8002de4:	08002e8c 	.word	0x08002e8c
 8002de8:	08002e90 	.word	0x08002e90

08002dec <_init>:
 8002dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dee:	bf00      	nop
 8002df0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002df2:	bc08      	pop	{r3}
 8002df4:	469e      	mov	lr, r3
 8002df6:	4770      	bx	lr

08002df8 <_fini>:
 8002df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dfa:	bf00      	nop
 8002dfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dfe:	bc08      	pop	{r3}
 8002e00:	469e      	mov	lr, r3
 8002e02:	4770      	bx	lr
