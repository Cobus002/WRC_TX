
F:\Documents\Atollic\TrueSTUDIO\ARM_workspace_7.1\spimaster\Debug\spimaster.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042b4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  080043c0  080043c0  000143c0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004540  08004540  00014540  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08004544  08004544  00014544  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001bc  20000000  08004548  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000b28  200001bc  08004704  000201bc  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000ce4  08004704  00020ce4  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  000201bc  2**0
                  CONTENTS, READONLY
  9 .debug_info   00011429  00000000  00000000  000201e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000348a  00000000  00000000  0003160e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00007056  00000000  00000000  00034a98  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000b80  00000000  00000000  0003baf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000da0  00000000  00000000  0003c670  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00006503  00000000  00000000  0003d410  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000356a  00000000  00000000  00043913  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007e  00000000  00000000  00046e7d  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002128  00000000  00000000  00046efc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001bc 	.word	0x200001bc
 8000128:	00000000 	.word	0x00000000
 800012c:	080043a8 	.word	0x080043a8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001c0 	.word	0x200001c0
 8000148:	080043a8 	.word	0x080043a8

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800015c:	b510      	push	{r4, lr}
 800015e:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000160:	f001 fc1e 	bl	80019a0 <HAL_RCC_GetHCLKFreq>
 8000164:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000168:	fbb0 f0f3 	udiv	r0, r0, r3
 800016c:	f000 fbbc 	bl	80008e8 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8000170:	2200      	movs	r2, #0
 8000172:	4621      	mov	r1, r4
 8000174:	f04f 30ff 	mov.w	r0, #4294967295
 8000178:	f000 fb76 	bl	8000868 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 800017c:	2000      	movs	r0, #0
 800017e:	bd10      	pop	{r4, pc}

08000180 <HAL_Init>:
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000180:	4a07      	ldr	r2, [pc, #28]	; (80001a0 <HAL_Init+0x20>)
  *        In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000182:	b508      	push	{r3, lr}
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000184:	6813      	ldr	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000186:	2003      	movs	r0, #3
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000188:	f043 0310 	orr.w	r3, r3, #16
 800018c:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800018e:	f000 fb59 	bl	8000844 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000192:	2000      	movs	r0, #0
 8000194:	f7ff ffe2 	bl	800015c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000198:	f003 f9a6 	bl	80034e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 800019c:	2000      	movs	r0, #0
 800019e:	bd08      	pop	{r3, pc}
 80001a0:	40022000 	.word	0x40022000

080001a4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80001a4:	4a02      	ldr	r2, [pc, #8]	; (80001b0 <HAL_IncTick+0xc>)
 80001a6:	6813      	ldr	r3, [r2, #0]
 80001a8:	3301      	adds	r3, #1
 80001aa:	6013      	str	r3, [r2, #0]
 80001ac:	4770      	bx	lr
 80001ae:	bf00      	nop
 80001b0:	200001d8 	.word	0x200001d8

080001b4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001b4:	4b01      	ldr	r3, [pc, #4]	; (80001bc <HAL_GetTick+0x8>)
 80001b6:	6818      	ldr	r0, [r3, #0]
}
 80001b8:	4770      	bx	lr
 80001ba:	bf00      	nop
 80001bc:	200001d8 	.word	0x200001d8

080001c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80001c0:	b513      	push	{r0, r1, r4, lr}
 80001c2:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 80001c4:	f7ff fff6 	bl	80001b4 <HAL_GetTick>
 80001c8:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 80001ca:	f7ff fff3 	bl	80001b4 <HAL_GetTick>
 80001ce:	9b01      	ldr	r3, [sp, #4]
 80001d0:	1b00      	subs	r0, r0, r4
 80001d2:	4298      	cmp	r0, r3
 80001d4:	d3f9      	bcc.n	80001ca <HAL_Delay+0xa>
  {
  }
}
 80001d6:	b002      	add	sp, #8
 80001d8:	bd10      	pop	{r4, pc}
	...

080001dc <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80001dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80001de:	4604      	mov	r4, r0
  uint32_t tickstart = 0;
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0;
 80001e0:	2600      	movs	r6, #0
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80001e2:	460d      	mov	r5, r1
  uint32_t tickstart = 0;
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0;
 80001e4:	9601      	str	r6, [sp, #4]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80001e6:	f7ff ffe5 	bl	80001b4 <HAL_GetTick>
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80001ea:	6823      	ldr	r3, [r4, #0]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80001ec:	4607      	mov	r7, r0
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80001ee:	689a      	ldr	r2, [r3, #8]
 80001f0:	05d2      	lsls	r2, r2, #23
 80001f2:	d507      	bpl.n	8000204 <HAL_ADC_PollForConversion+0x28>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80001f4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80001f6:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80001fa:	f043 0320 	orr.w	r3, r3, #32
 80001fe:	62a3      	str	r3, [r4, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
    
    return HAL_ERROR;
 8000200:	2001      	movs	r0, #1
 8000202:	e083      	b.n	800030c <HAL_ADC_PollForConversion+0x130>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000204:	685a      	ldr	r2, [r3, #4]
 8000206:	05d6      	lsls	r6, r2, #23
 8000208:	d411      	bmi.n	800022e <HAL_ADC_PollForConversion+0x52>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 800020a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800020c:	f413 0f70 	tst.w	r3, #15728640	; 0xf00000
 8000210:	d10d      	bne.n	800022e <HAL_ADC_PollForConversion+0x52>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000212:	6822      	ldr	r2, [r4, #0]
 8000214:	6813      	ldr	r3, [r2, #0]
 8000216:	0799      	lsls	r1, r3, #30
 8000218:	d42a      	bmi.n	8000270 <HAL_ADC_PollForConversion+0x94>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800021a:	1c68      	adds	r0, r5, #1
 800021c:	d0fa      	beq.n	8000214 <HAL_ADC_PollForConversion+0x38>
      {
        if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 800021e:	2d00      	cmp	r5, #0
 8000220:	d052      	beq.n	80002c8 <HAL_ADC_PollForConversion+0xec>
 8000222:	f7ff ffc7 	bl	80001b4 <HAL_GetTick>
 8000226:	1bc0      	subs	r0, r0, r7
 8000228:	4285      	cmp	r5, r0
 800022a:	d2f2      	bcs.n	8000212 <HAL_ADC_PollForConversion+0x36>
 800022c:	e04c      	b.n	80002c8 <HAL_ADC_PollForConversion+0xec>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800022e:	4b38      	ldr	r3, [pc, #224]	; (8000310 <HAL_ADC_PollForConversion+0x134>)
 8000230:	2002      	movs	r0, #2
 8000232:	681e      	ldr	r6, [r3, #0]
 8000234:	f001 fc5c 	bl	8001af0 <HAL_RCCEx_GetPeriphCLKFreq>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000238:	6823      	ldr	r3, [r4, #0]
 800023a:	4a36      	ldr	r2, [pc, #216]	; (8000314 <HAL_ADC_PollForConversion+0x138>)
 800023c:	6919      	ldr	r1, [r3, #16]
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800023e:	fbb6 f0f0 	udiv	r0, r6, r0
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000242:	400a      	ands	r2, r1
 8000244:	bb1a      	cbnz	r2, 800028e <HAL_ADC_PollForConversion+0xb2>
 8000246:	68d9      	ldr	r1, [r3, #12]
 8000248:	4a33      	ldr	r2, [pc, #204]	; (8000318 <HAL_ADC_PollForConversion+0x13c>)
 800024a:	400a      	ands	r2, r1
 800024c:	b9fa      	cbnz	r2, 800028e <HAL_ADC_PollForConversion+0xb2>
 800024e:	6919      	ldr	r1, [r3, #16]
 8000250:	4a32      	ldr	r2, [pc, #200]	; (800031c <HAL_ADC_PollForConversion+0x140>)
 8000252:	400a      	ands	r2, r1
 8000254:	2a00      	cmp	r2, #0
 8000256:	d12e      	bne.n	80002b6 <HAL_ADC_PollForConversion+0xda>
 8000258:	68da      	ldr	r2, [r3, #12]
 800025a:	4b31      	ldr	r3, [pc, #196]	; (8000320 <HAL_ADC_PollForConversion+0x144>)
 800025c:	4013      	ands	r3, r2
 800025e:	2b00      	cmp	r3, #0
 8000260:	bf14      	ite	ne
 8000262:	2329      	movne	r3, #41	; 0x29
 8000264:	2314      	moveq	r3, #20
  {
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8000266:	fb00 f603 	mul.w	r6, r0, r3
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800026a:	9b01      	ldr	r3, [sp, #4]
 800026c:	429e      	cmp	r6, r3
 800026e:	d828      	bhi.n	80002c2 <HAL_ADC_PollForConversion+0xe6>
      Conversion_Timeout_CPU_cycles ++;
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000270:	6822      	ldr	r2, [r4, #0]
 8000272:	f06f 0312 	mvn.w	r3, #18
 8000276:	6013      	str	r3, [r2, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000278:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800027a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800027e:	62a3      	str	r3, [r4, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000280:	6893      	ldr	r3, [r2, #8]
 8000282:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000286:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800028a:	d131      	bne.n	80002f0 <HAL_ADC_PollForConversion+0x114>
 800028c:	e02e      	b.n	80002ec <HAL_ADC_PollForConversion+0x110>
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800028e:	6919      	ldr	r1, [r3, #16]
 8000290:	4a22      	ldr	r2, [pc, #136]	; (800031c <HAL_ADC_PollForConversion+0x140>)
 8000292:	400a      	ands	r2, r1
 8000294:	b91a      	cbnz	r2, 800029e <HAL_ADC_PollForConversion+0xc2>
 8000296:	68d9      	ldr	r1, [r3, #12]
 8000298:	4a21      	ldr	r2, [pc, #132]	; (8000320 <HAL_ADC_PollForConversion+0x144>)
 800029a:	400a      	ands	r2, r1
 800029c:	b16a      	cbz	r2, 80002ba <HAL_ADC_PollForConversion+0xde>
 800029e:	6919      	ldr	r1, [r3, #16]
 80002a0:	4a20      	ldr	r2, [pc, #128]	; (8000324 <HAL_ADC_PollForConversion+0x148>)
 80002a2:	400a      	ands	r2, r1
 80002a4:	b95a      	cbnz	r2, 80002be <HAL_ADC_PollForConversion+0xe2>
 80002a6:	68da      	ldr	r2, [r3, #12]
 80002a8:	4b1e      	ldr	r3, [pc, #120]	; (8000324 <HAL_ADC_PollForConversion+0x148>)
 80002aa:	4013      	ands	r3, r2
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	bf14      	ite	ne
 80002b0:	23fc      	movne	r3, #252	; 0xfc
 80002b2:	2354      	moveq	r3, #84	; 0x54
 80002b4:	e7d7      	b.n	8000266 <HAL_ADC_PollForConversion+0x8a>
 80002b6:	2329      	movs	r3, #41	; 0x29
 80002b8:	e7d5      	b.n	8000266 <HAL_ADC_PollForConversion+0x8a>
 80002ba:	2354      	movs	r3, #84	; 0x54
 80002bc:	e7d3      	b.n	8000266 <HAL_ADC_PollForConversion+0x8a>
 80002be:	23fc      	movs	r3, #252	; 0xfc
 80002c0:	e7d1      	b.n	8000266 <HAL_ADC_PollForConversion+0x8a>
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80002c2:	1c6b      	adds	r3, r5, #1
 80002c4:	d00e      	beq.n	80002e4 <HAL_ADC_PollForConversion+0x108>
      {
        if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 80002c6:	b945      	cbnz	r5, 80002da <HAL_ADC_PollForConversion+0xfe>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80002c8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
          
          return HAL_TIMEOUT;
 80002ca:	2003      	movs	r0, #3
      if(Timeout != HAL_MAX_DELAY)
      {
        if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80002cc:	f043 0304 	orr.w	r3, r3, #4
 80002d0:	62a3      	str	r3, [r4, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80002d2:	2300      	movs	r3, #0
 80002d4:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          
          return HAL_TIMEOUT;
 80002d8:	e018      	b.n	800030c <HAL_ADC_PollForConversion+0x130>
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
      {
        if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 80002da:	f7ff ff6b 	bl	80001b4 <HAL_GetTick>
 80002de:	1bc0      	subs	r0, r0, r7
 80002e0:	4285      	cmp	r5, r0
 80002e2:	d3f1      	bcc.n	80002c8 <HAL_ADC_PollForConversion+0xec>
          __HAL_UNLOCK(hadc);
          
          return HAL_TIMEOUT;
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80002e4:	9b01      	ldr	r3, [sp, #4]
 80002e6:	3301      	adds	r3, #1
 80002e8:	9301      	str	r3, [sp, #4]
 80002ea:	e7be      	b.n	800026a <HAL_ADC_PollForConversion+0x8e>
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80002ec:	68e3      	ldr	r3, [r4, #12]
 80002ee:	b10b      	cbz	r3, 80002f4 <HAL_ADC_PollForConversion+0x118>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80002f0:	2000      	movs	r0, #0
 80002f2:	e00b      	b.n	800030c <HAL_ADC_PollForConversion+0x130>
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
     (hadc->Init.ContinuousConvMode == DISABLE)   )
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80002f4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80002f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80002fa:	62a3      	str	r3, [r4, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80002fc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80002fe:	f410 5080 	ands.w	r0, r0, #4096	; 0x1000
 8000302:	d1f5      	bne.n	80002f0 <HAL_ADC_PollForConversion+0x114>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000304:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000306:	f043 0301 	orr.w	r3, r3, #1
 800030a:	62a3      	str	r3, [r4, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
}
 800030c:	b003      	add	sp, #12
 800030e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000310:	20000110 	.word	0x20000110
 8000314:	24924924 	.word	0x24924924
 8000318:	00924924 	.word	0x00924924
 800031c:	12492492 	.word	0x12492492
 8000320:	00492492 	.word	0x00492492
 8000324:	00249249 	.word	0x00249249

08000328 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000328:	6803      	ldr	r3, [r0, #0]
 800032a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 800032c:	4770      	bx	lr

0800032e <HAL_ADC_ConvCpltCallback>:
 800032e:	4770      	bx	lr

08000330 <HAL_ADC_LevelOutOfWindowCallback>:
 8000330:	4770      	bx	lr

08000332 <HAL_ADC_IRQHandler>:
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8000332:	6803      	ldr	r3, [r0, #0]
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000334:	b510      	push	{r4, lr}
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8000336:	685a      	ldr	r2, [r3, #4]
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000338:	4604      	mov	r4, r0
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 800033a:	0690      	lsls	r0, r2, #26
 800033c:	d527      	bpl.n	800038e <HAL_ADC_IRQHandler+0x5c>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 800033e:	681a      	ldr	r2, [r3, #0]
 8000340:	0791      	lsls	r1, r2, #30
 8000342:	d524      	bpl.n	800038e <HAL_ADC_IRQHandler+0x5c>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000344:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000346:	06d2      	lsls	r2, r2, #27
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000348:	bf5e      	ittt	pl
 800034a:	6aa2      	ldrpl	r2, [r4, #40]	; 0x28
 800034c:	f442 7200 	orrpl.w	r2, r2, #512	; 0x200
 8000350:	62a2      	strpl	r2, [r4, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000352:	689a      	ldr	r2, [r3, #8]
 8000354:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8000358:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 800035c:	d110      	bne.n	8000380 <HAL_ADC_IRQHandler+0x4e>
 800035e:	68e2      	ldr	r2, [r4, #12]
 8000360:	b972      	cbnz	r2, 8000380 <HAL_ADC_IRQHandler+0x4e>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000362:	685a      	ldr	r2, [r3, #4]
 8000364:	f022 0220 	bic.w	r2, r2, #32
 8000368:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800036a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800036c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000370:	62a3      	str	r3, [r4, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000372:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000374:	04db      	lsls	r3, r3, #19
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000376:	bf5e      	ittt	pl
 8000378:	6aa3      	ldrpl	r3, [r4, #40]	; 0x28
 800037a:	f043 0301 	orrpl.w	r3, r3, #1
 800037e:	62a3      	strpl	r3, [r4, #40]	; 0x28
        }
      }

      /* Conversion complete callback */
      HAL_ADC_ConvCpltCallback(hadc);
 8000380:	4620      	mov	r0, r4
 8000382:	f7ff ffd4 	bl	800032e <HAL_ADC_ConvCpltCallback>
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000386:	6823      	ldr	r3, [r4, #0]
 8000388:	f06f 0212 	mvn.w	r2, #18
 800038c:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 800038e:	6823      	ldr	r3, [r4, #0]
 8000390:	685a      	ldr	r2, [r3, #4]
 8000392:	0610      	lsls	r0, r2, #24
 8000394:	d530      	bpl.n	80003f8 <HAL_ADC_IRQHandler+0xc6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8000396:	681a      	ldr	r2, [r3, #0]
 8000398:	0751      	lsls	r1, r2, #29
 800039a:	d52d      	bpl.n	80003f8 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800039c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800039e:	06d2      	lsls	r2, r2, #27
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80003a0:	bf5e      	ittt	pl
 80003a2:	6aa2      	ldrpl	r2, [r4, #40]	; 0x28
 80003a4:	f442 5200 	orrpl.w	r2, r2, #8192	; 0x2000
 80003a8:	62a2      	strpl	r2, [r4, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80003aa:	689a      	ldr	r2, [r3, #8]
 80003ac:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
 80003b0:	f5b2 4fe0 	cmp.w	r2, #28672	; 0x7000
 80003b4:	d00a      	beq.n	80003cc <HAL_ADC_IRQHandler+0x9a>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80003b6:	685a      	ldr	r2, [r3, #4]
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80003b8:	0550      	lsls	r0, r2, #21
 80003ba:	d416      	bmi.n	80003ea <HAL_ADC_IRQHandler+0xb8>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80003bc:	689a      	ldr	r2, [r3, #8]
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80003be:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 80003c2:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 80003c6:	d110      	bne.n	80003ea <HAL_ADC_IRQHandler+0xb8>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80003c8:	68e2      	ldr	r2, [r4, #12]
 80003ca:	b972      	cbnz	r2, 80003ea <HAL_ADC_IRQHandler+0xb8>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80003cc:	685a      	ldr	r2, [r3, #4]
 80003ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80003d2:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80003d4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80003d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80003da:	62a3      	str	r3, [r4, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80003dc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80003de:	05d9      	lsls	r1, r3, #23
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80003e0:	bf5e      	ittt	pl
 80003e2:	6aa3      	ldrpl	r3, [r4, #40]	; 0x28
 80003e4:	f043 0301 	orrpl.w	r3, r3, #1
 80003e8:	62a3      	strpl	r3, [r4, #40]	; 0x28
        }
      }

      /* Conversion complete callback */ 
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80003ea:	4620      	mov	r0, r4
 80003ec:	f000 fa28 	bl	8000840 <HAL_ADCEx_InjectedConvCpltCallback>
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80003f0:	6823      	ldr	r3, [r4, #0]
 80003f2:	f06f 020c 	mvn.w	r2, #12
 80003f6:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 80003f8:	6823      	ldr	r3, [r4, #0]
 80003fa:	685a      	ldr	r2, [r3, #4]
 80003fc:	0652      	lsls	r2, r2, #25
 80003fe:	d50d      	bpl.n	800041c <HAL_ADC_IRQHandler+0xea>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	07db      	lsls	r3, r3, #31
 8000404:	d50a      	bpl.n	800041c <HAL_ADC_IRQHandler+0xea>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000406:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      
      /* Level out of window callback */ 
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000408:	4620      	mov	r0, r4
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800040a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800040e:	62a3      	str	r3, [r4, #40]	; 0x28
      
      /* Level out of window callback */ 
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000410:	f7ff ff8e 	bl	8000330 <HAL_ADC_LevelOutOfWindowCallback>
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000414:	6823      	ldr	r3, [r4, #0]
 8000416:	f06f 0201 	mvn.w	r2, #1
 800041a:	601a      	str	r2, [r3, #0]
 800041c:	bd10      	pop	{r4, pc}
	...

08000420 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000420:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0;
 8000422:	2300      	movs	r3, #0
 8000424:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000426:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800042a:	2b01      	cmp	r3, #1
 800042c:	f000 80ae 	beq.w	800058c <HAL_ADC_ConfigChannel+0x16c>
 8000430:	2301      	movs	r3, #1
 8000432:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8000436:	684b      	ldr	r3, [r1, #4]
 8000438:	6804      	ldr	r4, [r0, #0]
 800043a:	2b06      	cmp	r3, #6
 800043c:	680d      	ldr	r5, [r1, #0]
 800043e:	d818      	bhi.n	8000472 <HAL_ADC_ConfigChannel+0x52>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000440:	6b67      	ldr	r7, [r4, #52]	; 0x34
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000442:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8000446:	fa92 f6a2 	rbit	r6, r2
 800044a:	fab6 f686 	clz	r6, r6
 800044e:	3b01      	subs	r3, #1
 8000450:	fa92 f2a2 	rbit	r2, r2
 8000454:	fab2 f282 	clz	r2, r2
 8000458:	435e      	muls	r6, r3
 800045a:	4353      	muls	r3, r2
 800045c:	f04f 0e1f 	mov.w	lr, #31
 8000460:	fa0e f606 	lsl.w	r6, lr, r6
 8000464:	ea27 0606 	bic.w	r6, r7, r6
 8000468:	fa05 f303 	lsl.w	r3, r5, r3
 800046c:	4333      	orrs	r3, r6
 800046e:	6363      	str	r3, [r4, #52]	; 0x34
 8000470:	e030      	b.n	80004d4 <HAL_ADC_ConfigChannel+0xb4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8000472:	2b0c      	cmp	r3, #12
 8000474:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8000478:	d816      	bhi.n	80004a8 <HAL_ADC_ConfigChannel+0x88>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800047a:	6b27      	ldr	r7, [r4, #48]	; 0x30
 800047c:	fa92 f6a2 	rbit	r6, r2
 8000480:	fab6 f686 	clz	r6, r6
 8000484:	3b07      	subs	r3, #7
 8000486:	fa92 f2a2 	rbit	r2, r2
 800048a:	fab2 f282 	clz	r2, r2
 800048e:	435e      	muls	r6, r3
 8000490:	435a      	muls	r2, r3
 8000492:	f04f 0e1f 	mov.w	lr, #31
 8000496:	fa0e f606 	lsl.w	r6, lr, r6
 800049a:	ea27 0606 	bic.w	r6, r7, r6
 800049e:	fa05 f202 	lsl.w	r2, r5, r2
 80004a2:	4332      	orrs	r2, r6
 80004a4:	6322      	str	r2, [r4, #48]	; 0x30
 80004a6:	e015      	b.n	80004d4 <HAL_ADC_ConfigChannel+0xb4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80004a8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80004aa:	fa92 f6a2 	rbit	r6, r2
 80004ae:	fab6 f686 	clz	r6, r6
 80004b2:	3b0d      	subs	r3, #13
 80004b4:	fa92 f2a2 	rbit	r2, r2
 80004b8:	fab2 f282 	clz	r2, r2
 80004bc:	435e      	muls	r6, r3
 80004be:	4353      	muls	r3, r2
 80004c0:	f04f 0e1f 	mov.w	lr, #31
 80004c4:	fa0e f606 	lsl.w	r6, lr, r6
 80004c8:	ea27 0606 	bic.w	r6, r7, r6
 80004cc:	fa05 f303 	lsl.w	r3, r5, r3
 80004d0:	4333      	orrs	r3, r6
 80004d2:	62e3      	str	r3, [r4, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80004d4:	2d09      	cmp	r5, #9
 80004d6:	f04f 0338 	mov.w	r3, #56	; 0x38
 80004da:	688e      	ldr	r6, [r1, #8]
 80004dc:	d918      	bls.n	8000510 <HAL_ADC_ConfigChannel+0xf0>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80004de:	f8d4 e00c 	ldr.w	lr, [r4, #12]
 80004e2:	fa93 f7a3 	rbit	r7, r3
 80004e6:	fab7 f787 	clz	r7, r7
 80004ea:	f1a5 010a 	sub.w	r1, r5, #10
 80004ee:	fa93 f3a3 	rbit	r3, r3
 80004f2:	fab3 f283 	clz	r2, r3
 80004f6:	fb01 f307 	mul.w	r3, r1, r7
 80004fa:	4351      	muls	r1, r2
 80004fc:	2707      	movs	r7, #7
 80004fe:	fa07 f303 	lsl.w	r3, r7, r3
 8000502:	ea2e 0303 	bic.w	r3, lr, r3
 8000506:	fa06 f201 	lsl.w	r2, r6, r1
 800050a:	431a      	orrs	r2, r3
 800050c:	60e2      	str	r2, [r4, #12]
 800050e:	e013      	b.n	8000538 <HAL_ADC_ConfigChannel+0x118>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000510:	6927      	ldr	r7, [r4, #16]
 8000512:	fa93 f1a3 	rbit	r1, r3
 8000516:	fab1 f181 	clz	r1, r1
 800051a:	fa93 f3a3 	rbit	r3, r3
 800051e:	fab3 f383 	clz	r3, r3
 8000522:	4369      	muls	r1, r5
 8000524:	436b      	muls	r3, r5
 8000526:	2207      	movs	r2, #7
 8000528:	fa02 f101 	lsl.w	r1, r2, r1
 800052c:	ea27 0101 	bic.w	r1, r7, r1
 8000530:	fa06 f203 	lsl.w	r2, r6, r3
 8000534:	430a      	orrs	r2, r1
 8000536:	6122      	str	r2, [r4, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000538:	f1a5 0310 	sub.w	r3, r5, #16
 800053c:	2b01      	cmp	r3, #1
 800053e:	d901      	bls.n	8000544 <HAL_ADC_ConfigChannel+0x124>
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000540:	2300      	movs	r3, #0
 8000542:	e01e      	b.n	8000582 <HAL_ADC_ConfigChannel+0x162>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000544:	4b13      	ldr	r3, [pc, #76]	; (8000594 <HAL_ADC_ConfigChannel+0x174>)
 8000546:	429c      	cmp	r4, r3
 8000548:	d116      	bne.n	8000578 <HAL_ADC_ConfigChannel+0x158>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800054a:	68a3      	ldr	r3, [r4, #8]
 800054c:	021b      	lsls	r3, r3, #8
 800054e:	d4f7      	bmi.n	8000540 <HAL_ADC_ConfigChannel+0x120>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000550:	68a3      	ldr	r3, [r4, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000552:	2d10      	cmp	r5, #16
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000554:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000558:	60a3      	str	r3, [r4, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800055a:	d1f1      	bne.n	8000540 <HAL_ADC_ConfigChannel+0x120>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800055c:	4b0e      	ldr	r3, [pc, #56]	; (8000598 <HAL_ADC_ConfigChannel+0x178>)
 800055e:	4a0f      	ldr	r2, [pc, #60]	; (800059c <HAL_ADC_ConfigChannel+0x17c>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	fbb3 f2f2 	udiv	r2, r3, r2
 8000566:	230a      	movs	r3, #10
 8000568:	4353      	muls	r3, r2
          while(wait_loop_index != 0)
          {
            wait_loop_index--;
 800056a:	9301      	str	r3, [sp, #4]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
          while(wait_loop_index != 0)
 800056c:	9b01      	ldr	r3, [sp, #4]
 800056e:	2b00      	cmp	r3, #0
 8000570:	d0e6      	beq.n	8000540 <HAL_ADC_ConfigChannel+0x120>
          {
            wait_loop_index--;
 8000572:	9b01      	ldr	r3, [sp, #4]
 8000574:	3b01      	subs	r3, #1
 8000576:	e7f8      	b.n	800056a <HAL_ADC_ConfigChannel+0x14a>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000578:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800057a:	f043 0320 	orr.w	r3, r3, #32
 800057e:	6283      	str	r3, [r0, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000580:	2301      	movs	r3, #1
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000582:	2200      	movs	r2, #0
 8000584:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000588:	4618      	mov	r0, r3
 800058a:	e000      	b.n	800058e <HAL_ADC_ConfigChannel+0x16e>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800058c:	2002      	movs	r0, #2
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
  /* Return function status */
  return tmp_hal_status;
}
 800058e:	b003      	add	sp, #12
 8000590:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000592:	bf00      	nop
 8000594:	40012400 	.word	0x40012400
 8000598:	20000110 	.word	0x20000110
 800059c:	000f4240 	.word	0x000f4240

080005a0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80005a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint32_t tickstart = 0;
  __IO uint32_t wait_loop_index = 0;
 80005a2:	2300      	movs	r3, #0
 80005a4:	9301      	str	r3, [sp, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80005a6:	6803      	ldr	r3, [r0, #0]
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80005a8:	4604      	mov	r4, r0
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80005aa:	689a      	ldr	r2, [r3, #8]
 80005ac:	07d2      	lsls	r2, r2, #31
 80005ae:	d501      	bpl.n	80005b4 <ADC_Enable+0x14>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80005b0:	2000      	movs	r0, #0
 80005b2:	e026      	b.n	8000602 <ADC_Enable+0x62>
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80005b4:	689a      	ldr	r2, [r3, #8]
 80005b6:	f042 0201 	orr.w	r2, r2, #1
 80005ba:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80005bc:	4b12      	ldr	r3, [pc, #72]	; (8000608 <ADC_Enable+0x68>)
 80005be:	4a13      	ldr	r2, [pc, #76]	; (800060c <ADC_Enable+0x6c>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	fbb3 f3f2 	udiv	r3, r3, r2
    while(wait_loop_index != 0)
    {
      wait_loop_index--;
 80005c6:	9301      	str	r3, [sp, #4]
    __HAL_ADC_ENABLE(hadc);
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
    while(wait_loop_index != 0)
 80005c8:	9b01      	ldr	r3, [sp, #4]
 80005ca:	b113      	cbz	r3, 80005d2 <ADC_Enable+0x32>
    {
      wait_loop_index--;
 80005cc:	9b01      	ldr	r3, [sp, #4]
 80005ce:	3b01      	subs	r3, #1
 80005d0:	e7f9      	b.n	80005c6 <ADC_Enable+0x26>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80005d2:	f7ff fdef 	bl	80001b4 <HAL_GetTick>
 80005d6:	4606      	mov	r6, r0

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80005d8:	6823      	ldr	r3, [r4, #0]
 80005da:	689b      	ldr	r3, [r3, #8]
 80005dc:	f013 0501 	ands.w	r5, r3, #1
 80005e0:	d1e6      	bne.n	80005b0 <ADC_Enable+0x10>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80005e2:	f7ff fde7 	bl	80001b4 <HAL_GetTick>
 80005e6:	1b80      	subs	r0, r0, r6
 80005e8:	2802      	cmp	r0, #2
 80005ea:	d9f5      	bls.n	80005d8 <ADC_Enable+0x38>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80005ec:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80005ee:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
    while(ADC_IS_ENABLE(hadc) == RESET)
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80005f2:	f043 0310 	orr.w	r3, r3, #16
 80005f6:	62a3      	str	r3, [r4, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80005f8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80005fa:	2001      	movs	r0, #1
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80005fc:	f043 0301 	orr.w	r3, r3, #1
 8000600:	62e3      	str	r3, [r4, #44]	; 0x2c
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
}
 8000602:	b002      	add	sp, #8
 8000604:	bd70      	pop	{r4, r5, r6, pc}
 8000606:	bf00      	nop
 8000608:	20000110 	.word	0x20000110
 800060c:	000f4240 	.word	0x000f4240

08000610 <HAL_ADC_Start>:
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000610:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000614:	b510      	push	{r4, lr}
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000616:	2b01      	cmp	r3, #1
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000618:	4604      	mov	r4, r0
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800061a:	d055      	beq.n	80006c8 <HAL_ADC_Start+0xb8>
 800061c:	2301      	movs	r3, #1
 800061e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000622:	f7ff ffbd 	bl	80005a0 <ADC_Enable>
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000626:	2800      	cmp	r0, #0
 8000628:	d14a      	bne.n	80006c0 <HAL_ADC_Start+0xb0>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 800062a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800062c:	4a27      	ldr	r2, [pc, #156]	; (80006cc <HAL_ADC_Start+0xbc>)
  if (tmp_hal_status == HAL_OK)
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 800062e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000632:	f023 0301 	bic.w	r3, r3, #1
 8000636:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800063a:	62a3      	str	r3, [r4, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800063c:	6823      	ldr	r3, [r4, #0]
 800063e:	4293      	cmp	r3, r2
 8000640:	d104      	bne.n	800064c <HAL_ADC_Start+0x3c>
 8000642:	4923      	ldr	r1, [pc, #140]	; (80006d0 <HAL_ADC_Start+0xc0>)
 8000644:	684a      	ldr	r2, [r1, #4]
 8000646:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 800064a:	d105      	bne.n	8000658 <HAL_ADC_Start+0x48>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800064c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800064e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8000652:	62a2      	str	r2, [r4, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000654:	685a      	ldr	r2, [r3, #4]
 8000656:	e004      	b.n	8000662 <HAL_ADC_Start+0x52>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000658:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800065a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800065e:	62a2      	str	r2, [r4, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000660:	684a      	ldr	r2, [r1, #4]
 8000662:	0552      	lsls	r2, r2, #21
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000664:	bf41      	itttt	mi
 8000666:	6aa2      	ldrmi	r2, [r4, #40]	; 0x28
 8000668:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 800066c:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 8000670:	62a2      	strmi	r2, [r4, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000672:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000674:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000678:	bf1c      	itt	ne
 800067a:	6ae2      	ldrne	r2, [r4, #44]	; 0x2c
 800067c:	f022 0206 	bicne.w	r2, r2, #6
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000680:	62e2      	str	r2, [r4, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000682:	2200      	movs	r2, #0
 8000684:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000688:	f06f 0202 	mvn.w	r2, #2
 800068c:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800068e:	689a      	ldr	r2, [r3, #8]
 8000690:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8000694:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8000698:	d10c      	bne.n	80006b4 <HAL_ADC_Start+0xa4>
 800069a:	4a0c      	ldr	r2, [pc, #48]	; (80006cc <HAL_ADC_Start+0xbc>)
 800069c:	4293      	cmp	r3, r2
 800069e:	d105      	bne.n	80006ac <HAL_ADC_Start+0x9c>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80006a0:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 80006a4:	6852      	ldr	r2, [r2, #4]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80006a6:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 80006aa:	d103      	bne.n	80006b4 <HAL_ADC_Start+0xa4>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80006ac:	689a      	ldr	r2, [r3, #8]
 80006ae:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80006b2:	e002      	b.n	80006ba <HAL_ADC_Start+0xaa>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80006b4:	689a      	ldr	r2, [r3, #8]
 80006b6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80006ba:	609a      	str	r2, [r3, #8]
 80006bc:	2000      	movs	r0, #0
 80006be:	bd10      	pop	{r4, pc}
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80006c0:	2300      	movs	r3, #0
 80006c2:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 80006c6:	bd10      	pop	{r4, pc}
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80006c8:	2002      	movs	r0, #2
    __HAL_UNLOCK(hadc);
  }
    
  /* Return function status */
  return tmp_hal_status;
}
 80006ca:	bd10      	pop	{r4, pc}
 80006cc:	40012800 	.word	0x40012800
 80006d0:	40012400 	.word	0x40012400

080006d4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80006d4:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80006d6:	6803      	ldr	r3, [r0, #0]
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80006d8:	4604      	mov	r4, r0
  uint32_t tickstart = 0;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80006da:	689a      	ldr	r2, [r3, #8]
 80006dc:	07d2      	lsls	r2, r2, #31
 80006de:	d401      	bmi.n	80006e4 <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80006e0:	2000      	movs	r0, #0
 80006e2:	bd38      	pop	{r3, r4, r5, pc}
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80006e4:	689a      	ldr	r2, [r3, #8]
 80006e6:	f022 0201 	bic.w	r2, r2, #1
 80006ea:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80006ec:	f7ff fd62 	bl	80001b4 <HAL_GetTick>
 80006f0:	4605      	mov	r5, r0
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80006f2:	6823      	ldr	r3, [r4, #0]
 80006f4:	689b      	ldr	r3, [r3, #8]
 80006f6:	07db      	lsls	r3, r3, #31
 80006f8:	d5f2      	bpl.n	80006e0 <ADC_ConversionStop_Disable+0xc>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80006fa:	f7ff fd5b 	bl	80001b4 <HAL_GetTick>
 80006fe:	1b40      	subs	r0, r0, r5
 8000700:	2802      	cmp	r0, #2
 8000702:	d9f6      	bls.n	80006f2 <ADC_ConversionStop_Disable+0x1e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000704:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000706:	2001      	movs	r0, #1
    while(ADC_IS_ENABLE(hadc) != RESET)
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000708:	f043 0310 	orr.w	r3, r3, #16
 800070c:	62a3      	str	r3, [r4, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800070e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000710:	f043 0301 	orr.w	r3, r3, #1
 8000714:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000716:	bd38      	pop	{r3, r4, r5, pc}

08000718 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000718:	b538      	push	{r3, r4, r5, lr}
  uint32_t tmp_cr1 = 0;
  uint32_t tmp_cr2 = 0;
  uint32_t tmp_sqr1 = 0;
  
  /* Check ADC handle */
  if(hadc == NULL)
 800071a:	4604      	mov	r4, r0
 800071c:	2800      	cmp	r0, #0
 800071e:	f000 8088 	beq.w	8000832 <HAL_ADC_Init+0x11a>
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000722:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000724:	b923      	cbnz	r3, 8000730 <HAL_ADC_Init+0x18>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000726:	62c3      	str	r3, [r0, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000728:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800072c:	f002 ff22 	bl	8003574 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000730:	4620      	mov	r0, r4
 8000732:	f7ff ffcf 	bl	80006d4 <ADC_ConversionStop_Disable>
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000736:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000738:	f013 0f10 	tst.w	r3, #16
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800073c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800073e:	d175      	bne.n	800082c <HAL_ADC_Init+0x114>
 8000740:	2800      	cmp	r0, #0
 8000742:	d173      	bne.n	800082c <HAL_ADC_Init+0x114>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000744:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000748:	f023 0302 	bic.w	r3, r3, #2
 800074c:	f043 0302 	orr.w	r3, r3, #2
 8000750:	62a3      	str	r3, [r4, #40]	; 0x28
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                               |
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 8000752:	68e0      	ldr	r0, [r4, #12]
 8000754:	2302      	movs	r3, #2
 8000756:	fa93 f3a3 	rbit	r3, r3
 800075a:	fab3 f383 	clz	r3, r3
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                               |
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 800075e:	6861      	ldr	r1, [r4, #4]
 8000760:	69e2      	ldr	r2, [r4, #28]
 8000762:	fa00 f303 	lsl.w	r3, r0, r3
 8000766:	430a      	orrs	r2, r1
    
    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000768:	68a1      	ldr	r1, [r4, #8]
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                               |
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 800076a:	4313      	orrs	r3, r2
    
    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800076c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8000770:	d005      	beq.n	800077e <HAL_ADC_Init+0x66>
 8000772:	2901      	cmp	r1, #1
 8000774:	bf14      	ite	ne
 8000776:	2200      	movne	r2, #0
 8000778:	f44f 7280 	moveq.w	r2, #256	; 0x100
 800077c:	e000      	b.n	8000780 <HAL_ADC_Init+0x68>
 800077e:	460a      	mov	r2, r1
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000780:	6965      	ldr	r5, [r4, #20]
 8000782:	2d01      	cmp	r5, #1
 8000784:	d115      	bne.n	80007b2 <HAL_ADC_Init+0x9a>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000786:	b960      	cbnz	r0, 80007a2 <HAL_ADC_Init+0x8a>
 8000788:	f44f 4060 	mov.w	r0, #57344	; 0xe000
 800078c:	fa90 f0a0 	rbit	r0, r0
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000790:	fab0 f580 	clz	r5, r0
 8000794:	69a0      	ldr	r0, [r4, #24]
 8000796:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800079a:	3801      	subs	r0, #1
 800079c:	40a8      	lsls	r0, r5
 800079e:	4302      	orrs	r2, r0
 80007a0:	e007      	b.n	80007b2 <HAL_ADC_Init+0x9a>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80007a2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80007a4:	f040 0020 	orr.w	r0, r0, #32
 80007a8:	62a0      	str	r0, [r4, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80007aa:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80007ac:	f040 0001 	orr.w	r0, r0, #1
 80007b0:	62e0      	str	r0, [r4, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80007b2:	6820      	ldr	r0, [r4, #0]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80007b4:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80007b8:	6845      	ldr	r5, [r0, #4]
 80007ba:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 80007be:	ea42 0205 	orr.w	r2, r2, r5
 80007c2:	6042      	str	r2, [r0, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80007c4:	6885      	ldr	r5, [r0, #8]
 80007c6:	4a1c      	ldr	r2, [pc, #112]	; (8000838 <HAL_ADC_Init+0x120>)
 80007c8:	ea02 0205 	and.w	r2, r2, r5
 80007cc:	ea42 0203 	orr.w	r2, r2, r3
 80007d0:	6082      	str	r2, [r0, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80007d2:	d001      	beq.n	80007d8 <HAL_ADC_Init+0xc0>
 80007d4:	2901      	cmp	r1, #1
 80007d6:	d10a      	bne.n	80007ee <HAL_ADC_Init+0xd6>
 80007d8:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
 80007dc:	fa92 f2a2 	rbit	r2, r2
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80007e0:	fab2 f282 	clz	r2, r2
 80007e4:	6921      	ldr	r1, [r4, #16]
 80007e6:	3901      	subs	r1, #1
 80007e8:	fa01 f202 	lsl.w	r2, r1, r2
 80007ec:	e000      	b.n	80007f0 <HAL_ADC_Init+0xd8>
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_cr1 = 0;
  uint32_t tmp_cr2 = 0;
  uint32_t tmp_sqr1 = 0;
 80007ee:	2200      	movs	r2, #0
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80007f0:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80007f2:	f421 0170 	bic.w	r1, r1, #15728640	; 0xf00000
 80007f6:	430a      	orrs	r2, r1
 80007f8:	62c2      	str	r2, [r0, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80007fa:	6881      	ldr	r1, [r0, #8]
 80007fc:	4a0f      	ldr	r2, [pc, #60]	; (800083c <HAL_ADC_Init+0x124>)
 80007fe:	400a      	ands	r2, r1
 8000800:	4293      	cmp	r3, r2
 8000802:	d108      	bne.n	8000816 <HAL_ADC_Init+0xfe>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000804:	2000      	movs	r0, #0
 8000806:	62e0      	str	r0, [r4, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000808:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800080a:	f023 0303 	bic.w	r3, r3, #3
 800080e:	f043 0301 	orr.w	r3, r3, #1
 8000812:	62a3      	str	r3, [r4, #40]	; 0x28
 8000814:	bd38      	pop	{r3, r4, r5, pc}
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000816:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000818:	f023 0312 	bic.w	r3, r3, #18
 800081c:	f043 0310 	orr.w	r3, r3, #16
 8000820:	62a3      	str	r3, [r4, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000822:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000824:	f043 0301 	orr.w	r3, r3, #1
 8000828:	62e3      	str	r3, [r4, #44]	; 0x2c
 800082a:	e002      	b.n	8000832 <HAL_ADC_Init+0x11a>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800082c:	f043 0310 	orr.w	r3, r3, #16
 8000830:	62a3      	str	r3, [r4, #40]	; 0x28
  uint32_t tmp_sqr1 = 0;
  
  /* Check ADC handle */
  if(hadc == NULL)
  {
    return HAL_ERROR;
 8000832:	2001      	movs	r0, #1
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 8000834:	bd38      	pop	{r3, r4, r5, pc}
 8000836:	bf00      	nop
 8000838:	ffe1f7fd 	.word	0xffe1f7fd
 800083c:	ff1f0efe 	.word	0xff1f0efe

08000840 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000840:	4770      	bx	lr
	...

08000844 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000844:	4a07      	ldr	r2, [pc, #28]	; (8000864 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8000846:	0200      	lsls	r0, r0, #8
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000848:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 800084a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 800084e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000852:	041b      	lsls	r3, r3, #16
 8000854:	0c1b      	lsrs	r3, r3, #16
 8000856:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800085a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800085e:	4303      	orrs	r3, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8000860:	60d3      	str	r3, [r2, #12]
 8000862:	4770      	bx	lr
 8000864:	e000ed00 	.word	0xe000ed00

08000868 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000868:	4b17      	ldr	r3, [pc, #92]	; (80008c8 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800086a:	b530      	push	{r4, r5, lr}
 800086c:	68db      	ldr	r3, [r3, #12]
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800086e:	f3c3 2302 	ubfx	r3, r3, #8, #3
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000872:	f1c3 0407 	rsb	r4, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000876:	1d1d      	adds	r5, r3, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000878:	2c04      	cmp	r4, #4
 800087a:	bf28      	it	cs
 800087c:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800087e:	2d06      	cmp	r5, #6

  return (
 8000880:	f04f 0501 	mov.w	r5, #1
 8000884:	fa05 f404 	lsl.w	r4, r5, r4
 8000888:	f104 34ff 	add.w	r4, r4, #4294967295
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800088c:	bf8c      	ite	hi
 800088e:	3b03      	subhi	r3, #3
 8000890:	2300      	movls	r3, #0

  return (
 8000892:	400c      	ands	r4, r1
 8000894:	409c      	lsls	r4, r3
 8000896:	fa05 f303 	lsl.w	r3, r5, r3
 800089a:	3b01      	subs	r3, #1
 800089c:	401a      	ands	r2, r3
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 800089e:	2800      	cmp	r0, #0
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 80008a0:	ea42 0204 	orr.w	r2, r2, r4
 80008a4:	ea4f 1202 	mov.w	r2, r2, lsl #4
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008a8:	bfaf      	iteee	ge
 80008aa:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008ae:	4b07      	ldrlt	r3, [pc, #28]	; (80008cc <HAL_NVIC_SetPriority+0x64>)
 80008b0:	f000 000f 	andlt.w	r0, r0, #15
 80008b4:	b2d2      	uxtblt	r2, r2
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008b6:	bfa5      	ittet	ge
 80008b8:	b2d2      	uxtbge	r2, r2
 80008ba:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008be:	541a      	strblt	r2, [r3, r0]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008c0:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80008c4:	bd30      	pop	{r4, r5, pc}
 80008c6:	bf00      	nop
 80008c8:	e000ed00 	.word	0xe000ed00
 80008cc:	e000ed14 	.word	0xe000ed14

080008d0 <HAL_NVIC_EnableIRQ>:
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80008d0:	0942      	lsrs	r2, r0, #5
 80008d2:	2301      	movs	r3, #1
 80008d4:	f000 001f 	and.w	r0, r0, #31
 80008d8:	fa03 f000 	lsl.w	r0, r3, r0
 80008dc:	4b01      	ldr	r3, [pc, #4]	; (80008e4 <HAL_NVIC_EnableIRQ+0x14>)
 80008de:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80008e2:	4770      	bx	lr
 80008e4:	e000e100 	.word	0xe000e100

080008e8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008e8:	3801      	subs	r0, #1
 80008ea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80008ee:	d20a      	bcs.n	8000906 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008f0:	4b06      	ldr	r3, [pc, #24]	; (800090c <HAL_SYSTICK_Config+0x24>)
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008f2:	4a07      	ldr	r2, [pc, #28]	; (8000910 <HAL_SYSTICK_Config+0x28>)
 80008f4:	21f0      	movs	r1, #240	; 0xf0
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008f6:	6058      	str	r0, [r3, #4]
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008f8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008fc:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008fe:	2207      	movs	r2, #7
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000900:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000902:	601a      	str	r2, [r3, #0]
 8000904:	4770      	bx	lr
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
 8000906:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop
 800090c:	e000e010 	.word	0xe000e010
 8000910:	e000ed00 	.word	0xe000ed00

08000914 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000914:	4b04      	ldr	r3, [pc, #16]	; (8000928 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000916:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000918:	681a      	ldr	r2, [r3, #0]
 800091a:	bf0c      	ite	eq
 800091c:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000920:	f022 0204 	bicne.w	r2, r2, #4
 8000924:	601a      	str	r2, [r3, #0]
 8000926:	4770      	bx	lr
 8000928:	e000e010 	.word	0xe000e010

0800092c <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 800092c:	4770      	bx	lr

0800092e <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800092e:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000930:	f7ff fffc 	bl	800092c <HAL_SYSTICK_Callback>
 8000934:	bd08      	pop	{r3, pc}
	...

08000938 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000938:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00;
  uint32_t iocurrent = 0x00;
  uint32_t temp = 0x00;
  uint32_t config = 0x00;
 800093c:	2400      	movs	r4, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800093e:	4626      	mov	r6, r4
 8000940:	4b62      	ldr	r3, [pc, #392]	; (8000acc <HAL_GPIO_Init+0x194>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000942:	f8df e194 	ldr.w	lr, [pc, #404]	; 8000ad8 <HAL_GPIO_Init+0x1a0>
 8000946:	f8df c194 	ldr.w	ip, [pc, #404]	; 8000adc <HAL_GPIO_Init+0x1a4>

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800094a:	2201      	movs	r2, #1
    
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if (iocurrent == ioposition)
 800094c:	680d      	ldr	r5, [r1, #0]

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800094e:	40b2      	lsls	r2, r6
    
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if (iocurrent == ioposition)
 8000950:	ea32 0505 	bics.w	r5, r2, r5
 8000954:	f040 80b3 	bne.w	8000abe <HAL_GPIO_Init+0x186>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000958:	684d      	ldr	r5, [r1, #4]
 800095a:	2d12      	cmp	r5, #18
 800095c:	d028      	beq.n	80009b0 <HAL_GPIO_Init+0x78>
 800095e:	d80e      	bhi.n	800097e <HAL_GPIO_Init+0x46>
 8000960:	2d02      	cmp	r5, #2
 8000962:	d022      	beq.n	80009aa <HAL_GPIO_Init+0x72>
 8000964:	d804      	bhi.n	8000970 <HAL_GPIO_Init+0x38>
 8000966:	b335      	cbz	r5, 80009b6 <HAL_GPIO_Init+0x7e>
 8000968:	2d01      	cmp	r5, #1
 800096a:	d12d      	bne.n	80009c8 <HAL_GPIO_Init+0x90>
      {
        /* If we are configuring the pin in OUTPUT push-pull mode */
        case GPIO_MODE_OUTPUT_PP:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800096c:	68cc      	ldr	r4, [r1, #12]
          break;
 800096e:	e02b      	b.n	80009c8 <HAL_GPIO_Init+0x90>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000970:	2d03      	cmp	r5, #3
 8000972:	d018      	beq.n	80009a6 <HAL_GPIO_Init+0x6e>
 8000974:	2d11      	cmp	r5, #17
 8000976:	d127      	bne.n	80009c8 <HAL_GPIO_Init+0x90>
          
        /* If we are configuring the pin in OUTPUT open-drain mode */
        case GPIO_MODE_OUTPUT_OD:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000978:	68cc      	ldr	r4, [r1, #12]
 800097a:	3404      	adds	r4, #4
          break;
 800097c:	e024      	b.n	80009c8 <HAL_GPIO_Init+0x90>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800097e:	4f54      	ldr	r7, [pc, #336]	; (8000ad0 <HAL_GPIO_Init+0x198>)
 8000980:	42bd      	cmp	r5, r7
 8000982:	d018      	beq.n	80009b6 <HAL_GPIO_Init+0x7e>
 8000984:	d806      	bhi.n	8000994 <HAL_GPIO_Init+0x5c>
 8000986:	f8df 8158 	ldr.w	r8, [pc, #344]	; 8000ae0 <HAL_GPIO_Init+0x1a8>
 800098a:	4545      	cmp	r5, r8
 800098c:	d013      	beq.n	80009b6 <HAL_GPIO_Init+0x7e>
 800098e:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
 8000992:	e005      	b.n	80009a0 <HAL_GPIO_Init+0x68>
 8000994:	4575      	cmp	r5, lr
 8000996:	d00e      	beq.n	80009b6 <HAL_GPIO_Init+0x7e>
 8000998:	4565      	cmp	r5, ip
 800099a:	d00c      	beq.n	80009b6 <HAL_GPIO_Init+0x7e>
 800099c:	f8df 8144 	ldr.w	r8, [pc, #324]	; 8000ae4 <HAL_GPIO_Init+0x1ac>
 80009a0:	4545      	cmp	r5, r8
 80009a2:	d111      	bne.n	80009c8 <HAL_GPIO_Init+0x90>
 80009a4:	e007      	b.n	80009b6 <HAL_GPIO_Init+0x7e>
          }
          break; 
          
        /* If we are configuring the pin in INPUT analog mode */
        case GPIO_MODE_ANALOG:
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80009a6:	2400      	movs	r4, #0
 80009a8:	e00e      	b.n	80009c8 <HAL_GPIO_Init+0x90>
          
        /* If we are configuring the pin in ALTERNATE FUNCTION push-pull mode */
        case GPIO_MODE_AF_PP:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80009aa:	68cc      	ldr	r4, [r1, #12]
 80009ac:	3408      	adds	r4, #8
          break;
 80009ae:	e00b      	b.n	80009c8 <HAL_GPIO_Init+0x90>
          
        /* If we are configuring the pin in ALTERNATE FUNCTION open-drain mode */
        case GPIO_MODE_AF_OD:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80009b0:	68cc      	ldr	r4, [r1, #12]
 80009b2:	340c      	adds	r4, #12
          break;
 80009b4:	e008      	b.n	80009c8 <HAL_GPIO_Init+0x90>
        case GPIO_MODE_EVT_RISING:
        case GPIO_MODE_EVT_FALLING:
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if(GPIO_Init->Pull == GPIO_NOPULL)
 80009b6:	688c      	ldr	r4, [r1, #8]
 80009b8:	b12c      	cbz	r4, 80009c6 <HAL_GPIO_Init+0x8e>
          {  
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
          }
          else if(GPIO_Init->Pull == GPIO_PULLUP)
 80009ba:	2c01      	cmp	r4, #1
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
            
            /* Set the corresponding ODR bit */
            GPIOx->BSRR = ioposition;
 80009bc:	bf0c      	ite	eq
 80009be:	6102      	streq	r2, [r0, #16]
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
            
            /* Reset the corresponding ODR bit */
            GPIOx->BRR = ioposition;
 80009c0:	6142      	strne	r2, [r0, #20]
            /* Set the corresponding ODR bit */
            GPIOx->BSRR = ioposition;
          }
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009c2:	2408      	movs	r4, #8
 80009c4:	e000      	b.n	80009c8 <HAL_GPIO_Init+0x90>
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if(GPIO_Init->Pull == GPIO_NOPULL)
          {  
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80009c6:	2404      	movs	r4, #4
          break;
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80009c8:	2aff      	cmp	r2, #255	; 0xff
 80009ca:	bf97      	itett	ls
 80009cc:	4683      	movls	fp, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2) : ((position - 8) << 2);
 80009ce:	f1a6 0508 	subhi.w	r5, r6, #8
          break;
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80009d2:	f8d0 9000 	ldrls.w	r9, [r0]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2) : ((position - 8) << 2);
 80009d6:	00b5      	lslls	r5, r6, #2
          break;
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80009d8:	bf84      	itt	hi
 80009da:	f8d0 9004 	ldrhi.w	r9, [r0, #4]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2) : ((position - 8) << 2);
 80009de:	00ad      	lslhi	r5, r5, #2
      
      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 80009e0:	f04f 080f 	mov.w	r8, #15
 80009e4:	fa08 fa05 	lsl.w	sl, r8, r5
 80009e8:	ea29 090a 	bic.w	r9, r9, sl
 80009ec:	fa04 f505 	lsl.w	r5, r4, r5
          break;
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80009f0:	bf88      	it	hi
 80009f2:	f100 0b04 	addhi.w	fp, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2) : ((position - 8) << 2);
      
      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 80009f6:	ea49 0505 	orr.w	r5, r9, r5
 80009fa:	f8cb 5000 	str.w	r5, [fp]
      
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80009fe:	f8d1 9004 	ldr.w	r9, [r1, #4]
 8000a02:	f019 5f80 	tst.w	r9, #268435456	; 0x10000000
 8000a06:	d05a      	beq.n	8000abe <HAL_GPIO_Init+0x186>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a08:	4d32      	ldr	r5, [pc, #200]	; (8000ad4 <HAL_GPIO_Init+0x19c>)
 8000a0a:	4f32      	ldr	r7, [pc, #200]	; (8000ad4 <HAL_GPIO_Init+0x19c>)
 8000a0c:	69ad      	ldr	r5, [r5, #24]
        temp = AFIO->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000a0e:	f006 0a03 	and.w	sl, r6, #3
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a12:	f045 0501 	orr.w	r5, r5, #1
 8000a16:	61bd      	str	r5, [r7, #24]
 8000a18:	69bd      	ldr	r5, [r7, #24]
        temp = AFIO->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000a1a:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a1e:	f005 0501 	and.w	r5, r5, #1
 8000a22:	9501      	str	r5, [sp, #4]
 8000a24:	9d01      	ldr	r5, [sp, #4]
 8000a26:	f026 0503 	bic.w	r5, r6, #3
 8000a2a:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 8000a2e:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2];
 8000a32:	f8d5 b008 	ldr.w	fp, [r5, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000a36:	f5a7 3784 	sub.w	r7, r7, #67584	; 0x10800
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
        temp = AFIO->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000a3a:	fa08 f80a 	lsl.w	r8, r8, sl
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000a3e:	42b8      	cmp	r0, r7
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
        temp = AFIO->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000a40:	ea2b 0808 	bic.w	r8, fp, r8
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000a44:	d010      	beq.n	8000a68 <HAL_GPIO_Init+0x130>
 8000a46:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000a4a:	42b8      	cmp	r0, r7
 8000a4c:	d00f      	beq.n	8000a6e <HAL_GPIO_Init+0x136>
 8000a4e:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000a52:	42b8      	cmp	r0, r7
 8000a54:	d00e      	beq.n	8000a74 <HAL_GPIO_Init+0x13c>
 8000a56:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000a5a:	42b8      	cmp	r0, r7
 8000a5c:	bf0c      	ite	eq
 8000a5e:	f04f 0b03 	moveq.w	fp, #3
 8000a62:	f04f 0b04 	movne.w	fp, #4
 8000a66:	e007      	b.n	8000a78 <HAL_GPIO_Init+0x140>
 8000a68:	f04f 0b00 	mov.w	fp, #0
 8000a6c:	e004      	b.n	8000a78 <HAL_GPIO_Init+0x140>
 8000a6e:	f04f 0b01 	mov.w	fp, #1
 8000a72:	e001      	b.n	8000a78 <HAL_GPIO_Init+0x140>
 8000a74:	f04f 0b02 	mov.w	fp, #2
 8000a78:	fa0b fa0a 	lsl.w	sl, fp, sl
 8000a7c:	ea4a 0a08 	orr.w	sl, sl, r8
        AFIO->EXTICR[position >> 2] = temp;
 8000a80:	f8c5 a008 	str.w	sl, [r5, #8]
        

        /* Configure the interrupt mask */
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent); 
 8000a84:	681d      	ldr	r5, [r3, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        AFIO->EXTICR[position >> 2] = temp;
        

        /* Configure the interrupt mask */
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a86:	f419 3f80 	tst.w	r9, #65536	; 0x10000
        {
          SET_BIT(EXTI->IMR, iocurrent); 
 8000a8a:	bf14      	ite	ne
 8000a8c:	4315      	orrne	r5, r2
        } 
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent); 
 8000a8e:	4395      	biceq	r5, r2
 8000a90:	601d      	str	r5, [r3, #0]
        } 
        
        /* Configure the event mask */
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent); 
 8000a92:	685d      	ldr	r5, [r3, #4]
        {
          CLEAR_BIT(EXTI->IMR, iocurrent); 
        } 
        
        /* Configure the event mask */
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a94:	f419 3f00 	tst.w	r9, #131072	; 0x20000
        {
          SET_BIT(EXTI->EMR, iocurrent); 
 8000a98:	bf14      	ite	ne
 8000a9a:	4315      	orrne	r5, r2
        } 
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent); 
 8000a9c:	4395      	biceq	r5, r2
 8000a9e:	605d      	str	r5, [r3, #4]
        }
        
        /* Enable or disable the rising trigger */
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent); 
 8000aa0:	689d      	ldr	r5, [r3, #8]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent); 
        }
        
        /* Enable or disable the rising trigger */
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000aa2:	f419 1f80 	tst.w	r9, #1048576	; 0x100000
        {
          SET_BIT(EXTI->RTSR, iocurrent); 
 8000aa6:	bf14      	ite	ne
 8000aa8:	4315      	orrne	r5, r2
        } 
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent); 
 8000aaa:	4395      	biceq	r5, r2
 8000aac:	609d      	str	r5, [r3, #8]
        }
        
        /* Enable or disable the falling trigger */
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent); 
 8000aae:	68dd      	ldr	r5, [r3, #12]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent); 
        }
        
        /* Enable or disable the falling trigger */
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ab0:	f419 1f00 	tst.w	r9, #2097152	; 0x200000
        {
          SET_BIT(EXTI->FTSR, iocurrent); 
 8000ab4:	bf14      	ite	ne
 8000ab6:	432a      	orrne	r2, r5
        } 
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
 8000ab8:	ea25 0202 	biceq.w	r2, r5, r2
 8000abc:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8000abe:	3601      	adds	r6, #1
 8000ac0:	2e10      	cmp	r6, #16
 8000ac2:	f47f af42 	bne.w	800094a <HAL_GPIO_Init+0x12>
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
        }
      }
    }
  }
}
 8000ac6:	b003      	add	sp, #12
 8000ac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000acc:	40010400 	.word	0x40010400
 8000ad0:	10210000 	.word	0x10210000
 8000ad4:	40021000 	.word	0x40021000
 8000ad8:	10310000 	.word	0x10310000
 8000adc:	10320000 	.word	0x10320000
 8000ae0:	10110000 	.word	0x10110000
 8000ae4:	10220000 	.word	0x10220000

08000ae8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ae8:	b902      	cbnz	r2, 8000aec <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000aea:	0409      	lsls	r1, r1, #16
 8000aec:	6101      	str	r1, [r0, #16]
 8000aee:	4770      	bx	lr

08000af0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback
  * @param GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000af0:	4770      	bx	lr
	...

08000af4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief This function handles EXTI interrupt request.
  * @param GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000af4:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8000af6:	4b04      	ldr	r3, [pc, #16]	; (8000b08 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8000af8:	6959      	ldr	r1, [r3, #20]
 8000afa:	4201      	tst	r1, r0
 8000afc:	d002      	beq.n	8000b04 <HAL_GPIO_EXTI_IRQHandler+0x10>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000afe:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000b00:	f7ff fff6 	bl	8000af0 <HAL_GPIO_EXTI_Callback>
 8000b04:	bd08      	pop	{r3, pc}
 8000b06:	bf00      	nop
 8000b08:	40010400 	.word	0x40010400

08000b0c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000b0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t index = 0;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8000b10:	4604      	mov	r4, r0
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000b12:	b086      	sub	sp, #24
  uint32_t index = 0;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8000b14:	2800      	cmp	r0, #0
 8000b16:	d05f      	beq.n	8000bd8 <HAL_PCD_Init+0xcc>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if(hpcd->State == HAL_PCD_STATE_RESET)
 8000b18:	f890 33e9 	ldrb.w	r3, [r0, #1001]	; 0x3e9
 8000b1c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000b20:	b91b      	cbnz	r3, 8000b2a <HAL_PCD_Init+0x1e>
  {  
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000b22:	f880 23e8 	strb.w	r2, [r0, #1000]	; 0x3e8

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000b26:	f002 fe17 	bl	8003758 <HAL_PCD_MspInit>
  }
  
  hpcd->State = HAL_PCD_STATE_BUSY;
  
  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000b2a:	4625      	mov	r5, r4
  
  /*Init the Core (common init.) */
  USB_CoreInit(hpcd->Instance, hpcd->Init);
 8000b2c:	466e      	mov	r6, sp

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
  }
  
  hpcd->State = HAL_PCD_STATE_BUSY;
 8000b2e:	2303      	movs	r3, #3
  
  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000b30:	f855 0b10 	ldr.w	r0, [r5], #16

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
  }
  
  hpcd->State = HAL_PCD_STATE_BUSY;
 8000b34:	f884 33e9 	strb.w	r3, [r4, #1001]	; 0x3e9
  
  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000b38:	f001 fa48 	bl	8001fcc <USB_DisableGlobalInt>
  
  /*Init the Core (common init.) */
  USB_CoreInit(hpcd->Instance, hpcd->Init);
 8000b3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b3e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000b40:	682b      	ldr	r3, [r5, #0]
 8000b42:	1d27      	adds	r7, r4, #4
 8000b44:	6033      	str	r3, [r6, #0]
 8000b46:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8000b4a:	6820      	ldr	r0, [r4, #0]
 8000b4c:	f001 fa2e 	bl	8001fac <USB_CoreInit>
 
  /* Force Device Mode*/
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 8000b50:	2100      	movs	r1, #0
 8000b52:	6820      	ldr	r0, [r4, #0]
 8000b54:	f001 fa44 	bl	8001fe0 <USB_SetCurrentMode>
 
  /* Init endpoints structures */
  for (index = 0; index < 15 ; index++)
 8000b58:	2100      	movs	r1, #0
 8000b5a:	4623      	mov	r3, r4
  
  /*Init the Core (common init.) */
  USB_CoreInit(hpcd->Instance, hpcd->Init);
 
  /* Force Device Mode*/
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 8000b5c:	4622      	mov	r2, r4
    /* Init ep structure */
    hpcd->IN_ep[index].is_in = 1;
    hpcd->IN_ep[index].num = index;
    hpcd->IN_ep[index].tx_fifo_num = index;
    /* Control until ep is actvated */
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 8000b5e:	4608      	mov	r0, r1
 8000b60:	f104 0510 	add.w	r5, r4, #16
 
  /* Init endpoints structures */
  for (index = 0; index < 15 ; index++)
  {
    /* Init ep structure */
    hpcd->IN_ep[index].is_in = 1;
 8000b64:	2601      	movs	r6, #1
    hpcd->IN_ep[index].num = index;
 8000b66:	f882 1028 	strb.w	r1, [r2, #40]	; 0x28
    hpcd->IN_ep[index].tx_fifo_num = index;
 8000b6a:	8691      	strh	r1, [r2, #52]	; 0x34
 
  /* Force Device Mode*/
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 
  /* Init endpoints structures */
  for (index = 0; index < 15 ; index++)
 8000b6c:	3101      	adds	r1, #1
 8000b6e:	290f      	cmp	r1, #15
  {
    /* Init ep structure */
    hpcd->IN_ep[index].is_in = 1;
 8000b70:	f882 6029 	strb.w	r6, [r2, #41]	; 0x29
    hpcd->IN_ep[index].num = index;
    hpcd->IN_ep[index].tx_fifo_num = index;
    /* Control until ep is actvated */
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 8000b74:	f882 002b 	strb.w	r0, [r2, #43]	; 0x2b
    hpcd->IN_ep[index].maxpacket =  0;
 8000b78:	6390      	str	r0, [r2, #56]	; 0x38
    hpcd->IN_ep[index].xfer_buff = 0;
 8000b7a:	63d0      	str	r0, [r2, #60]	; 0x3c
    hpcd->IN_ep[index].xfer_len = 0;
 8000b7c:	6410      	str	r0, [r2, #64]	; 0x40
 8000b7e:	f102 0220 	add.w	r2, r2, #32
 
  /* Force Device Mode*/
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 
  /* Init endpoints structures */
  for (index = 0; index < 15 ; index++)
 8000b82:	d1f0      	bne.n	8000b66 <HAL_PCD_Init+0x5a>
 8000b84:	2200      	movs	r2, #0
    hpcd->IN_ep[index].xfer_len = 0;
  }
  
  for (index = 0; index < 15 ; index++)
  {
    hpcd->OUT_ep[index].is_in = 0;
 8000b86:	4611      	mov	r1, r2
    hpcd->OUT_ep[index].num = index;
 8000b88:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
    hpcd->IN_ep[index].tx_fifo_num = index;
 8000b8c:	869a      	strh	r2, [r3, #52]	; 0x34
    hpcd->IN_ep[index].maxpacket =  0;
    hpcd->IN_ep[index].xfer_buff = 0;
    hpcd->IN_ep[index].xfer_len = 0;
  }
  
  for (index = 0; index < 15 ; index++)
 8000b8e:	3201      	adds	r2, #1
 8000b90:	2a0f      	cmp	r2, #15
  {
    hpcd->OUT_ep[index].is_in = 0;
 8000b92:	f883 1209 	strb.w	r1, [r3, #521]	; 0x209
    hpcd->OUT_ep[index].num = index;
    hpcd->IN_ep[index].tx_fifo_num = index;
    /* Control until ep is activated */
    hpcd->OUT_ep[index].type = EP_TYPE_CTRL;
 8000b96:	f883 120b 	strb.w	r1, [r3, #523]	; 0x20b
    hpcd->OUT_ep[index].maxpacket = 0;
 8000b9a:	f8c3 1218 	str.w	r1, [r3, #536]	; 0x218
    hpcd->OUT_ep[index].xfer_buff = 0;
 8000b9e:	f8c3 121c 	str.w	r1, [r3, #540]	; 0x21c
    hpcd->OUT_ep[index].xfer_len = 0;
 8000ba2:	f8c3 1220 	str.w	r1, [r3, #544]	; 0x220
    hpcd->IN_ep[index].xfer_len = 0;
  }
  
  for (index = 0; index < 15 ; index++)
  {
    hpcd->OUT_ep[index].is_in = 0;
 8000ba6:	f04f 0800 	mov.w	r8, #0
 8000baa:	f103 0320 	add.w	r3, r3, #32
    hpcd->IN_ep[index].maxpacket =  0;
    hpcd->IN_ep[index].xfer_buff = 0;
    hpcd->IN_ep[index].xfer_len = 0;
  }
  
  for (index = 0; index < 15 ; index++)
 8000bae:	d1eb      	bne.n	8000b88 <HAL_PCD_Init+0x7c>
    hpcd->OUT_ep[index].xfer_buff = 0;
    hpcd->OUT_ep[index].xfer_len = 0;
  }
  
  /* Init Device */
  USB_DevInit(hpcd->Instance, hpcd->Init);
 8000bb0:	466e      	mov	r6, sp
 8000bb2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bb4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000bb6:	682b      	ldr	r3, [r5, #0]
 8000bb8:	6033      	str	r3, [r6, #0]
 8000bba:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8000bbe:	6820      	ldr	r0, [r4, #0]
 8000bc0:	f001 fa10 	bl	8001fe4 <USB_DevInit>
  
  hpcd->USB_Address = 0;
  hpcd->State= HAL_PCD_STATE_READY;
 8000bc4:	2301      	movs	r3, #1
  }
  
  /* Init Device */
  USB_DevInit(hpcd->Instance, hpcd->Init);
  
  hpcd->USB_Address = 0;
 8000bc6:	f884 8024 	strb.w	r8, [r4, #36]	; 0x24
  hpcd->State= HAL_PCD_STATE_READY;
  
  USB_DevDisconnect (hpcd->Instance);  
 8000bca:	6820      	ldr	r0, [r4, #0]
  
  /* Init Device */
  USB_DevInit(hpcd->Instance, hpcd->Init);
  
  hpcd->USB_Address = 0;
  hpcd->State= HAL_PCD_STATE_READY;
 8000bcc:	f884 33e9 	strb.w	r3, [r4, #1001]	; 0x3e9
  
  USB_DevDisconnect (hpcd->Instance);  
 8000bd0:	f001 fcc1 	bl	8002556 <USB_DevDisconnect>
  return HAL_OK;
 8000bd4:	4640      	mov	r0, r8
 8000bd6:	e000      	b.n	8000bda <HAL_PCD_Init+0xce>
  uint32_t index = 0;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
  {
    return HAL_ERROR;
 8000bd8:	2001      	movs	r0, #1
  hpcd->USB_Address = 0;
  hpcd->State= HAL_PCD_STATE_READY;
  
  USB_DevDisconnect (hpcd->Instance);  
  return HAL_OK;
}
 8000bda:	b006      	add	sp, #24
 8000bdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000be0 <HAL_PCD_Start>:
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 8000be0:	f890 33e8 	ldrb.w	r3, [r0, #1000]	; 0x3e8
  * @brief  Start The USB Device.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000be4:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8000be6:	2b01      	cmp	r3, #1
  * @brief  Start The USB Device.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000be8:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000bea:	d00e      	beq.n	8000c0a <HAL_PCD_Start+0x2a>
 8000bec:	2101      	movs	r1, #1
 8000bee:	f880 13e8 	strb.w	r1, [r0, #1000]	; 0x3e8
  HAL_PCDEx_SetConnectionState (hpcd, 1);
 8000bf2:	f002 fede 	bl	80039b2 <HAL_PCDEx_SetConnectionState>
  USB_DevConnect (hpcd->Instance);
 8000bf6:	6820      	ldr	r0, [r4, #0]
 8000bf8:	f001 fcab 	bl	8002552 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8000bfc:	6820      	ldr	r0, [r4, #0]
 8000bfe:	f001 f9dc 	bl	8001fba <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8000c02:	2000      	movs	r0, #0
 8000c04:	f884 03e8 	strb.w	r0, [r4, #1000]	; 0x3e8
  return HAL_OK;
 8000c08:	bd10      	pop	{r4, pc}
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 8000c0a:	2002      	movs	r0, #2
  HAL_PCDEx_SetConnectionState (hpcd, 1);
  USB_DevConnect (hpcd->Instance);
  __HAL_PCD_ENABLE(hpcd);
  __HAL_UNLOCK(hpcd);
  return HAL_OK;
}
 8000c0c:	bd10      	pop	{r4, pc}

08000c0e <HAL_PCD_SetAddress>:
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 8000c0e:	f890 23e8 	ldrb.w	r2, [r0, #1000]	; 0x3e8
  * @param  hpcd: PCD handle
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8000c12:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8000c14:	2a01      	cmp	r2, #1
  * @param  hpcd: PCD handle
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8000c16:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000c18:	d00b      	beq.n	8000c32 <HAL_PCD_SetAddress+0x24>
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	f880 23e8 	strb.w	r2, [r0, #1000]	; 0x3e8
  hpcd->USB_Address = address;
 8000c20:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
  USB_SetDevAddress(hpcd->Instance, address);
 8000c24:	6800      	ldr	r0, [r0, #0]
 8000c26:	f001 fc8e 	bl	8002546 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8000c2a:	2000      	movs	r0, #0
 8000c2c:	f884 03e8 	strb.w	r0, [r4, #1000]	; 0x3e8
 8000c30:	bd10      	pop	{r4, pc}
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 8000c32:	2002      	movs	r0, #2
  hpcd->USB_Address = address;
  USB_SetDevAddress(hpcd->Instance, address);
  __HAL_UNLOCK(hpcd);
  return HAL_OK;
}
 8000c34:	bd10      	pop	{r4, pc}

08000c36 <HAL_PCD_EP_Open>:
  * @param  ep_mps: endpoint max packet size
  * @param  ep_type: endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8000c36:	b538      	push	{r3, r4, r5, lr}
 8000c38:	4604      	mov	r4, r0
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep = NULL;
  
  if ((ep_addr & 0x80) == 0x80)
 8000c3a:	b248      	sxtb	r0, r1
 8000c3c:	2800      	cmp	r0, #0
 8000c3e:	f001 057f 	and.w	r5, r1, #127	; 0x7f
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8000c42:	bfb5      	itete	lt
 8000c44:	eb04 1145 	addlt.w	r1, r4, r5, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8000c48:	eb04 1141 	addge.w	r1, r4, r1, lsl #5
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep = NULL;
  
  if ((ep_addr & 0x80) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8000c4c:	3128      	addlt	r1, #40	; 0x28
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8000c4e:	f501 7102 	addge.w	r1, r1, #520	; 0x208
  }
  ep->num   = ep_addr & 0x7F;
  
  ep->is_in = (0x80 & ep_addr) != 0;
 8000c52:	0fc0      	lsrs	r0, r0, #31
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
  }
  ep->num   = ep_addr & 0x7F;
 8000c54:	700d      	strb	r5, [r1, #0]
  
  ep->is_in = (0x80 & ep_addr) != 0;
 8000c56:	7048      	strb	r0, [r1, #1]
  ep->maxpacket = ep_mps;
  ep->type = ep_type;
 8000c58:	70cb      	strb	r3, [r1, #3]
    
  __HAL_LOCK(hpcd);
 8000c5a:	f894 33e8 	ldrb.w	r3, [r4, #1000]	; 0x3e8
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
  }
  ep->num   = ep_addr & 0x7F;
  
  ep->is_in = (0x80 & ep_addr) != 0;
  ep->maxpacket = ep_mps;
 8000c5e:	610a      	str	r2, [r1, #16]
  ep->type = ep_type;
    
  __HAL_LOCK(hpcd);
 8000c60:	2b01      	cmp	r3, #1
 8000c62:	d009      	beq.n	8000c78 <HAL_PCD_EP_Open+0x42>
 8000c64:	2301      	movs	r3, #1
 8000c66:	f884 33e8 	strb.w	r3, [r4, #1000]	; 0x3e8
  USB_ActivateEndpoint(hpcd->Instance , ep);
 8000c6a:	6820      	ldr	r0, [r4, #0]
 8000c6c:	f001 f9ce 	bl	800200c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000c70:	2000      	movs	r0, #0
 8000c72:	f884 03e8 	strb.w	r0, [r4, #1000]	; 0x3e8
  return ret;
 8000c76:	bd38      	pop	{r3, r4, r5, pc}
  
  ep->is_in = (0x80 & ep_addr) != 0;
  ep->maxpacket = ep_mps;
  ep->type = ep_type;
    
  __HAL_LOCK(hpcd);
 8000c78:	2002      	movs	r0, #2
  USB_ActivateEndpoint(hpcd->Instance , ep);
  __HAL_UNLOCK(hpcd);
  return ret;
}
 8000c7a:	bd38      	pop	{r3, r4, r5, pc}

08000c7c <HAL_PCD_EP_Close>:
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
  PCD_EPTypeDef *ep = NULL;
  
  if ((ep_addr & 0x80) == 0x80)
 8000c7c:	b24b      	sxtb	r3, r1
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	f001 027f 	and.w	r2, r1, #127	; 0x7f
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8000c84:	bfb5      	itete	lt
 8000c86:	eb00 1142 	addlt.w	r1, r0, r2, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8000c8a:	eb00 1141 	addge.w	r1, r0, r1, lsl #5
{  
  PCD_EPTypeDef *ep = NULL;
  
  if ((ep_addr & 0x80) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8000c8e:	3128      	addlt	r1, #40	; 0x28
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8000c90:	f501 7102 	addge.w	r1, r1, #520	; 0x208
  }
  ep->num   = ep_addr & 0x7F;
  
  ep->is_in = (0x80 & ep_addr) != 0;
 8000c94:	0fdb      	lsrs	r3, r3, #31
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
 8000c96:	b510      	push	{r4, lr}
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
  }
  ep->num   = ep_addr & 0x7F;
 8000c98:	700a      	strb	r2, [r1, #0]
  
  ep->is_in = (0x80 & ep_addr) != 0;
 8000c9a:	704b      	strb	r3, [r1, #1]
  
  __HAL_LOCK(hpcd);
 8000c9c:	f890 33e8 	ldrb.w	r3, [r0, #1000]	; 0x3e8
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
 8000ca0:	4604      	mov	r4, r0
  }
  ep->num   = ep_addr & 0x7F;
  
  ep->is_in = (0x80 & ep_addr) != 0;
  
  __HAL_LOCK(hpcd);
 8000ca2:	2b01      	cmp	r3, #1
 8000ca4:	d009      	beq.n	8000cba <HAL_PCD_EP_Close+0x3e>
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	f880 33e8 	strb.w	r3, [r0, #1000]	; 0x3e8
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 8000cac:	6800      	ldr	r0, [r0, #0]
 8000cae:	f001 fb1f 	bl	80022f0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000cb2:	2000      	movs	r0, #0
 8000cb4:	f884 03e8 	strb.w	r0, [r4, #1000]	; 0x3e8
  return HAL_OK;
 8000cb8:	bd10      	pop	{r4, pc}
  }
  ep->num   = ep_addr & 0x7F;
  
  ep->is_in = (0x80 & ep_addr) != 0;
  
  __HAL_LOCK(hpcd);
 8000cba:	2002      	movs	r0, #2
  USB_DeactivateEndpoint(hpcd->Instance , ep);
  __HAL_UNLOCK(hpcd);
  return HAL_OK;
}
 8000cbc:	bd10      	pop	{r4, pc}

08000cbe <HAL_PCD_EP_Receive>:
  * @param  pBuf: pointer to the reception buffer
  * @param  len: amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000cbe:	b570      	push	{r4, r5, r6, lr}
 8000cc0:	4604      	mov	r4, r0
 8000cc2:	f001 067f 	and.w	r6, r1, #127	; 0x7f
  PCD_EPTypeDef *ep = NULL;
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8000cc6:	0170      	lsls	r0, r6, #5
 8000cc8:	1825      	adds	r5, r4, r0
  ep->xfer_len = len;
 8000cca:	f8c5 3220 	str.w	r3, [r5, #544]	; 0x220
  ep->xfer_count = 0;
 8000cce:	2300      	movs	r3, #0
  PCD_EPTypeDef *ep = NULL;
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8000cd0:	f8c5 221c 	str.w	r2, [r5, #540]	; 0x21c
  ep->xfer_len = len;
  ep->xfer_count = 0;
 8000cd4:	f8c5 3224 	str.w	r3, [r5, #548]	; 0x224
  ep->is_in = 0;
 8000cd8:	f885 3209 	strb.w	r3, [r5, #521]	; 0x209
  ep->num = ep_addr & 0x7F;
 8000cdc:	f885 6208 	strb.w	r6, [r5, #520]	; 0x208
  
  __HAL_LOCK(hpcd);
 8000ce0:	f894 33e8 	ldrb.w	r3, [r4, #1000]	; 0x3e8
 8000ce4:	2b01      	cmp	r3, #1
 8000ce6:	d00c      	beq.n	8000d02 <HAL_PCD_EP_Receive+0x44>
 8000ce8:	2301      	movs	r3, #1
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
  PCD_EPTypeDef *ep = NULL;
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8000cea:	f500 7002 	add.w	r0, r0, #520	; 0x208
 8000cee:	1821      	adds	r1, r4, r0
  ep->xfer_len = len;
  ep->xfer_count = 0;
  ep->is_in = 0;
  ep->num = ep_addr & 0x7F;
  
  __HAL_LOCK(hpcd);
 8000cf0:	f884 33e8 	strb.w	r3, [r4, #1000]	; 0x3e8
  
  if ((ep_addr & 0x7F) == 0 )
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
 8000cf4:	6820      	ldr	r0, [r4, #0]
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 8000cf6:	f001 fc47 	bl	8002588 <USB_EPStartXfer>
  }
  __HAL_UNLOCK(hpcd);
 8000cfa:	2000      	movs	r0, #0
 8000cfc:	f884 03e8 	strb.w	r0, [r4, #1000]	; 0x3e8
  
  return HAL_OK;
 8000d00:	bd70      	pop	{r4, r5, r6, pc}
  ep->xfer_len = len;
  ep->xfer_count = 0;
  ep->is_in = 0;
  ep->num = ep_addr & 0x7F;
  
  __HAL_LOCK(hpcd);
 8000d02:	2002      	movs	r0, #2
    USB_EPStartXfer(hpcd->Instance , ep);
  }
  __HAL_UNLOCK(hpcd);
  
  return HAL_OK;
}
 8000d04:	bd70      	pop	{r4, r5, r6, pc}

08000d06 <HAL_PCD_EP_GetRxCount>:
  * @param  ep_addr: endpoint address
  * @retval Data Size
  */
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  return hpcd->OUT_ep[ep_addr & 0x7F].xfer_count;
 8000d06:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8000d0a:	eb00 1041 	add.w	r0, r0, r1, lsl #5
}
 8000d0e:	f8b0 0224 	ldrh.w	r0, [r0, #548]	; 0x224
 8000d12:	4770      	bx	lr

08000d14 <HAL_PCD_EP_Transmit>:
  * @param  pBuf: pointer to the transmission buffer
  * @param  len: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000d14:	b570      	push	{r4, r5, r6, lr}
 8000d16:	4604      	mov	r4, r0
 8000d18:	f001 067f 	and.w	r6, r1, #127	; 0x7f
  PCD_EPTypeDef *ep = NULL;
  
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8000d1c:	0170      	lsls	r0, r6, #5
 8000d1e:	1825      	adds	r5, r4, r0
  ep->xfer_len = len;
 8000d20:	642b      	str	r3, [r5, #64]	; 0x40
  ep->xfer_count = 0;
 8000d22:	2300      	movs	r3, #0
 8000d24:	646b      	str	r3, [r5, #68]	; 0x44
  ep->is_in = 1;
 8000d26:	2301      	movs	r3, #1
  PCD_EPTypeDef *ep = NULL;
  
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8000d28:	63ea      	str	r2, [r5, #60]	; 0x3c
  ep->xfer_len = len;
  ep->xfer_count = 0;
  ep->is_in = 1;
 8000d2a:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
  ep->num = ep_addr & 0x7F;
 8000d2e:	f885 6028 	strb.w	r6, [r5, #40]	; 0x28
  
  __HAL_LOCK(hpcd);
 8000d32:	f894 23e8 	ldrb.w	r2, [r4, #1000]	; 0x3e8
 8000d36:	429a      	cmp	r2, r3
 8000d38:	d00a      	beq.n	8000d50 <HAL_PCD_EP_Transmit+0x3c>
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
  PCD_EPTypeDef *ep = NULL;
  
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8000d3a:	3028      	adds	r0, #40	; 0x28
 8000d3c:	1821      	adds	r1, r4, r0
  ep->xfer_len = len;
  ep->xfer_count = 0;
  ep->is_in = 1;
  ep->num = ep_addr & 0x7F;
  
  __HAL_LOCK(hpcd);
 8000d3e:	f884 33e8 	strb.w	r3, [r4, #1000]	; 0x3e8
  
  if ((ep_addr & 0x7F) == 0 )
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
 8000d42:	6820      	ldr	r0, [r4, #0]
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 8000d44:	f001 fc20 	bl	8002588 <USB_EPStartXfer>
  }
  
  __HAL_UNLOCK(hpcd);
 8000d48:	2000      	movs	r0, #0
 8000d4a:	f884 03e8 	strb.w	r0, [r4, #1000]	; 0x3e8
  
  return HAL_OK;
 8000d4e:	bd70      	pop	{r4, r5, r6, pc}
  ep->xfer_len = len;
  ep->xfer_count = 0;
  ep->is_in = 1;
  ep->num = ep_addr & 0x7F;
  
  __HAL_LOCK(hpcd);
 8000d50:	2002      	movs	r0, #2
  }
  
  __HAL_UNLOCK(hpcd);
  
  return HAL_OK;
}
 8000d52:	bd70      	pop	{r4, r5, r6, pc}

08000d54 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000d54:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8000d58:	4604      	mov	r4, r0
  uint32_t wInterrupt_Mask = 0;
  
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 8000d5a:	6800      	ldr	r0, [r0, #0]
 8000d5c:	f001 fbfd 	bl	800255a <USB_ReadInterrupts>
 8000d60:	0400      	lsls	r0, r0, #16
 8000d62:	d416      	bmi.n	8000d92 <HAL_PCD_IRQHandler+0x3e>
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    PCD_EP_ISR_Handler(hpcd);
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
 8000d64:	6820      	ldr	r0, [r4, #0]
 8000d66:	f001 fbf8 	bl	800255a <USB_ReadInterrupts>
 8000d6a:	0541      	lsls	r1, r0, #21
 8000d6c:	f140 81db 	bpl.w	8001126 <HAL_PCD_IRQHandler+0x3d2>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000d70:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 8000d72:	4620      	mov	r0, r4
    PCD_EP_ISR_Handler(hpcd);
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000d74:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000d78:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000d7c:	041b      	lsls	r3, r3, #16
 8000d7e:	0c1b      	lsrs	r3, r3, #16
 8000d80:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8000d84:	f002 fd1f 	bl	80037c6 <HAL_PCD_ResetCallback>
    HAL_PCD_SetAddress(hpcd, 0);
 8000d88:	2100      	movs	r1, #0
 8000d8a:	4620      	mov	r0, r4
 8000d8c:	f7ff ff3f 	bl	8000c0e <HAL_PCD_SetAddress>
 8000d90:	e1c9      	b.n	8001126 <HAL_PCD_IRQHandler+0x3d2>
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
  PCD_EPTypeDef *ep = NULL;
  uint16_t count = 0;
  uint8_t epindex = 0;
  __IO uint16_t wIstr = 0;  
 8000d92:	2300      	movs	r3, #0
 8000d94:	f8ad 3004 	strh.w	r3, [sp, #4]
        
        if ((wEPVal & USB_EP_SETUP) != 0)
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
          USB_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 8000d98:	f504 777b 	add.w	r7, r4, #1004	; 0x3ec
{
  PCD_EPTypeDef *ep = NULL;
  uint16_t count = 0;
  uint8_t epindex = 0;
  __IO uint16_t wIstr = 0;  
  __IO uint16_t wEPVal = 0;
 8000d9c:	f8ad 3006 	strh.w	r3, [sp, #6]
  
  /* stay in loop while pending interrupts */
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0)
 8000da0:	6820      	ldr	r0, [r4, #0]
 8000da2:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8000da6:	b29b      	uxth	r3, r3
 8000da8:	f8ad 3004 	strh.w	r3, [sp, #4]
 8000dac:	041b      	lsls	r3, r3, #16
 8000dae:	d5d9      	bpl.n	8000d64 <HAL_PCD_IRQHandler+0x10>
  {
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8000db0:	f8bd 5004 	ldrh.w	r5, [sp, #4]
    
    if (epindex == 0)
 8000db4:	f015 050f 	ands.w	r5, r5, #15
 8000db8:	f040 80b5 	bne.w	8000f26 <HAL_PCD_IRQHandler+0x1d2>
    {
      /* Decode and service control endpoint interrupt */
      
      /* DIR bit = origin of the interrupt */   
      if ((wIstr & USB_ISTR_DIR) == 0)
 8000dbc:	f8bd 1004 	ldrh.w	r1, [sp, #4]
      {
        /* DIR = 0 */
        
        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000dc0:	8803      	ldrh	r3, [r0, #0]
    if (epindex == 0)
    {
      /* Decode and service control endpoint interrupt */
      
      /* DIR bit = origin of the interrupt */   
      if ((wIstr & USB_ISTR_DIR) == 0)
 8000dc2:	f001 0110 	and.w	r1, r1, #16
 8000dc6:	b289      	uxth	r1, r1
 8000dc8:	bb59      	cbnz	r1, 8000e22 <HAL_PCD_IRQHandler+0xce>
      {
        /* DIR = 0 */
        
        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000dca:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8000dce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000dd2:	041b      	lsls	r3, r3, #16
 8000dd4:	0c1b      	lsrs	r3, r3, #16
 8000dd6:	8003      	strh	r3, [r0, #0]
        ep = &hpcd->IN_ep[0];
        
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000dd8:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000ddc:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8000de0:	b29b      	uxth	r3, r3
 8000de2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000de6:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8000dea:	f8d0 3404 	ldr.w	r3, [r0, #1028]	; 0x404
        ep->xfer_buff += ep->xfer_count;
 8000dee:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
        ep = &hpcd->IN_ep[0];
        
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000df0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000df4:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8000df6:	4413      	add	r3, r2
 8000df8:	63e3      	str	r3, [r4, #60]	; 0x3c
 
        /* TX COMPLETE */
        HAL_PCD_DataInStageCallback(hpcd, 0);
 8000dfa:	4620      	mov	r0, r4
 8000dfc:	f002 fcd8 	bl	80037b0 <HAL_PCD_DataInStageCallback>
        
        
        if((hpcd->USB_Address > 0)&& ( ep->xfer_len == 0))
 8000e00:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d0cb      	beq.n	8000da0 <HAL_PCD_IRQHandler+0x4c>
 8000e08:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000e0a:	2a00      	cmp	r2, #0
 8000e0c:	d1c8      	bne.n	8000da0 <HAL_PCD_IRQHandler+0x4c>
        {
          hpcd->Instance->DADDR = (hpcd->USB_Address | USB_DADDR_EF);
 8000e0e:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000e12:	6821      	ldr	r1, [r4, #0]
 8000e14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e18:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0;
 8000e1c:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 8000e20:	e7be      	b.n	8000da0 <HAL_PCD_IRQHandler+0x4c>
        /* DIR = 1 */
        
        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8000e22:	b29b      	uxth	r3, r3
 8000e24:	f8ad 3006 	strh.w	r3, [sp, #6]
        
        if ((wEPVal & USB_EP_SETUP) != 0)
 8000e28:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8000e2c:	051a      	lsls	r2, r3, #20
 8000e2e:	d51e      	bpl.n	8000e6e <HAL_PCD_IRQHandler+0x11a>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000e30:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000e34:	f894 2208 	ldrb.w	r2, [r4, #520]	; 0x208
 8000e38:	b29b      	uxth	r3, r3
 8000e3a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000e3e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000e42:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
          USB_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 8000e46:	f8b4 220c 	ldrh.w	r2, [r4, #524]	; 0x20c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
        
        if ((wEPVal & USB_EP_SETUP) != 0)
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000e4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000e4e:	f8c4 3224 	str.w	r3, [r4, #548]	; 0x224
          USB_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 8000e52:	4639      	mov	r1, r7
 8000e54:	f001 fc68 	bl	8002728 <USB_ReadPMA>
          /* SETUP bit kept frozen while CTR_RX = 1*/ 
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 8000e58:	6822      	ldr	r2, [r4, #0]
          
          /* Process SETUP Packet*/
          HAL_PCD_SetupStageCallback(hpcd);
 8000e5a:	4620      	mov	r0, r4
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
          USB_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
          /* SETUP bit kept frozen while CTR_RX = 1*/ 
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 8000e5c:	8813      	ldrh	r3, [r2, #0]
 8000e5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000e62:	051b      	lsls	r3, r3, #20
 8000e64:	0d1b      	lsrs	r3, r3, #20
 8000e66:	8013      	strh	r3, [r2, #0]
          
          /* Process SETUP Packet*/
          HAL_PCD_SetupStageCallback(hpcd);
 8000e68:	f002 fc94 	bl	8003794 <HAL_PCD_SetupStageCallback>
 8000e6c:	e798      	b.n	8000da0 <HAL_PCD_IRQHandler+0x4c>
        }
        
        else if ((wEPVal & USB_EP_CTR_RX) != 0)
 8000e6e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8000e72:	041b      	lsls	r3, r3, #16
 8000e74:	d594      	bpl.n	8000da0 <HAL_PCD_IRQHandler+0x4c>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000e76:	8803      	ldrh	r3, [r0, #0]
 8000e78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000e7c:	051b      	lsls	r3, r3, #20
 8000e7e:	0d1b      	lsrs	r3, r3, #20
 8000e80:	8003      	strh	r3, [r0, #0]
          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000e82:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000e86:	f894 2208 	ldrb.w	r2, [r4, #520]	; 0x208
 8000e8a:	b29b      	uxth	r3, r3
 8000e8c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000e90:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000e94:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8000e98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000e9c:	f8c4 3224 	str.w	r3, [r4, #548]	; 0x224
          
          if (ep->xfer_count != 0)
 8000ea0:	b163      	cbz	r3, 8000ebc <HAL_PCD_IRQHandler+0x168>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8000ea2:	f8b4 220c 	ldrh.w	r2, [r4, #524]	; 0x20c
 8000ea6:	f8d4 121c 	ldr.w	r1, [r4, #540]	; 0x21c
 8000eaa:	f001 fc3d 	bl	8002728 <USB_ReadPMA>
            ep->xfer_buff+=ep->xfer_count;
 8000eae:	f8d4 221c 	ldr.w	r2, [r4, #540]	; 0x21c
 8000eb2:	f8d4 3224 	ldr.w	r3, [r4, #548]	; 0x224
 8000eb6:	4413      	add	r3, r2
 8000eb8:	f8c4 321c 	str.w	r3, [r4, #540]	; 0x21c
          }
          
          /* Process Control Data OUT Packet*/
           HAL_PCD_DataOutStageCallback(hpcd, 0);
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	4620      	mov	r0, r4
 8000ec0:	f002 fc6e 	bl	80037a0 <HAL_PCD_DataOutStageCallback>
          
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8000ec4:	6822      	ldr	r2, [r4, #0]
 8000ec6:	f8d4 5218 	ldr.w	r5, [r4, #536]	; 0x218
 8000eca:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 8000ece:	2d3e      	cmp	r5, #62	; 0x3e
 8000ed0:	b289      	uxth	r1, r1
 8000ed2:	f101 0106 	add.w	r1, r1, #6
 8000ed6:	f502 6080 	add.w	r0, r2, #1024	; 0x400
 8000eda:	d90b      	bls.n	8000ef4 <HAL_PCD_IRQHandler+0x1a0>
 8000edc:	f3c5 134f 	ubfx	r3, r5, #5, #16
 8000ee0:	06ee      	lsls	r6, r5, #27
 8000ee2:	bf04      	itt	eq
 8000ee4:	f103 33ff 	addeq.w	r3, r3, #4294967295
 8000ee8:	b29b      	uxtheq	r3, r3
 8000eea:	ea6f 63c3 	mvn.w	r3, r3, lsl #27
 8000eee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000ef2:	e006      	b.n	8000f02 <HAL_PCD_IRQHandler+0x1ae>
 8000ef4:	f3c5 034f 	ubfx	r3, r5, #1, #16
 8000ef8:	07ed      	lsls	r5, r5, #31
 8000efa:	bf44      	itt	mi
 8000efc:	3301      	addmi	r3, #1
 8000efe:	b29b      	uxthmi	r3, r3
 8000f00:	029b      	lsls	r3, r3, #10
 8000f02:	b29b      	uxth	r3, r3
 8000f04:	f840 3011 	str.w	r3, [r0, r1, lsl #1]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8000f08:	8813      	ldrh	r3, [r2, #0]
 8000f0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000f0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000f12:	041b      	lsls	r3, r3, #16
 8000f14:	0c1b      	lsrs	r3, r3, #16
 8000f16:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8000f1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f22:	8013      	strh	r3, [r2, #0]
 8000f24:	e73c      	b.n	8000da0 <HAL_PCD_IRQHandler+0x4c>
    else
    {
      /* Decode and service non control endpoints interrupt  */
	  
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8000f26:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
 8000f2a:	b29b      	uxth	r3, r3
 8000f2c:	f8ad 3006 	strh.w	r3, [sp, #6]
      if ((wEPVal & USB_EP_CTR_RX) != 0)
 8000f30:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8000f34:	0419      	lsls	r1, r3, #16
 8000f36:	d577      	bpl.n	8001028 <HAL_PCD_IRQHandler+0x2d4>
      {  
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8000f38:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
        ep = &hpcd->OUT_ep[epindex];
        
        /* OUT double Buffering*/
        if (ep->doublebuffer == 0)
 8000f3c:	ea4f 1845 	mov.w	r8, r5, lsl #5
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
      if ((wEPVal & USB_EP_CTR_RX) != 0)
      {  
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8000f40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000f44:	051b      	lsls	r3, r3, #20
 8000f46:	0d1b      	lsrs	r3, r3, #20
 8000f48:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
        ep = &hpcd->OUT_ep[epindex];
        
        /* OUT double Buffering*/
        if (ep->doublebuffer == 0)
 8000f4c:	eb04 0108 	add.w	r1, r4, r8
 8000f50:	f891 3212 	ldrb.w	r3, [r1, #530]	; 0x212
 8000f54:	b9ab      	cbnz	r3, 8000f82 <HAL_PCD_IRQHandler+0x22e>
        {
          count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000f56:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000f5a:	f891 2208 	ldrb.w	r2, [r1, #520]	; 0x208
 8000f5e:	b29b      	uxth	r3, r3
 8000f60:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000f64:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000f68:	f8d3 640c 	ldr.w	r6, [r3, #1036]	; 0x40c
 8000f6c:	f3c6 0609 	ubfx	r6, r6, #0, #10
          if (count != 0)
 8000f70:	b3de      	cbz	r6, 8000fea <HAL_PCD_IRQHandler+0x296>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8000f72:	f8b1 220c 	ldrh.w	r2, [r1, #524]	; 0x20c
 8000f76:	4633      	mov	r3, r6
 8000f78:	f8d1 121c 	ldr.w	r1, [r1, #540]	; 0x21c
 8000f7c:	f001 fbd4 	bl	8002728 <USB_ReadPMA>
 8000f80:	e033      	b.n	8000fea <HAL_PCD_IRQHandler+0x296>
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 8000f82:	f891 3208 	ldrb.w	r3, [r1, #520]	; 0x208
 8000f86:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8000f8a:	00db      	lsls	r3, r3, #3
 8000f8c:	f412 4f80 	tst.w	r2, #16384	; 0x4000
          {
            /*read from endpoint BUF0Addr buffer*/
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000f90:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8000f94:	b292      	uxth	r2, r2
 8000f96:	4413      	add	r3, r2
 8000f98:	eb00 0343 	add.w	r3, r0, r3, lsl #1
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 8000f9c:	d008      	beq.n	8000fb0 <HAL_PCD_IRQHandler+0x25c>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000f9e:	f8d3 6404 	ldr.w	r6, [r3, #1028]	; 0x404
 8000fa2:	f3c6 0609 	ubfx	r6, r6, #0, #10
            if (count != 0)
 8000fa6:	b17e      	cbz	r6, 8000fc8 <HAL_PCD_IRQHandler+0x274>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8000fa8:	4633      	mov	r3, r6
 8000faa:	f8b1 220e 	ldrh.w	r2, [r1, #526]	; 0x20e
 8000fae:	e007      	b.n	8000fc0 <HAL_PCD_IRQHandler+0x26c>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8000fb0:	f8d3 640c 	ldr.w	r6, [r3, #1036]	; 0x40c
 8000fb4:	f3c6 0609 	ubfx	r6, r6, #0, #10
            if (count != 0)
 8000fb8:	b136      	cbz	r6, 8000fc8 <HAL_PCD_IRQHandler+0x274>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8000fba:	4633      	mov	r3, r6
 8000fbc:	f8b1 2210 	ldrh.w	r2, [r1, #528]	; 0x210
 8000fc0:	f8d1 121c 	ldr.w	r1, [r1, #540]	; 0x21c
 8000fc4:	f001 fbb0 	bl	8002728 <USB_ReadPMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);  
 8000fc8:	eb04 0308 	add.w	r3, r4, r8
 8000fcc:	f893 1208 	ldrb.w	r1, [r3, #520]	; 0x208
 8000fd0:	6822      	ldr	r2, [r4, #0]
 8000fd2:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8000fd6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000fda:	051b      	lsls	r3, r3, #20
 8000fdc:	0d1b      	lsrs	r3, r3, #20
 8000fde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000fe2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000fe6:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8000fea:	eb04 0108 	add.w	r1, r4, r8
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count+=count;
 8000fee:	f8d1 3224 	ldr.w	r3, [r1, #548]	; 0x224
        ep->xfer_buff+=count;
 8000ff2:	f8d1 221c 	ldr.w	r2, [r1, #540]	; 0x21c
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);  
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count+=count;
 8000ff6:	4433      	add	r3, r6
 8000ff8:	f8c1 3224 	str.w	r3, [r1, #548]	; 0x224
        ep->xfer_buff+=count;
       
        if ((ep->xfer_len == 0) || (count < ep->maxpacket))
 8000ffc:	f8d1 3220 	ldr.w	r3, [r1, #544]	; 0x220
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);  
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count+=count;
        ep->xfer_buff+=count;
 8001000:	4432      	add	r2, r6
 8001002:	f8c1 221c 	str.w	r2, [r1, #540]	; 0x21c
       
        if ((ep->xfer_len == 0) || (count < ep->maxpacket))
 8001006:	b11b      	cbz	r3, 8001010 <HAL_PCD_IRQHandler+0x2bc>
 8001008:	f8d1 0218 	ldr.w	r0, [r1, #536]	; 0x218
 800100c:	4286      	cmp	r6, r0
 800100e:	d206      	bcs.n	800101e <HAL_PCD_IRQHandler+0x2ca>
        {
          /* RX COMPLETE */
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001010:	44a0      	add	r8, r4
 8001012:	f898 1208 	ldrb.w	r1, [r8, #520]	; 0x208
 8001016:	4620      	mov	r0, r4
 8001018:	f002 fbc2 	bl	80037a0 <HAL_PCD_DataOutStageCallback>
 800101c:	e004      	b.n	8001028 <HAL_PCD_IRQHandler+0x2d4>
        }
        else
        {
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800101e:	f891 1208 	ldrb.w	r1, [r1, #520]	; 0x208
 8001022:	4620      	mov	r0, r4
 8001024:	f7ff fe4b 	bl	8000cbe <HAL_PCD_EP_Receive>
        }
        
      } /* if((wEPVal & EP_CTR_RX) */
      
      if ((wEPVal & USB_EP_CTR_TX) != 0)
 8001028:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800102c:	061a      	lsls	r2, r3, #24
 800102e:	f57f aeb7 	bpl.w	8000da0 <HAL_PCD_IRQHandler+0x4c>
      {
        ep = &hpcd->IN_ep[epindex];
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001032:	6820      	ldr	r0, [r4, #0]
        
        /* IN double Buffering*/
        if (ep->doublebuffer == 0)
 8001034:	016e      	lsls	r6, r5, #5
      if ((wEPVal & USB_EP_CTR_TX) != 0)
      {
        ep = &hpcd->IN_ep[epindex];
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001036:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
        
        /* IN double Buffering*/
        if (ep->doublebuffer == 0)
 800103a:	19a1      	adds	r1, r4, r6
      if ((wEPVal & USB_EP_CTR_TX) != 0)
      {
        ep = &hpcd->IN_ep[epindex];
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800103c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001040:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001044:	041b      	lsls	r3, r3, #16
 8001046:	0c1b      	lsrs	r3, r3, #16
 8001048:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
        
        /* IN double Buffering*/
        if (ep->doublebuffer == 0)
 800104c:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 8001050:	3502      	adds	r5, #2
 8001052:	b9b3      	cbnz	r3, 8001082 <HAL_PCD_IRQHandler+0x32e>
        {
          ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001054:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001058:	f891 2028 	ldrb.w	r2, [r1, #40]	; 0x28
 800105c:	b29b      	uxth	r3, r3
 800105e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001062:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001066:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800106a:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 800106e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001072:	606b      	str	r3, [r5, #4]
          if (ep->xfer_count != 0)
 8001074:	2b00      	cmp	r3, #0
 8001076:	d038      	beq.n	80010ea <HAL_PCD_IRQHandler+0x396>
          {
            USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8001078:	8d8a      	ldrh	r2, [r1, #44]	; 0x2c
 800107a:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 800107c:	f001 fa73 	bl	8002566 <USB_WritePMA>
 8001080:	e033      	b.n	80010ea <HAL_PCD_IRQHandler+0x396>
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 8001082:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8001086:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800108a:	00db      	lsls	r3, r3, #3
 800108c:	f012 0f40 	tst.w	r2, #64	; 0x40
          {
            /*read from endpoint BUF0Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001090:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8001094:	b292      	uxth	r2, r2
 8001096:	4413      	add	r3, r2
 8001098:	eb00 0343 	add.w	r3, r0, r3, lsl #1
            USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 800109c:	d009      	beq.n	80010b2 <HAL_PCD_IRQHandler+0x35e>
          {
            /*read from endpoint BUF0Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800109e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80010a2:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 80010a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80010aa:	606b      	str	r3, [r5, #4]
            if (ep->xfer_count != 0)
 80010ac:	b16b      	cbz	r3, 80010ca <HAL_PCD_IRQHandler+0x376>
            {
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, ep->xfer_count);
 80010ae:	8dca      	ldrh	r2, [r1, #46]	; 0x2e
 80010b0:	e008      	b.n	80010c4 <HAL_PCD_IRQHandler+0x370>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80010b2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80010b6:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 80010ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80010be:	606b      	str	r3, [r5, #4]
            if (ep->xfer_count != 0)
 80010c0:	b11b      	cbz	r3, 80010ca <HAL_PCD_IRQHandler+0x376>
            {
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 80010c2:	8e0a      	ldrh	r2, [r1, #48]	; 0x30
 80010c4:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 80010c6:	f001 fa4e 	bl	8002566 <USB_WritePMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
 80010ca:	19a3      	adds	r3, r4, r6
 80010cc:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 80010d0:	6822      	ldr	r2, [r4, #0]
 80010d2:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80010d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80010da:	051b      	lsls	r3, r3, #20
 80010dc:	0d1b      	lsrs	r3, r3, #20
 80010de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80010e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010e6:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80010ea:	6820      	ldr	r0, [r4, #0]
 80010ec:	19a1      	adds	r1, r4, r6
 80010ee:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80010f2:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 80010f6:	b292      	uxth	r2, r2
 80010f8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80010fc:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001100:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
        ep->xfer_buff+=ep->xfer_count;
 8001104:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001106:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800110a:	644a      	str	r2, [r1, #68]	; 0x44
        ep->xfer_buff+=ep->xfer_count;
 800110c:	441a      	add	r2, r3
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0)
 800110e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
        ep->xfer_buff+=ep->xfer_count;
 8001110:	63ca      	str	r2, [r1, #60]	; 0x3c
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0)
        {
          /* TX COMPLETE */
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001112:	4620      	mov	r0, r4
 8001114:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
        ep->xfer_buff+=ep->xfer_count;
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0)
 8001118:	b913      	cbnz	r3, 8001120 <HAL_PCD_IRQHandler+0x3cc>
        {
          /* TX COMPLETE */
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800111a:	f002 fb49 	bl	80037b0 <HAL_PCD_DataInStageCallback>
 800111e:	e63f      	b.n	8000da0 <HAL_PCD_IRQHandler+0x4c>
        }
        else
        {
          HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001120:	f7ff fdf8 	bl	8000d14 <HAL_PCD_EP_Transmit>
 8001124:	e63c      	b.n	8000da0 <HAL_PCD_IRQHandler+0x4c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
    HAL_PCD_ResetCallback(hpcd);
    HAL_PCD_SetAddress(hpcd, 0);
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_PMAOVR))
 8001126:	6820      	ldr	r0, [r4, #0]
 8001128:	f001 fa17 	bl	800255a <USB_ReadInterrupts>
 800112c:	0447      	lsls	r7, r0, #17
 800112e:	d508      	bpl.n	8001142 <HAL_PCD_IRQHandler+0x3ee>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);    
 8001130:	6822      	ldr	r2, [r4, #0]
 8001132:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001136:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800113a:	041b      	lsls	r3, r3, #16
 800113c:	0c1b      	lsrs	r3, r3, #16
 800113e:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  }
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ERR))
 8001142:	6820      	ldr	r0, [r4, #0]
 8001144:	f001 fa09 	bl	800255a <USB_ReadInterrupts>
 8001148:	0486      	lsls	r6, r0, #18
 800114a:	d508      	bpl.n	800115e <HAL_PCD_IRQHandler+0x40a>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR); 
 800114c:	6822      	ldr	r2, [r4, #0]
 800114e:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001152:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001156:	041b      	lsls	r3, r3, #16
 8001158:	0c1b      	lsrs	r3, r3, #16
 800115a:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP))
 800115e:	6820      	ldr	r0, [r4, #0]
 8001160:	f001 f9fb 	bl	800255a <USB_ReadInterrupts>
 8001164:	04c5      	lsls	r5, r0, #19
 8001166:	d518      	bpl.n	800119a <HAL_PCD_IRQHandler+0x446>
  {  
    hpcd->Instance->CNTR &= ~(USB_CNTR_LP_MODE);
 8001168:	6822      	ldr	r2, [r4, #0]
      | USB_CNTR_ESOFM | USB_CNTR_RESETM;
    
    /*Set interrupt mask*/
    hpcd->Instance->CNTR = wInterrupt_Mask;
    
    HAL_PCD_ResumeCallback(hpcd);
 800116a:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR); 
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP))
  {  
    hpcd->Instance->CNTR &= ~(USB_CNTR_LP_MODE);
 800116c:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8001170:	f023 0304 	bic.w	r3, r3, #4
 8001174:	041b      	lsls	r3, r3, #16
 8001176:	0c1b      	lsrs	r3, r3, #16
 8001178:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    /*set wInterrupt_Mask global variable*/
    wInterrupt_Mask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
      | USB_CNTR_ESOFM | USB_CNTR_RESETM;
    
    /*Set interrupt mask*/
    hpcd->Instance->CNTR = wInterrupt_Mask;
 800117c:	f44f 433d 	mov.w	r3, #48384	; 0xbd00
 8001180:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    
    HAL_PCD_ResumeCallback(hpcd);
 8001184:	f002 fb3c 	bl	8003800 <HAL_PCD_ResumeCallback>
    
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);     
 8001188:	6822      	ldr	r2, [r4, #0]
 800118a:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800118e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001192:	041b      	lsls	r3, r3, #16
 8001194:	0c1b      	lsrs	r3, r3, #16
 8001196:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SUSP))
 800119a:	6820      	ldr	r0, [r4, #0]
 800119c:	f001 f9dd 	bl	800255a <USB_ReadInterrupts>
 80011a0:	0500      	lsls	r0, r0, #20
 80011a2:	d51d      	bpl.n	80011e0 <HAL_PCD_IRQHandler+0x48c>
  {
    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);  
 80011a4:	6820      	ldr	r0, [r4, #0]
 80011a6:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 80011aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80011ae:	041b      	lsls	r3, r3, #16
 80011b0:	0c1b      	lsrs	r3, r3, #16
 80011b2:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
    
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 80011b6:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80011ba:	b29b      	uxth	r3, r3
 80011bc:	f043 0308 	orr.w	r3, r3, #8
 80011c0:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 80011c4:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80011c8:	b29b      	uxth	r3, r3
 80011ca:	f043 0304 	orr.w	r3, r3, #4
 80011ce:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP) == 0)
 80011d2:	f001 f9c2 	bl	800255a <USB_ReadInterrupts>
 80011d6:	04c1      	lsls	r1, r0, #19
 80011d8:	d402      	bmi.n	80011e0 <HAL_PCD_IRQHandler+0x48c>
    {
      HAL_PCD_SuspendCallback(hpcd);
 80011da:	4620      	mov	r0, r4
 80011dc:	f002 fb00 	bl	80037e0 <HAL_PCD_SuspendCallback>
    }
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SOF))
 80011e0:	6820      	ldr	r0, [r4, #0]
 80011e2:	f001 f9ba 	bl	800255a <USB_ReadInterrupts>
 80011e6:	0582      	lsls	r2, r0, #22
 80011e8:	d50b      	bpl.n	8001202 <HAL_PCD_IRQHandler+0x4ae>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 80011ea:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 80011ec:	4620      	mov	r0, r4
    }
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SOF))
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 80011ee:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80011f2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80011f6:	041b      	lsls	r3, r3, #16
 80011f8:	0c1b      	lsrs	r3, r3, #16
 80011fa:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 80011fe:	f002 fade 	bl	80037be <HAL_PCD_SOFCallback>
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ESOF))
 8001202:	6820      	ldr	r0, [r4, #0]
 8001204:	f001 f9a9 	bl	800255a <USB_ReadInterrupts>
 8001208:	05c3      	lsls	r3, r0, #23
 800120a:	d508      	bpl.n	800121e <HAL_PCD_IRQHandler+0x4ca>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF); 
 800120c:	6822      	ldr	r2, [r4, #0]
 800120e:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001212:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001216:	041b      	lsls	r3, r3, #16
 8001218:	0c1b      	lsrs	r3, r3, #16
 800121a:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  }
}
 800121e:	b002      	add	sp, #8
 8001220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001224 <HAL_PCD_EP_SetStall>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001224:	b538      	push	{r3, r4, r5, lr}
  PCD_EPTypeDef *ep = NULL;
  
  if ((0x80 & ep_addr) == 0x80)
 8001226:	b24b      	sxtb	r3, r1
 8001228:	2b00      	cmp	r3, #0
 800122a:	f001 057f 	and.w	r5, r1, #127	; 0x7f
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800122e:	bfb5      	itete	lt
 8001230:	eb00 1145 	addlt.w	r1, r0, r5, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001234:	eb00 1141 	addge.w	r1, r0, r1, lsl #5
{
  PCD_EPTypeDef *ep = NULL;
  
  if ((0x80 & ep_addr) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001238:	3128      	addlt	r1, #40	; 0x28
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800123a:	f501 7102 	addge.w	r1, r1, #520	; 0x208
  }
  
  ep->is_stall = 1;
 800123e:	2201      	movs	r2, #1
  ep->num   = ep_addr & 0x7F;
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8001240:	0fdb      	lsrs	r3, r3, #31
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }
  
  ep->is_stall = 1;
  ep->num   = ep_addr & 0x7F;
 8001242:	b2ed      	uxtb	r5, r5
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }
  
  ep->is_stall = 1;
 8001244:	708a      	strb	r2, [r1, #2]
  ep->num   = ep_addr & 0x7F;
 8001246:	700d      	strb	r5, [r1, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8001248:	704b      	strb	r3, [r1, #1]
  
  __HAL_LOCK(hpcd);
 800124a:	f890 33e8 	ldrb.w	r3, [r0, #1000]	; 0x3e8
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800124e:	4604      	mov	r4, r0
  
  ep->is_stall = 1;
  ep->num   = ep_addr & 0x7F;
  ep->is_in = ((ep_addr & 0x80) == 0x80);
  
  __HAL_LOCK(hpcd);
 8001250:	4293      	cmp	r3, r2
 8001252:	d00e      	beq.n	8001272 <HAL_PCD_EP_SetStall+0x4e>
 8001254:	f880 23e8 	strb.w	r2, [r0, #1000]	; 0x3e8
  USB_EPSetStall(hpcd->Instance , ep);
 8001258:	6800      	ldr	r0, [r0, #0]
 800125a:	f001 f901 	bl	8002460 <USB_EPSetStall>
  if((ep_addr & 0x7F) == 0)
 800125e:	b925      	cbnz	r5, 800126a <HAL_PCD_EP_SetStall+0x46>
  {
    USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001260:	f504 717b 	add.w	r1, r4, #1004	; 0x3ec
 8001264:	6820      	ldr	r0, [r4, #0]
 8001266:	f001 f97c 	bl	8002562 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd); 
 800126a:	2000      	movs	r0, #0
 800126c:	f884 03e8 	strb.w	r0, [r4, #1000]	; 0x3e8
  
  return HAL_OK;
 8001270:	bd38      	pop	{r3, r4, r5, pc}
  
  ep->is_stall = 1;
  ep->num   = ep_addr & 0x7F;
  ep->is_in = ((ep_addr & 0x80) == 0x80);
  
  __HAL_LOCK(hpcd);
 8001272:	2002      	movs	r0, #2
    USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
  }
  __HAL_UNLOCK(hpcd); 
  
  return HAL_OK;
}
 8001274:	bd38      	pop	{r3, r4, r5, pc}

08001276 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001276:	b538      	push	{r3, r4, r5, lr}
  PCD_EPTypeDef *ep = NULL;
  
  if ((0x80 & ep_addr) == 0x80)
 8001278:	b24b      	sxtb	r3, r1
 800127a:	2b00      	cmp	r3, #0
 800127c:	f001 027f 	and.w	r2, r1, #127	; 0x7f
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001280:	bfb5      	itete	lt
 8001282:	eb00 1142 	addlt.w	r1, r0, r2, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001286:	eb00 1141 	addge.w	r1, r0, r1, lsl #5
{
  PCD_EPTypeDef *ep = NULL;
  
  if ((0x80 & ep_addr) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800128a:	3128      	addlt	r1, #40	; 0x28
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800128c:	f501 7102 	addge.w	r1, r1, #520	; 0x208
  }
  
  ep->is_stall = 0;
  ep->num   = ep_addr & 0x7F;
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8001290:	0fdb      	lsrs	r3, r3, #31
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }
  
  ep->is_stall = 0;
 8001292:	2400      	movs	r4, #0
 8001294:	708c      	strb	r4, [r1, #2]
  ep->num   = ep_addr & 0x7F;
 8001296:	700a      	strb	r2, [r1, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8001298:	704b      	strb	r3, [r1, #1]
  
  __HAL_LOCK(hpcd); 
 800129a:	f890 33e8 	ldrb.w	r3, [r0, #1000]	; 0x3e8
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800129e:	4605      	mov	r5, r0
  
  ep->is_stall = 0;
  ep->num   = ep_addr & 0x7F;
  ep->is_in = ((ep_addr & 0x80) == 0x80);
  
  __HAL_LOCK(hpcd); 
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d009      	beq.n	80012b8 <HAL_PCD_EP_ClrStall+0x42>
 80012a4:	2301      	movs	r3, #1
 80012a6:	f880 33e8 	strb.w	r3, [r0, #1000]	; 0x3e8
  USB_EPClearStall(hpcd->Instance , ep);
 80012aa:	6800      	ldr	r0, [r0, #0]
 80012ac:	f001 f909 	bl	80024c2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd); 
 80012b0:	f885 43e8 	strb.w	r4, [r5, #1000]	; 0x3e8
  
  return HAL_OK;
 80012b4:	4620      	mov	r0, r4
 80012b6:	bd38      	pop	{r3, r4, r5, pc}
  
  ep->is_stall = 0;
  ep->num   = ep_addr & 0x7F;
  ep->is_in = ((ep_addr & 0x80) == 0x80);
  
  __HAL_LOCK(hpcd); 
 80012b8:	2002      	movs	r0, #2
  USB_EPClearStall(hpcd->Instance , ep);
  __HAL_UNLOCK(hpcd); 
  
  return HAL_OK;
}
 80012ba:	bd38      	pop	{r3, r4, r5, pc}

080012bc <HAL_PCDEx_PMAConfig>:

{
  PCD_EPTypeDef *ep = NULL;
  
  /* initialize ep structure*/
  if ((0x80 & ep_addr) == 0x80)
 80012bc:	f011 0f80 	tst.w	r1, #128	; 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80012c0:	bf1b      	ittet	ne
 80012c2:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 80012c6:	eb00 1041 	addne.w	r0, r0, r1, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80012ca:	eb00 1041 	addeq.w	r0, r0, r1, lsl #5
  PCD_EPTypeDef *ep = NULL;
  
  /* initialize ep structure*/
  if ((0x80 & ep_addr) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80012ce:	3028      	addne	r0, #40	; 0x28
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80012d0:	bf08      	it	eq
 80012d2:	f500 7002 	addeq.w	r0, r0, #520	; 0x208
  }
  
  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80012d6:	b912      	cbnz	r2, 80012de <HAL_PCDEx_PMAConfig+0x22>
  {
    /*Single Buffer*/
    ep->doublebuffer = 0;
 80012d8:	7282      	strb	r2, [r0, #10]
    /*Configure te PMA*/
    ep->pmaadress = (uint16_t)pmaadress;
 80012da:	8083      	strh	r3, [r0, #4]
 80012dc:	e004      	b.n	80012e8 <HAL_PCDEx_PMAConfig+0x2c>
  }
  else /*USB_DBL_BUF*/
  {
    /*Double Buffer Endpoint*/
    ep->doublebuffer = 1;
 80012de:	2201      	movs	r2, #1
    /*Configure the PMA*/
    ep->pmaaddr0 =  pmaadress & 0xFFFF;
 80012e0:	80c3      	strh	r3, [r0, #6]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000) >> 16;
 80012e2:	0c1b      	lsrs	r3, r3, #16
    ep->pmaadress = (uint16_t)pmaadress;
  }
  else /*USB_DBL_BUF*/
  {
    /*Double Buffer Endpoint*/
    ep->doublebuffer = 1;
 80012e4:	7282      	strb	r2, [r0, #10]
    /*Configure the PMA*/
    ep->pmaaddr0 =  pmaadress & 0xFFFF;
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000) >> 16;
 80012e6:	8103      	strh	r3, [r0, #8]
  }
  
  return HAL_OK; 
}
 80012e8:	2000      	movs	r0, #0
 80012ea:	4770      	bx	lr

080012ec <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012ec:	6803      	ldr	r3, [r0, #0]
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012ee:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012f2:	07dc      	lsls	r4, r3, #31
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012f4:	4605      	mov	r5, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012f6:	d403      	bmi.n	8001300 <HAL_RCC_OscConfig+0x14>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012f8:	682b      	ldr	r3, [r5, #0]
 80012fa:	0798      	lsls	r0, r3, #30
 80012fc:	d473      	bmi.n	80013e6 <HAL_RCC_OscConfig+0xfa>
 80012fe:	e0f2      	b.n	80014e6 <HAL_RCC_OscConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001300:	4cb9      	ldr	r4, [pc, #740]	; (80015e8 <HAL_RCC_OscConfig+0x2fc>)
 8001302:	6863      	ldr	r3, [r4, #4]
 8001304:	f003 030c 	and.w	r3, r3, #12
 8001308:	2b04      	cmp	r3, #4
 800130a:	d007      	beq.n	800131c <HAL_RCC_OscConfig+0x30>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800130c:	6863      	ldr	r3, [r4, #4]
 800130e:	f003 030c 	and.w	r3, r3, #12
 8001312:	2b08      	cmp	r3, #8
 8001314:	d116      	bne.n	8001344 <HAL_RCC_OscConfig+0x58>
 8001316:	6863      	ldr	r3, [r4, #4]
 8001318:	03d9      	lsls	r1, r3, #15
 800131a:	d513      	bpl.n	8001344 <HAL_RCC_OscConfig+0x58>
 800131c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001320:	fa93 f2a3 	rbit	r2, r3
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001324:	6822      	ldr	r2, [r4, #0]
 8001326:	fa93 f3a3 	rbit	r3, r3
 800132a:	fab3 f383 	clz	r3, r3
 800132e:	f003 031f 	and.w	r3, r3, #31
 8001332:	fa22 f303 	lsr.w	r3, r2, r3
 8001336:	07da      	lsls	r2, r3, #31
 8001338:	d5de      	bpl.n	80012f8 <HAL_RCC_OscConfig+0xc>
 800133a:	686b      	ldr	r3, [r5, #4]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d1db      	bne.n	80012f8 <HAL_RCC_OscConfig+0xc>
      {
        return HAL_ERROR;
 8001340:	2001      	movs	r0, #1
 8001342:	e22d      	b.n	80017a0 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001344:	686b      	ldr	r3, [r5, #4]
 8001346:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800134a:	d015      	beq.n	8001378 <HAL_RCC_OscConfig+0x8c>
 800134c:	b96b      	cbnz	r3, 800136a <HAL_RCC_OscConfig+0x7e>
 800134e:	6823      	ldr	r3, [r4, #0]
 8001350:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8001354:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001358:	6023      	str	r3, [r4, #0]
 800135a:	6823      	ldr	r3, [r4, #0]
 800135c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001360:	6023      	str	r3, [r4, #0]
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001362:	f7fe ff27 	bl	80001b4 <HAL_GetTick>
 8001366:	4607      	mov	r7, r0
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001368:	e02f      	b.n	80013ca <HAL_RCC_OscConfig+0xde>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800136a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800136e:	6823      	ldr	r3, [r4, #0]
 8001370:	d106      	bne.n	8001380 <HAL_RCC_OscConfig+0x94>
 8001372:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001376:	6023      	str	r3, [r4, #0]
 8001378:	6823      	ldr	r3, [r4, #0]
 800137a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800137e:	e005      	b.n	800138c <HAL_RCC_OscConfig+0xa0>
 8001380:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001384:	6023      	str	r3, [r4, #0]
 8001386:	6823      	ldr	r3, [r4, #0]
 8001388:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800138c:	6023      	str	r3, [r4, #0]

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800138e:	f7fe ff11 	bl	80001b4 <HAL_GetTick>
 8001392:	4607      	mov	r7, r0
 8001394:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8001398:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800139c:	6822      	ldr	r2, [r4, #0]
 800139e:	fa96 f3a6 	rbit	r3, r6
 80013a2:	fab3 f383 	clz	r3, r3
 80013a6:	f003 031f 	and.w	r3, r3, #31
 80013aa:	fa22 f303 	lsr.w	r3, r2, r3
 80013ae:	07db      	lsls	r3, r3, #31
 80013b0:	d4a2      	bmi.n	80012f8 <HAL_RCC_OscConfig+0xc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013b2:	f7fe feff 	bl	80001b4 <HAL_GetTick>
 80013b6:	1bc0      	subs	r0, r0, r7
 80013b8:	2864      	cmp	r0, #100	; 0x64
 80013ba:	d9ed      	bls.n	8001398 <HAL_RCC_OscConfig+0xac>
          {
            return HAL_TIMEOUT;
 80013bc:	2003      	movs	r0, #3
 80013be:	e1ef      	b.n	80017a0 <HAL_RCC_OscConfig+0x4b4>
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013c0:	f7fe fef8 	bl	80001b4 <HAL_GetTick>
 80013c4:	1bc0      	subs	r0, r0, r7
 80013c6:	2864      	cmp	r0, #100	; 0x64
 80013c8:	d8f8      	bhi.n	80013bc <HAL_RCC_OscConfig+0xd0>
 80013ca:	fa96 f3a6 	rbit	r3, r6
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013ce:	6822      	ldr	r2, [r4, #0]
 80013d0:	fa96 f3a6 	rbit	r3, r6
 80013d4:	fab3 f383 	clz	r3, r3
 80013d8:	f003 031f 	and.w	r3, r3, #31
 80013dc:	fa22 f303 	lsr.w	r3, r2, r3
 80013e0:	07d8      	lsls	r0, r3, #31
 80013e2:	d4ed      	bmi.n	80013c0 <HAL_RCC_OscConfig+0xd4>
 80013e4:	e788      	b.n	80012f8 <HAL_RCC_OscConfig+0xc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80013e6:	4c80      	ldr	r4, [pc, #512]	; (80015e8 <HAL_RCC_OscConfig+0x2fc>)
 80013e8:	6863      	ldr	r3, [r4, #4]
 80013ea:	f013 0f0c 	tst.w	r3, #12
 80013ee:	d007      	beq.n	8001400 <HAL_RCC_OscConfig+0x114>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80013f0:	6863      	ldr	r3, [r4, #4]
 80013f2:	f003 030c 	and.w	r3, r3, #12
 80013f6:	2b08      	cmp	r3, #8
 80013f8:	d121      	bne.n	800143e <HAL_RCC_OscConfig+0x152>
 80013fa:	6863      	ldr	r3, [r4, #4]
 80013fc:	03d9      	lsls	r1, r3, #15
 80013fe:	d41e      	bmi.n	800143e <HAL_RCC_OscConfig+0x152>
 8001400:	2302      	movs	r3, #2
 8001402:	fa93 f2a3 	rbit	r2, r3
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001406:	6822      	ldr	r2, [r4, #0]
 8001408:	fa93 f3a3 	rbit	r3, r3
 800140c:	fab3 f383 	clz	r3, r3
 8001410:	f003 031f 	and.w	r3, r3, #31
 8001414:	fa22 f303 	lsr.w	r3, r2, r3
 8001418:	07da      	lsls	r2, r3, #31
 800141a:	d502      	bpl.n	8001422 <HAL_RCC_OscConfig+0x136>
 800141c:	692b      	ldr	r3, [r5, #16]
 800141e:	2b01      	cmp	r3, #1
 8001420:	d18e      	bne.n	8001340 <HAL_RCC_OscConfig+0x54>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001422:	6823      	ldr	r3, [r4, #0]
 8001424:	22f8      	movs	r2, #248	; 0xf8
 8001426:	fa92 f2a2 	rbit	r2, r2
 800142a:	fab2 f282 	clz	r2, r2
 800142e:	6969      	ldr	r1, [r5, #20]
 8001430:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001434:	fa01 f202 	lsl.w	r2, r1, r2
 8001438:	4313      	orrs	r3, r2
 800143a:	6023      	str	r3, [r4, #0]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800143c:	e053      	b.n	80014e6 <HAL_RCC_OscConfig+0x1fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800143e:	692a      	ldr	r2, [r5, #16]
 8001440:	2301      	movs	r3, #1
 8001442:	b37a      	cbz	r2, 80014a4 <HAL_RCC_OscConfig+0x1b8>
 8001444:	fa93 f2a3 	rbit	r2, r3
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001448:	fab2 f282 	clz	r2, r2
 800144c:	0092      	lsls	r2, r2, #2
 800144e:	f102 4284 	add.w	r2, r2, #1107296256	; 0x42000000
 8001452:	f502 0284 	add.w	r2, r2, #4325376	; 0x420000
 8001456:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001458:	f7fe feac 	bl	80001b4 <HAL_GetTick>
 800145c:	4607      	mov	r7, r0
 800145e:	2602      	movs	r6, #2
 8001460:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001464:	4860      	ldr	r0, [pc, #384]	; (80015e8 <HAL_RCC_OscConfig+0x2fc>)
 8001466:	6822      	ldr	r2, [r4, #0]
 8001468:	fa96 f3a6 	rbit	r3, r6
 800146c:	fab3 f383 	clz	r3, r3
 8001470:	f003 031f 	and.w	r3, r3, #31
 8001474:	fa22 f303 	lsr.w	r3, r2, r3
 8001478:	07db      	lsls	r3, r3, #31
 800147a:	d405      	bmi.n	8001488 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800147c:	f7fe fe9a 	bl	80001b4 <HAL_GetTick>
 8001480:	1bc0      	subs	r0, r0, r7
 8001482:	2802      	cmp	r0, #2
 8001484:	d9ec      	bls.n	8001460 <HAL_RCC_OscConfig+0x174>
 8001486:	e799      	b.n	80013bc <HAL_RCC_OscConfig+0xd0>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001488:	6803      	ldr	r3, [r0, #0]
 800148a:	22f8      	movs	r2, #248	; 0xf8
 800148c:	fa92 f2a2 	rbit	r2, r2
 8001490:	fab2 f282 	clz	r2, r2
 8001494:	6969      	ldr	r1, [r5, #20]
 8001496:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800149a:	fa01 f202 	lsl.w	r2, r1, r2
 800149e:	4313      	orrs	r3, r2
 80014a0:	6003      	str	r3, [r0, #0]
 80014a2:	e020      	b.n	80014e6 <HAL_RCC_OscConfig+0x1fa>
 80014a4:	fa93 f3a3 	rbit	r3, r3
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014a8:	fab3 f383 	clz	r3, r3
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 80014b2:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 80014b6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b8:	f7fe fe7c 	bl	80001b4 <HAL_GetTick>
 80014bc:	4607      	mov	r7, r0
 80014be:	2602      	movs	r6, #2
 80014c0:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014c4:	6822      	ldr	r2, [r4, #0]
 80014c6:	fa96 f3a6 	rbit	r3, r6
 80014ca:	fab3 f383 	clz	r3, r3
 80014ce:	f003 031f 	and.w	r3, r3, #31
 80014d2:	fa22 f303 	lsr.w	r3, r2, r3
 80014d6:	07d9      	lsls	r1, r3, #31
 80014d8:	d505      	bpl.n	80014e6 <HAL_RCC_OscConfig+0x1fa>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014da:	f7fe fe6b 	bl	80001b4 <HAL_GetTick>
 80014de:	1bc0      	subs	r0, r0, r7
 80014e0:	2802      	cmp	r0, #2
 80014e2:	d9ed      	bls.n	80014c0 <HAL_RCC_OscConfig+0x1d4>
 80014e4:	e76a      	b.n	80013bc <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014e6:	682b      	ldr	r3, [r5, #0]
 80014e8:	071a      	lsls	r2, r3, #28
 80014ea:	d546      	bpl.n	800157a <HAL_RCC_OscConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014ec:	69aa      	ldr	r2, [r5, #24]
 80014ee:	4c3e      	ldr	r4, [pc, #248]	; (80015e8 <HAL_RCC_OscConfig+0x2fc>)
 80014f0:	2301      	movs	r3, #1
 80014f2:	493e      	ldr	r1, [pc, #248]	; (80015ec <HAL_RCC_OscConfig+0x300>)
 80014f4:	b312      	cbz	r2, 800153c <HAL_RCC_OscConfig+0x250>
 80014f6:	fa93 f2a3 	rbit	r2, r3
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014fa:	fab2 f282 	clz	r2, r2
 80014fe:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001502:	f7fe fe57 	bl	80001b4 <HAL_GetTick>
 8001506:	4607      	mov	r7, r0
 8001508:	2602      	movs	r6, #2
 800150a:	fa96 f3a6 	rbit	r3, r6
 800150e:	fa96 f3a6 	rbit	r3, r6
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001512:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001514:	fa96 f3a6 	rbit	r3, r6
 8001518:	fab3 f383 	clz	r3, r3
 800151c:	f003 031f 	and.w	r3, r3, #31
 8001520:	fa22 f303 	lsr.w	r3, r2, r3
 8001524:	07db      	lsls	r3, r3, #31
 8001526:	d405      	bmi.n	8001534 <HAL_RCC_OscConfig+0x248>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001528:	f7fe fe44 	bl	80001b4 <HAL_GetTick>
 800152c:	1bc0      	subs	r0, r0, r7
 800152e:	2802      	cmp	r0, #2
 8001530:	d9eb      	bls.n	800150a <HAL_RCC_OscConfig+0x21e>
 8001532:	e743      	b.n	80013bc <HAL_RCC_OscConfig+0xd0>
          return HAL_TIMEOUT;
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      HAL_Delay(1);
 8001534:	2001      	movs	r0, #1
 8001536:	f7fe fe43 	bl	80001c0 <HAL_Delay>
 800153a:	e01e      	b.n	800157a <HAL_RCC_OscConfig+0x28e>
 800153c:	fa93 f3a3 	rbit	r3, r3
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001540:	fab3 f383 	clz	r3, r3
 8001544:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001548:	f7fe fe34 	bl	80001b4 <HAL_GetTick>
 800154c:	4607      	mov	r7, r0
 800154e:	2602      	movs	r6, #2
 8001550:	fa96 f3a6 	rbit	r3, r6
 8001554:	fa96 f3a6 	rbit	r3, r6
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001558:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800155a:	fa96 f3a6 	rbit	r3, r6
 800155e:	fab3 f383 	clz	r3, r3
 8001562:	f003 031f 	and.w	r3, r3, #31
 8001566:	fa22 f303 	lsr.w	r3, r2, r3
 800156a:	07d8      	lsls	r0, r3, #31
 800156c:	d505      	bpl.n	800157a <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800156e:	f7fe fe21 	bl	80001b4 <HAL_GetTick>
 8001572:	1bc0      	subs	r0, r0, r7
 8001574:	2802      	cmp	r0, #2
 8001576:	d9eb      	bls.n	8001550 <HAL_RCC_OscConfig+0x264>
 8001578:	e720      	b.n	80013bc <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800157a:	682b      	ldr	r3, [r5, #0]
 800157c:	0759      	lsls	r1, r3, #29
 800157e:	d404      	bmi.n	800158a <HAL_RCC_OscConfig+0x29e>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001580:	69ea      	ldr	r2, [r5, #28]
 8001582:	2a00      	cmp	r2, #0
 8001584:	f040 8081 	bne.w	800168a <HAL_RCC_OscConfig+0x39e>
 8001588:	e0d8      	b.n	800173c <HAL_RCC_OscConfig+0x450>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800158a:	4c17      	ldr	r4, [pc, #92]	; (80015e8 <HAL_RCC_OscConfig+0x2fc>)
    
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800158c:	4e18      	ldr	r6, [pc, #96]	; (80015f0 <HAL_RCC_OscConfig+0x304>)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800158e:	69e3      	ldr	r3, [r4, #28]
 8001590:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001594:	61e3      	str	r3, [r4, #28]
 8001596:	69e3      	ldr	r3, [r4, #28]
 8001598:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800159c:	9301      	str	r3, [sp, #4]
 800159e:	9b01      	ldr	r3, [sp, #4]
    
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015a0:	6833      	ldr	r3, [r6, #0]
 80015a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015a6:	6033      	str	r3, [r6, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015a8:	f7fe fe04 	bl	80001b4 <HAL_GetTick>
 80015ac:	4607      	mov	r7, r0

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80015ae:	6833      	ldr	r3, [r6, #0]
 80015b0:	05da      	lsls	r2, r3, #23
 80015b2:	d405      	bmi.n	80015c0 <HAL_RCC_OscConfig+0x2d4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015b4:	f7fe fdfe 	bl	80001b4 <HAL_GetTick>
 80015b8:	1bc0      	subs	r0, r0, r7
 80015ba:	2864      	cmp	r0, #100	; 0x64
 80015bc:	d9f7      	bls.n	80015ae <HAL_RCC_OscConfig+0x2c2>
 80015be:	e6fd      	b.n	80013bc <HAL_RCC_OscConfig+0xd0>
          return HAL_TIMEOUT;
        }
      }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015c0:	68eb      	ldr	r3, [r5, #12]
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d01c      	beq.n	8001600 <HAL_RCC_OscConfig+0x314>
 80015c6:	b9ab      	cbnz	r3, 80015f4 <HAL_RCC_OscConfig+0x308>
 80015c8:	6a23      	ldr	r3, [r4, #32]
 80015ca:	2602      	movs	r6, #2
 80015cc:	f023 0301 	bic.w	r3, r3, #1
 80015d0:	6223      	str	r3, [r4, #32]
 80015d2:	6a23      	ldr	r3, [r4, #32]
 80015d4:	4637      	mov	r7, r6
 80015d6:	f023 0304 	bic.w	r3, r3, #4
 80015da:	6223      	str	r3, [r4, #32]
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015dc:	f7fe fdea 	bl	80001b4 <HAL_GetTick>
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015e0:	f241 3988 	movw	r9, #5000	; 0x1388
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015e4:	4680      	mov	r8, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015e6:	e048      	b.n	800167a <HAL_RCC_OscConfig+0x38e>
 80015e8:	40021000 	.word	0x40021000
 80015ec:	42420480 	.word	0x42420480
 80015f0:	40007000 	.word	0x40007000
          return HAL_TIMEOUT;
        }
      }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015f4:	2b05      	cmp	r3, #5
 80015f6:	6a23      	ldr	r3, [r4, #32]
 80015f8:	d106      	bne.n	8001608 <HAL_RCC_OscConfig+0x31c>
 80015fa:	f043 0304 	orr.w	r3, r3, #4
 80015fe:	6223      	str	r3, [r4, #32]
 8001600:	6a23      	ldr	r3, [r4, #32]
 8001602:	f043 0301 	orr.w	r3, r3, #1
 8001606:	e005      	b.n	8001614 <HAL_RCC_OscConfig+0x328>
 8001608:	f023 0301 	bic.w	r3, r3, #1
 800160c:	6223      	str	r3, [r4, #32]
 800160e:	6a23      	ldr	r3, [r4, #32]
 8001610:	f023 0304 	bic.w	r3, r3, #4
 8001614:	6223      	str	r3, [r4, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001616:	f7fe fdcd 	bl	80001b4 <HAL_GetTick>
 800161a:	2602      	movs	r6, #2
 800161c:	4681      	mov	r9, r0
 800161e:	46b0      	mov	r8, r6
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001620:	f241 3788 	movw	r7, #5000	; 0x1388
 8001624:	fa96 f3a6 	rbit	r3, r6
 8001628:	fa96 f3a6 	rbit	r3, r6
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800162c:	b10b      	cbz	r3, 8001632 <HAL_RCC_OscConfig+0x346>
 800162e:	6a22      	ldr	r2, [r4, #32]
 8001630:	e000      	b.n	8001634 <HAL_RCC_OscConfig+0x348>
 8001632:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001634:	fa98 f3a8 	rbit	r3, r8
 8001638:	fab3 f383 	clz	r3, r3
 800163c:	f003 031f 	and.w	r3, r3, #31
 8001640:	fa22 f303 	lsr.w	r3, r2, r3
 8001644:	07db      	lsls	r3, r3, #31
 8001646:	d49b      	bmi.n	8001580 <HAL_RCC_OscConfig+0x294>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001648:	f7fe fdb4 	bl	80001b4 <HAL_GetTick>
 800164c:	ebc9 0000 	rsb	r0, r9, r0
 8001650:	42b8      	cmp	r0, r7
 8001652:	d9e7      	bls.n	8001624 <HAL_RCC_OscConfig+0x338>
 8001654:	e6b2      	b.n	80013bc <HAL_RCC_OscConfig+0xd0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001656:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001658:	fa97 f3a7 	rbit	r3, r7
 800165c:	fab3 f383 	clz	r3, r3
 8001660:	f003 031f 	and.w	r3, r3, #31
 8001664:	fa22 f303 	lsr.w	r3, r2, r3
 8001668:	07d8      	lsls	r0, r3, #31
 800166a:	d589      	bpl.n	8001580 <HAL_RCC_OscConfig+0x294>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800166c:	f7fe fda2 	bl	80001b4 <HAL_GetTick>
 8001670:	ebc8 0000 	rsb	r0, r8, r0
 8001674:	4548      	cmp	r0, r9
 8001676:	f63f aea1 	bhi.w	80013bc <HAL_RCC_OscConfig+0xd0>
 800167a:	fa96 f3a6 	rbit	r3, r6
 800167e:	fa96 f3a6 	rbit	r3, r6
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001682:	2b00      	cmp	r3, #0
 8001684:	d0e7      	beq.n	8001656 <HAL_RCC_OscConfig+0x36a>
 8001686:	6a22      	ldr	r2, [r4, #32]
 8001688:	e7e6      	b.n	8001658 <HAL_RCC_OscConfig+0x36c>
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800168a:	4c47      	ldr	r4, [pc, #284]	; (80017a8 <HAL_RCC_OscConfig+0x4bc>)
 800168c:	6863      	ldr	r3, [r4, #4]
 800168e:	f003 030c 	and.w	r3, r3, #12
 8001692:	2b08      	cmp	r3, #8
 8001694:	f43f ae54 	beq.w	8001340 <HAL_RCC_OscConfig+0x54>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001698:	2a02      	cmp	r2, #2
 800169a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800169e:	d15c      	bne.n	800175a <HAL_RCC_OscConfig+0x46e>
 80016a0:	fa93 f3a3 	rbit	r3, r3
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016a4:	fab3 f383 	clz	r3, r3
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 80016ae:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 80016b2:	2200      	movs	r2, #0
 80016b4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b6:	f7fe fd7d 	bl	80001b4 <HAL_GetTick>
 80016ba:	4680      	mov	r8, r0
 80016bc:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 80016c0:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016c4:	4f38      	ldr	r7, [pc, #224]	; (80017a8 <HAL_RCC_OscConfig+0x4bc>)
 80016c6:	6822      	ldr	r2, [r4, #0]
 80016c8:	fa96 f3a6 	rbit	r3, r6
 80016cc:	fab3 f383 	clz	r3, r3
 80016d0:	f003 031f 	and.w	r3, r3, #31
 80016d4:	fa22 f303 	lsr.w	r3, r2, r3
 80016d8:	07d9      	lsls	r1, r3, #31
 80016da:	d431      	bmi.n	8001740 <HAL_RCC_OscConfig+0x454>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80016dc:	6a2e      	ldr	r6, [r5, #32]
 80016de:	f5b6 3f80 	cmp.w	r6, #65536	; 0x10000
 80016e2:	d105      	bne.n	80016f0 <HAL_RCC_OscConfig+0x404>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80016e4:	6879      	ldr	r1, [r7, #4]
 80016e6:	f421 3000 	bic.w	r0, r1, #131072	; 0x20000
 80016ea:	68a9      	ldr	r1, [r5, #8]
 80016ec:	4301      	orrs	r1, r0
 80016ee:	6079      	str	r1, [r7, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016f0:	6863      	ldr	r3, [r4, #4]
 80016f2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80016f4:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 80016f8:	4332      	orrs	r2, r6
 80016fa:	4313      	orrs	r3, r2
 80016fc:	6063      	str	r3, [r4, #4]
 80016fe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001702:	fa93 f3a3 	rbit	r3, r3
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001706:	fab3 f383 	clz	r3, r3
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8001710:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8001714:	2201      	movs	r2, #1
 8001716:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001718:	f7fe fd4c 	bl	80001b4 <HAL_GetTick>
 800171c:	4606      	mov	r6, r0
 800171e:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8001722:	fa95 f3a5 	rbit	r3, r5
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001726:	6822      	ldr	r2, [r4, #0]
 8001728:	fa95 f3a5 	rbit	r3, r5
 800172c:	fab3 f383 	clz	r3, r3
 8001730:	f003 031f 	and.w	r3, r3, #31
 8001734:	fa22 f303 	lsr.w	r3, r2, r3
 8001738:	07da      	lsls	r2, r3, #31
 800173a:	d508      	bpl.n	800174e <HAL_RCC_OscConfig+0x462>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 800173c:	2000      	movs	r0, #0
 800173e:	e02f      	b.n	80017a0 <HAL_RCC_OscConfig+0x4b4>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001740:	f7fe fd38 	bl	80001b4 <HAL_GetTick>
 8001744:	ebc8 0000 	rsb	r0, r8, r0
 8001748:	2802      	cmp	r0, #2
 800174a:	d9b9      	bls.n	80016c0 <HAL_RCC_OscConfig+0x3d4>
 800174c:	e636      	b.n	80013bc <HAL_RCC_OscConfig+0xd0>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800174e:	f7fe fd31 	bl	80001b4 <HAL_GetTick>
 8001752:	1b80      	subs	r0, r0, r6
 8001754:	2802      	cmp	r0, #2
 8001756:	d9e4      	bls.n	8001722 <HAL_RCC_OscConfig+0x436>
 8001758:	e630      	b.n	80013bc <HAL_RCC_OscConfig+0xd0>
 800175a:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800175e:	fab3 f383 	clz	r3, r3
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8001768:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001770:	f7fe fd20 	bl	80001b4 <HAL_GetTick>
 8001774:	4606      	mov	r6, r0
 8001776:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 800177a:	fa95 f3a5 	rbit	r3, r5
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800177e:	6822      	ldr	r2, [r4, #0]
 8001780:	fa95 f3a5 	rbit	r3, r5
 8001784:	fab3 f383 	clz	r3, r3
 8001788:	f003 031f 	and.w	r3, r3, #31
 800178c:	fa22 f303 	lsr.w	r3, r2, r3
 8001790:	07db      	lsls	r3, r3, #31
 8001792:	d5d3      	bpl.n	800173c <HAL_RCC_OscConfig+0x450>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001794:	f7fe fd0e 	bl	80001b4 <HAL_GetTick>
 8001798:	1b80      	subs	r0, r0, r6
 800179a:	2802      	cmp	r0, #2
 800179c:	d9ed      	bls.n	800177a <HAL_RCC_OscConfig+0x48e>
 800179e:	e60d      	b.n	80013bc <HAL_RCC_OscConfig+0xd0>
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 80017a0:	b003      	add	sp, #12
 80017a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80017a6:	bf00      	nop
 80017a8:	40021000 	.word	0x40021000

080017ac <HAL_RCC_GetSysClockFreq>:
{
#if   defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[12] = {0, 0, 4,  5,  6,  7,  8,  9, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
 80017ac:	4b1f      	ldr	r3, [pc, #124]	; (800182c <HAL_RCC_GetSysClockFreq+0x80>)
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017ae:	b570      	push	{r4, r5, r6, lr}
#if   defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[12] = {0, 0, 4,  5,  6,  7,  8,  9, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
 80017b0:	f103 0510 	add.w	r5, r3, #16
 80017b4:	462e      	mov	r6, r5
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017b6:	b086      	sub	sp, #24
#if   defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[12] = {0, 0, 4,  5,  6,  7,  8,  9, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
 80017b8:	ac02      	add	r4, sp, #8
 80017ba:	4622      	mov	r2, r4
 80017bc:	6818      	ldr	r0, [r3, #0]
 80017be:	6859      	ldr	r1, [r3, #4]
 80017c0:	3308      	adds	r3, #8
 80017c2:	c203      	stmia	r2!, {r0, r1}
 80017c4:	42ab      	cmp	r3, r5
 80017c6:	4614      	mov	r4, r2
 80017c8:	d1f7      	bne.n	80017ba <HAL_RCC_GetSysClockFreq+0xe>
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = { 1, 2};
 80017ca:	8833      	ldrh	r3, [r6, #0]
  uint32_t sysclockfreq = 0;
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0, pll2mul = 0;
#endif /*RCC_CFGR2_PREDIV1SRC*/
  
  tmpreg = RCC->CFGR;
 80017cc:	4c18      	ldr	r4, [pc, #96]	; (8001830 <HAL_RCC_GetSysClockFreq+0x84>)
#else
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = { 1, 2};
 80017ce:	f8ad 3004 	strh.w	r3, [sp, #4]
  uint32_t sysclockfreq = 0;
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0, pll2mul = 0;
#endif /*RCC_CFGR2_PREDIV1SRC*/
  
  tmpreg = RCC->CFGR;
 80017d2:	6860      	ldr	r0, [r4, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80017d4:	f000 030c 	and.w	r3, r0, #12
 80017d8:	2b08      	cmp	r3, #8
 80017da:	d124      	bne.n	8001826 <HAL_RCC_GetSysClockFreq+0x7a>
 80017dc:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 80017e0:	fa93 f3a3 	rbit	r3, r3
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> POSITION_VAL(RCC_CFGR_PLLMULL)];
 80017e4:	fab3 f383 	clz	r3, r3
 80017e8:	f400 1270 	and.w	r2, r0, #3932160	; 0x3c0000
 80017ec:	fa22 f303 	lsr.w	r3, r2, r3
 80017f0:	aa06      	add	r2, sp, #24
 80017f2:	4413      	add	r3, r2
 80017f4:	f813 1c10 	ldrb.w	r1, [r3, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80017f8:	03c3      	lsls	r3, r0, #15
 80017fa:	d511      	bpl.n	8001820 <HAL_RCC_GetSysClockFreq+0x74>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> POSITION_VAL(RCC_CFGR2_PREDIV1)];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> POSITION_VAL(RCC_CFGR_PLLXTPRE)];
 80017fc:	6862      	ldr	r2, [r4, #4]
 80017fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001802:	fa93 f3a3 	rbit	r3, r3
 8001806:	fab3 f083 	clz	r0, r3
 800180a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800180e:	40c3      	lsrs	r3, r0
 8001810:	aa06      	add	r2, sp, #24
 8001812:	4413      	add	r3, r2
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE / prediv) * pllmul);
 8001814:	f813 0c14 	ldrb.w	r0, [r3, #-20]
 8001818:	4b06      	ldr	r3, [pc, #24]	; (8001834 <HAL_RCC_GetSysClockFreq+0x88>)
 800181a:	fbb3 f0f0 	udiv	r0, r3, r0
 800181e:	e000      	b.n	8001822 <HAL_RCC_GetSysClockFreq+0x76>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001820:	4805      	ldr	r0, [pc, #20]	; (8001838 <HAL_RCC_GetSysClockFreq+0x8c>)
 8001822:	4348      	muls	r0, r1
 8001824:	e000      	b.n	8001828 <HAL_RCC_GetSysClockFreq+0x7c>
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001826:	4803      	ldr	r0, [pc, #12]	; (8001834 <HAL_RCC_GetSysClockFreq+0x88>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001828:	b006      	add	sp, #24
 800182a:	bd70      	pop	{r4, r5, r6, pc}
 800182c:	080043c0 	.word	0x080043c0
 8001830:	40021000 	.word	0x40021000
 8001834:	007a1200 	.word	0x007a1200
 8001838:	003d0900 	.word	0x003d0900

0800183c <HAL_RCC_ClockConfig>:
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800183c:	4a54      	ldr	r2, [pc, #336]	; (8001990 <HAL_RCC_ClockConfig+0x154>)
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800183e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001842:	6813      	ldr	r3, [r2, #0]
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001844:	4606      	mov	r6, r0
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001846:	f003 0307 	and.w	r3, r3, #7
 800184a:	428b      	cmp	r3, r1
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800184c:	460d      	mov	r5, r1
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800184e:	d30a      	bcc.n	8001866 <HAL_RCC_ClockConfig+0x2a>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001850:	6831      	ldr	r1, [r6, #0]
 8001852:	078c      	lsls	r4, r1, #30
 8001854:	d514      	bpl.n	8001880 <HAL_RCC_ClockConfig+0x44>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001856:	484f      	ldr	r0, [pc, #316]	; (8001994 <HAL_RCC_ClockConfig+0x158>)
 8001858:	6843      	ldr	r3, [r0, #4]
 800185a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800185e:	68b3      	ldr	r3, [r6, #8]
 8001860:	4313      	orrs	r3, r2
 8001862:	6043      	str	r3, [r0, #4]
 8001864:	e00c      	b.n	8001880 <HAL_RCC_ClockConfig+0x44>
#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001866:	6813      	ldr	r3, [r2, #0]
 8001868:	f023 0307 	bic.w	r3, r3, #7
 800186c:	430b      	orrs	r3, r1
 800186e:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001870:	6813      	ldr	r3, [r2, #0]
 8001872:	f003 0307 	and.w	r3, r3, #7
 8001876:	4299      	cmp	r1, r3
 8001878:	d0ea      	beq.n	8001850 <HAL_RCC_ClockConfig+0x14>
    {
      return HAL_ERROR;
 800187a:	2001      	movs	r0, #1
 800187c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001880:	07c8      	lsls	r0, r1, #31
 8001882:	d406      	bmi.n	8001892 <HAL_RCC_ClockConfig+0x56>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001884:	4a42      	ldr	r2, [pc, #264]	; (8001990 <HAL_RCC_ClockConfig+0x154>)
 8001886:	6813      	ldr	r3, [r2, #0]
 8001888:	f003 0307 	and.w	r3, r3, #7
 800188c:	429d      	cmp	r5, r3
 800188e:	d34a      	bcc.n	8001926 <HAL_RCC_ClockConfig+0xea>
 8001890:	e053      	b.n	800193a <HAL_RCC_ClockConfig+0xfe>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001892:	6872      	ldr	r2, [r6, #4]
 8001894:	4c3f      	ldr	r4, [pc, #252]	; (8001994 <HAL_RCC_ClockConfig+0x158>)
 8001896:	2a01      	cmp	r2, #1
 8001898:	d102      	bne.n	80018a0 <HAL_RCC_ClockConfig+0x64>
 800189a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800189e:	e004      	b.n	80018aa <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018a0:	2a02      	cmp	r2, #2
 80018a2:	bf0c      	ite	eq
 80018a4:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 80018a8:	2302      	movne	r3, #2
 80018aa:	fa93 f1a3 	rbit	r1, r3
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018ae:	6821      	ldr	r1, [r4, #0]
 80018b0:	fa93 f3a3 	rbit	r3, r3
 80018b4:	fab3 f383 	clz	r3, r3
 80018b8:	f003 031f 	and.w	r3, r3, #31
 80018bc:	fa21 f303 	lsr.w	r3, r1, r3
 80018c0:	07d9      	lsls	r1, r3, #31
 80018c2:	d5da      	bpl.n	800187a <HAL_RCC_ClockConfig+0x3e>
      {
        return HAL_ERROR;
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018c4:	6863      	ldr	r3, [r4, #4]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018c6:	f241 3888 	movw	r8, #5000	; 0x1388
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
      {
        return HAL_ERROR;
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018ca:	f023 0303 	bic.w	r3, r3, #3
 80018ce:	431a      	orrs	r2, r3
 80018d0:	6062      	str	r2, [r4, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018d2:	f7fe fc6f 	bl	80001b4 <HAL_GetTick>
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018d6:	6873      	ldr	r3, [r6, #4]
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018d8:	4607      	mov	r7, r0
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d10c      	bne.n	80018f8 <HAL_RCC_ClockConfig+0xbc>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80018de:	6863      	ldr	r3, [r4, #4]
 80018e0:	f003 030c 	and.w	r3, r3, #12
 80018e4:	2b04      	cmp	r3, #4
 80018e6:	d0cd      	beq.n	8001884 <HAL_RCC_ClockConfig+0x48>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018e8:	f7fe fc64 	bl	80001b4 <HAL_GetTick>
 80018ec:	1bc0      	subs	r0, r0, r7
 80018ee:	4540      	cmp	r0, r8
 80018f0:	d9f5      	bls.n	80018de <HAL_RCC_ClockConfig+0xa2>
        {
          return HAL_TIMEOUT;
 80018f2:	2003      	movs	r0, #3
 80018f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018f8:	2b02      	cmp	r3, #2
 80018fa:	d10f      	bne.n	800191c <HAL_RCC_ClockConfig+0xe0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018fc:	6863      	ldr	r3, [r4, #4]
 80018fe:	f003 030c 	and.w	r3, r3, #12
 8001902:	2b08      	cmp	r3, #8
 8001904:	d0be      	beq.n	8001884 <HAL_RCC_ClockConfig+0x48>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001906:	f7fe fc55 	bl	80001b4 <HAL_GetTick>
 800190a:	1bc0      	subs	r0, r0, r7
 800190c:	4540      	cmp	r0, r8
 800190e:	d9f5      	bls.n	80018fc <HAL_RCC_ClockConfig+0xc0>
 8001910:	e7ef      	b.n	80018f2 <HAL_RCC_ClockConfig+0xb6>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001912:	f7fe fc4f 	bl	80001b4 <HAL_GetTick>
 8001916:	1bc0      	subs	r0, r0, r7
 8001918:	4540      	cmp	r0, r8
 800191a:	d8ea      	bhi.n	80018f2 <HAL_RCC_ClockConfig+0xb6>
        }
      }
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800191c:	6863      	ldr	r3, [r4, #4]
 800191e:	f013 0f0c 	tst.w	r3, #12
 8001922:	d1f6      	bne.n	8001912 <HAL_RCC_ClockConfig+0xd6>
 8001924:	e7ae      	b.n	8001884 <HAL_RCC_ClockConfig+0x48>
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001926:	6813      	ldr	r3, [r2, #0]
 8001928:	f023 0307 	bic.w	r3, r3, #7
 800192c:	432b      	orrs	r3, r5
 800192e:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001930:	6813      	ldr	r3, [r2, #0]
 8001932:	f003 0307 	and.w	r3, r3, #7
 8001936:	429d      	cmp	r5, r3
 8001938:	d19f      	bne.n	800187a <HAL_RCC_ClockConfig+0x3e>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800193a:	6831      	ldr	r1, [r6, #0]
 800193c:	4c15      	ldr	r4, [pc, #84]	; (8001994 <HAL_RCC_ClockConfig+0x158>)
 800193e:	f011 0f04 	tst.w	r1, #4
 8001942:	d005      	beq.n	8001950 <HAL_RCC_ClockConfig+0x114>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001944:	6863      	ldr	r3, [r4, #4]
 8001946:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800194a:	68f3      	ldr	r3, [r6, #12]
 800194c:	4313      	orrs	r3, r2
 800194e:	6063      	str	r3, [r4, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001950:	070b      	lsls	r3, r1, #28
 8001952:	d506      	bpl.n	8001962 <HAL_RCC_ClockConfig+0x126>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001954:	6863      	ldr	r3, [r4, #4]
 8001956:	6932      	ldr	r2, [r6, #16]
 8001958:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800195c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001960:	6063      	str	r3, [r4, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001962:	f7ff ff23 	bl	80017ac <HAL_RCC_GetSysClockFreq>
 8001966:	6863      	ldr	r3, [r4, #4]
 8001968:	22f0      	movs	r2, #240	; 0xf0
 800196a:	fa92 f2a2 	rbit	r2, r2
 800196e:	fab2 f282 	clz	r2, r2
 8001972:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001976:	40d3      	lsrs	r3, r2
 8001978:	4a07      	ldr	r2, [pc, #28]	; (8001998 <HAL_RCC_ClockConfig+0x15c>)
 800197a:	5cd3      	ldrb	r3, [r2, r3]
 800197c:	40d8      	lsrs	r0, r3
 800197e:	4b07      	ldr	r3, [pc, #28]	; (800199c <HAL_RCC_ClockConfig+0x160>)
 8001980:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001982:	2000      	movs	r0, #0
 8001984:	f7fe fbea 	bl	800015c <HAL_InitTick>
  
  return HAL_OK;
 8001988:	2000      	movs	r0, #0
}
 800198a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800198e:	bf00      	nop
 8001990:	40022000 	.word	0x40022000
 8001994:	40021000 	.word	0x40021000
 8001998:	0800448b 	.word	0x0800448b
 800199c:	20000110 	.word	0x20000110

080019a0 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80019a0:	4b01      	ldr	r3, [pc, #4]	; (80019a8 <HAL_RCC_GetHCLKFreq+0x8>)
 80019a2:	6818      	ldr	r0, [r3, #0]
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	20000110 	.word	0x20000110

080019ac <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80019ac:	4b08      	ldr	r3, [pc, #32]	; (80019d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80019ae:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	fa92 f2a2 	rbit	r2, r2
 80019b8:	fab2 f282 	clz	r2, r2
 80019bc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80019c0:	40d3      	lsrs	r3, r2
 80019c2:	4a04      	ldr	r2, [pc, #16]	; (80019d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80019c4:	5cd3      	ldrb	r3, [r2, r3]
 80019c6:	4a04      	ldr	r2, [pc, #16]	; (80019d8 <HAL_RCC_GetPCLK2Freq+0x2c>)
 80019c8:	6810      	ldr	r0, [r2, #0]
} 
 80019ca:	40d8      	lsrs	r0, r3
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	40021000 	.word	0x40021000
 80019d4:	0800449b 	.word	0x0800449b
 80019d8:	20000110 	.word	0x20000110

080019dc <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80019dc:	6803      	ldr	r3, [r0, #0]
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80019de:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80019e2:	07dc      	lsls	r4, r3, #31
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80019e4:	4605      	mov	r5, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80019e6:	d564      	bpl.n	8001ab2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80019e8:	4c3e      	ldr	r4, [pc, #248]	; (8001ae4 <HAL_RCCEx_PeriphCLKConfig+0x108>)
    
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR, PWR_CR_DBP);
 80019ea:	4e3f      	ldr	r6, [pc, #252]	; (8001ae8 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80019ec:	69e3      	ldr	r3, [r4, #28]
 80019ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019f2:	61e3      	str	r3, [r4, #28]
 80019f4:	69e3      	ldr	r3, [r4, #28]
 80019f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019fa:	9301      	str	r3, [sp, #4]
 80019fc:	9b01      	ldr	r3, [sp, #4]
    
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR, PWR_CR_DBP);
 80019fe:	6833      	ldr	r3, [r6, #0]
 8001a00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a04:	6033      	str	r3, [r6, #0]
    
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001a06:	f7fe fbd5 	bl	80001b4 <HAL_GetTick>
 8001a0a:	4607      	mov	r7, r0
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001a0c:	6833      	ldr	r3, [r6, #0]
 8001a0e:	05d8      	lsls	r0, r3, #23
 8001a10:	d406      	bmi.n	8001a20 <HAL_RCCEx_PeriphCLKConfig+0x44>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a12:	f7fe fbcf 	bl	80001b4 <HAL_GetTick>
 8001a16:	1bc0      	subs	r0, r0, r7
 8001a18:	2864      	cmp	r0, #100	; 0x64
 8001a1a:	d9f7      	bls.n	8001a0c <HAL_RCCEx_PeriphCLKConfig+0x30>
      {
        return HAL_TIMEOUT;
 8001a1c:	2003      	movs	r0, #3
 8001a1e:	e05d      	b.n	8001adc <HAL_RCCEx_PeriphCLKConfig+0x100>
      }      
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001a20:	6a23      	ldr	r3, [r4, #32]
 8001a22:	4830      	ldr	r0, [pc, #192]	; (8001ae4 <HAL_RCCEx_PeriphCLKConfig+0x108>)
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001a24:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001a28:	d106      	bne.n	8001a38 <HAL_RCCEx_PeriphCLKConfig+0x5c>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8001a2a:	6a23      	ldr	r3, [r4, #32]
 8001a2c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001a30:	686b      	ldr	r3, [r5, #4]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	6223      	str	r3, [r4, #32]
 8001a36:	e03c      	b.n	8001ab2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
      }      
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001a38:	686a      	ldr	r2, [r5, #4]
 8001a3a:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d0f3      	beq.n	8001a2a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001a42:	6a01      	ldr	r1, [r0, #32]
 8001a44:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a48:	f421 7740 	bic.w	r7, r1, #768	; 0x300
 8001a4c:	fa93 f2a3 	rbit	r2, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001a50:	fab2 f282 	clz	r2, r2
 8001a54:	4e25      	ldr	r6, [pc, #148]	; (8001aec <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8001a56:	f04f 0e01 	mov.w	lr, #1
 8001a5a:	f846 e022 	str.w	lr, [r6, r2, lsl #2]
 8001a5e:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001a62:	fab3 f383 	clz	r3, r3
 8001a66:	2200      	movs	r2, #0
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001a68:	07c9      	lsls	r1, r1, #31
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001a6a:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001a6e:	6207      	str	r7, [r0, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001a70:	d5db      	bpl.n	8001a2a <HAL_RCCEx_PeriphCLKConfig+0x4e>
      {
        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a72:	f7fe fb9f 	bl	80001b4 <HAL_GetTick>
 8001a76:	2602      	movs	r6, #2
 8001a78:	4680      	mov	r8, r0
 8001a7a:	4637      	mov	r7, r6
      
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a7c:	f241 3988 	movw	r9, #5000	; 0x1388
 8001a80:	fa96 f3a6 	rbit	r3, r6
 8001a84:	fa96 f3a6 	rbit	r3, r6
      {
        /* Get timeout */
        tickstart = HAL_GetTick();
      
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a88:	b10b      	cbz	r3, 8001a8e <HAL_RCCEx_PeriphCLKConfig+0xb2>
 8001a8a:	6a22      	ldr	r2, [r4, #32]
 8001a8c:	e000      	b.n	8001a90 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8001a8e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001a90:	fa97 f3a7 	rbit	r3, r7
 8001a94:	fab3 f383 	clz	r3, r3
 8001a98:	f003 031f 	and.w	r3, r3, #31
 8001a9c:	fa22 f303 	lsr.w	r3, r2, r3
 8001aa0:	07da      	lsls	r2, r3, #31
 8001aa2:	d4c2      	bmi.n	8001a2a <HAL_RCCEx_PeriphCLKConfig+0x4e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aa4:	f7fe fb86 	bl	80001b4 <HAL_GetTick>
 8001aa8:	ebc8 0000 	rsb	r0, r8, r0
 8001aac:	4548      	cmp	r0, r9
 8001aae:	d9e7      	bls.n	8001a80 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8001ab0:	e7b4      	b.n	8001a1c <HAL_RCCEx_PeriphCLKConfig+0x40>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001ab2:	6828      	ldr	r0, [r5, #0]
 8001ab4:	0783      	lsls	r3, r0, #30
 8001ab6:	d506      	bpl.n	8001ac6 <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001ab8:	490a      	ldr	r1, [pc, #40]	; (8001ae4 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8001aba:	684b      	ldr	r3, [r1, #4]
 8001abc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001ac0:	68ab      	ldr	r3, [r5, #8]
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001ac6:	f010 0010 	ands.w	r0, r0, #16
 8001aca:	d007      	beq.n	8001adc <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001acc:	4905      	ldr	r1, [pc, #20]	; (8001ae4 <HAL_RCCEx_PeriphCLKConfig+0x108>)
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001ace:	2000      	movs	r0, #0
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001ad0:	684b      	ldr	r3, [r1, #4]
 8001ad2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001ad6:	68eb      	ldr	r3, [r5, #12]
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
}
 8001adc:	b003      	add	sp, #12
 8001ade:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001ae2:	bf00      	nop
 8001ae4:	40021000 	.word	0x40021000
 8001ae8:	40007000 	.word	0x40007000
 8001aec:	42420400 	.word	0x42420400

08001af0 <HAL_RCCEx_GetPeriphCLKFreq>:
 || defined(STM32F105xC) || defined(STM32F107xC)
#if defined(STM32F105xC) || defined(STM32F107xC)
  const uint8_t aPLLMULFactorTable[12] = {0, 0, 4,  5,  6,  7,  8,  9, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001af0:	4b3f      	ldr	r3, [pc, #252]	; (8001bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>)
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8001af2:	b5f0      	push	{r4, r5, r6, r7, lr}
 || defined(STM32F105xC) || defined(STM32F107xC)
#if defined(STM32F105xC) || defined(STM32F107xC)
  const uint8_t aPLLMULFactorTable[12] = {0, 0, 4,  5,  6,  7,  8,  9, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001af4:	f103 0610 	add.w	r6, r3, #16
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8001af8:	4604      	mov	r4, r0
 8001afa:	4637      	mov	r7, r6
 8001afc:	b087      	sub	sp, #28
 || defined(STM32F105xC) || defined(STM32F107xC)
#if defined(STM32F105xC) || defined(STM32F107xC)
  const uint8_t aPLLMULFactorTable[12] = {0, 0, 4,  5,  6,  7,  8,  9, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001afe:	ad02      	add	r5, sp, #8
 8001b00:	462a      	mov	r2, r5
 8001b02:	6818      	ldr	r0, [r3, #0]
 8001b04:	6859      	ldr	r1, [r3, #4]
 8001b06:	3308      	adds	r3, #8
 8001b08:	c203      	stmia	r2!, {r0, r1}
 8001b0a:	42b3      	cmp	r3, r6
 8001b0c:	4615      	mov	r5, r2
 8001b0e:	d1f7      	bne.n	8001b00 <HAL_RCCEx_GetPeriphCLKFreq+0x10>
  const uint8_t aPredivFactorTable[2] = { 1, 2};
 8001b10:	883b      	ldrh	r3, [r7, #0]
#endif /* STM32F105xC || STM32F107xC */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
  
  switch (PeriphClk)
 8001b12:	2c02      	cmp	r4, #2
#if defined(STM32F105xC) || defined(STM32F107xC)
  const uint8_t aPLLMULFactorTable[12] = {0, 0, 4,  5,  6,  7,  8,  9, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
  const uint8_t aPredivFactorTable[2] = { 1, 2};
 8001b14:	f8ad 3004 	strh.w	r3, [sp, #4]
#endif /* STM32F105xC || STM32F107xC */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
  
  switch (PeriphClk)
 8001b18:	d052      	beq.n	8001bc0 <HAL_RCCEx_GetPeriphCLKFreq+0xd0>
 8001b1a:	2c10      	cmp	r4, #16
 8001b1c:	d002      	beq.n	8001b24 <HAL_RCCEx_GetPeriphCLKFreq+0x34>
 8001b1e:	2c01      	cmp	r4, #1
 8001b20:	d163      	bne.n	8001bea <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8001b22:	e02f      	b.n	8001b84 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  case RCC_PERIPHCLK_USB:  
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8001b24:	4c33      	ldr	r4, [pc, #204]	; (8001bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x104>)
 8001b26:	6861      	ldr	r1, [r4, #4]
  
      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLLON))
 8001b28:	6820      	ldr	r0, [r4, #0]
 8001b2a:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 8001b2e:	d05d      	beq.n	8001bec <HAL_RCCEx_GetPeriphCLKFreq+0xfc>
 8001b30:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8001b34:	fa93 f3a3 	rbit	r3, r3
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> POSITION_VAL(RCC_CFGR_PLLMULL)];
 8001b38:	fab3 f383 	clz	r3, r3
 8001b3c:	f401 1270 	and.w	r2, r1, #3932160	; 0x3c0000
 8001b40:	fa22 f303 	lsr.w	r3, r2, r3
 8001b44:	aa06      	add	r2, sp, #24
 8001b46:	4413      	add	r3, r2
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b48:	03ca      	lsls	r2, r1, #15
      temp_reg = RCC->CFGR;
  
      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLLON))
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> POSITION_VAL(RCC_CFGR_PLLMULL)];
 8001b4a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b4e:	d511      	bpl.n	8001b74 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> POSITION_VAL(RCC_CFGR2_PREDIV1)];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> POSITION_VAL(RCC_CFGR_PLLXTPRE)];
 8001b50:	6861      	ldr	r1, [r4, #4]
 8001b52:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b56:	fa92 f2a2 	rbit	r2, r2
 8001b5a:	fab2 f082 	clz	r0, r2
 8001b5e:	f401 3200 	and.w	r2, r1, #131072	; 0x20000
 8001b62:	40c2      	lsrs	r2, r0
 8001b64:	a906      	add	r1, sp, #24
 8001b66:	440a      	add	r2, r1
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8001b68:	f812 0c14 	ldrb.w	r0, [r2, #-20]
 8001b6c:	4a22      	ldr	r2, [pc, #136]	; (8001bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>)
 8001b6e:	fbb2 f0f0 	udiv	r0, r2, r0
 8001b72:	e000      	b.n	8001b76 <HAL_RCCEx_GetPeriphCLKFreq+0x86>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001b74:	4821      	ldr	r0, [pc, #132]	; (8001bfc <HAL_RCCEx_GetPeriphCLKFreq+0x10c>)
 8001b76:	4358      	muls	r0, r3
          /* Prescaler of 3 selected for USB */ 
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8001b78:	6863      	ldr	r3, [r4, #4]
 8001b7a:	025b      	lsls	r3, r3, #9
 8001b7c:	d436      	bmi.n	8001bec <HAL_RCCEx_GetPeriphCLKFreq+0xfc>
          frequency = pllclk;
        }
        else
        {
          /* Prescaler of 1.5 selected for USB */ 
          frequency = (pllclk * 2) / 3;
 8001b7e:	0040      	lsls	r0, r0, #1
 8001b80:	2303      	movs	r3, #3
 8001b82:	e02c      	b.n	8001bde <HAL_RCCEx_GetPeriphCLKFreq+0xee>
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8001b84:	f240 3102 	movw	r1, #770	; 0x302
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
  case RCC_PERIPHCLK_RTC:  
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8001b88:	4a1a      	ldr	r2, [pc, #104]	; (8001bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x104>)
 8001b8a:	6a13      	ldr	r3, [r2, #32]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8001b8c:	4019      	ands	r1, r3
 8001b8e:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
 8001b92:	d027      	beq.n	8001be4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
      {
        frequency = LSE_VALUE;
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8001b94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b9c:	d105      	bne.n	8001baa <HAL_RCCEx_GetPeriphCLKFreq+0xba>
 8001b9e:	6a53      	ldr	r3, [r2, #36]	; 0x24
      {
        frequency = LSI_VALUE;
 8001ba0:	f649 4040 	movw	r0, #40000	; 0x9c40
 8001ba4:	f013 0f02 	tst.w	r3, #2
 8001ba8:	e007      	b.n	8001bba <HAL_RCCEx_GetPeriphCLKFreq+0xca>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8001baa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001bae:	d11c      	bne.n	8001bea <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
      {
        frequency = HSE_VALUE / 128;
 8001bb0:	f24f 4024 	movw	r0, #62500	; 0xf424
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
      {
        frequency = LSI_VALUE;
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8001bb4:	6813      	ldr	r3, [r2, #0]
      {
        frequency = HSE_VALUE / 128;
 8001bb6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001bba:	bf08      	it	eq
 8001bbc:	2000      	moveq	r0, #0
 8001bbe:	e015      	b.n	8001bec <HAL_RCCEx_GetPeriphCLKFreq+0xfc>
      }
      break;
    }
  case RCC_PERIPHCLK_ADC:  
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> POSITION_VAL(RCC_CFGR_ADCPRE_DIV4)) + 1) * 2);
 8001bc0:	f7ff fef4 	bl	80019ac <HAL_RCC_GetPCLK2Freq>
 8001bc4:	4b0b      	ldr	r3, [pc, #44]	; (8001bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x104>)
 8001bc6:	685a      	ldr	r2, [r3, #4]
 8001bc8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001bcc:	fa93 f3a3 	rbit	r3, r3
 8001bd0:	fab3 f183 	clz	r1, r3
 8001bd4:	f402 4340 	and.w	r3, r2, #49152	; 0xc000
 8001bd8:	40cb      	lsrs	r3, r1
 8001bda:	3301      	adds	r3, #1
 8001bdc:	005b      	lsls	r3, r3, #1
 8001bde:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8001be2:	e003      	b.n	8001bec <HAL_RCCEx_GetPeriphCLKFreq+0xfc>
      temp_reg = RCC->BDCR;

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
      {
        frequency = LSE_VALUE;
 8001be4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001be8:	e000      	b.n	8001bec <HAL_RCCEx_GetPeriphCLKFreq+0xfc>
        frequency = HSE_VALUE / 128;
      }
      /* Clock not enabled for RTC*/
      else
      {
        frequency = 0;
 8001bea:	2000      	movs	r0, #0
    {
      break;
    }
  }
  return(frequency);
}
 8001bec:	b007      	add	sp, #28
 8001bee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bf0:	080043d2 	.word	0x080043d2
 8001bf4:	40021000 	.word	0x40021000
 8001bf8:	007a1200 	.word	0x007a1200
 8001bfc:	003d0900 	.word	0x003d0900

08001c00 <SPI_WaitOnFlagUntilTimeout>:
  * @param  Status: Flag status to check: RESET or set
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status, uint32_t Timeout)  
{
 8001c00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c04:	4604      	mov	r4, r0
 8001c06:	460e      	mov	r6, r1
 8001c08:	4690      	mov	r8, r2
 8001c0a:	461d      	mov	r5, r3
  uint32_t tickstart = 0;

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001c0c:	f7fe fad2 	bl	80001b4 <HAL_GetTick>
 8001c10:	4607      	mov	r7, r0

  /* Wait until flag is set */
  if(Status == RESET)
 8001c12:	f1b8 0f00 	cmp.w	r8, #0
 8001c16:	d13a      	bne.n	8001c8e <SPI_WaitOnFlagUntilTimeout+0x8e>
  {
    while(__HAL_SPI_GET_FLAG(hspi, Flag) == RESET)
 8001c18:	6822      	ldr	r2, [r4, #0]
 8001c1a:	6893      	ldr	r3, [r2, #8]
 8001c1c:	ea36 0303 	bics.w	r3, r6, r3
 8001c20:	d00e      	beq.n	8001c40 <SPI_WaitOnFlagUntilTimeout+0x40>
    {
      if(Timeout != HAL_MAX_DELAY)
 8001c22:	1c69      	adds	r1, r5, #1
 8001c24:	d0f9      	beq.n	8001c1a <SPI_WaitOnFlagUntilTimeout+0x1a>
      {
        if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001c26:	b17d      	cbz	r5, 8001c48 <SPI_WaitOnFlagUntilTimeout+0x48>
 8001c28:	f7fe fac4 	bl	80001b4 <HAL_GetTick>
 8001c2c:	1bc0      	subs	r0, r0, r7
 8001c2e:	4285      	cmp	r5, r0
 8001c30:	d2f2      	bcs.n	8001c18 <SPI_WaitOnFlagUntilTimeout+0x18>
 8001c32:	e009      	b.n	8001c48 <SPI_WaitOnFlagUntilTimeout+0x48>
  }
  else
  {
    while(__HAL_SPI_GET_FLAG(hspi, Flag) != RESET)
    {
      if(Timeout != HAL_MAX_DELAY)
 8001c34:	1c6b      	adds	r3, r5, #1
 8001c36:	d106      	bne.n	8001c46 <SPI_WaitOnFlagUntilTimeout+0x46>
      }
    }
  }
  else
  {
    while(__HAL_SPI_GET_FLAG(hspi, Flag) != RESET)
 8001c38:	6893      	ldr	r3, [r2, #8]
 8001c3a:	ea36 0303 	bics.w	r3, r6, r3
 8001c3e:	d0f9      	beq.n	8001c34 <SPI_WaitOnFlagUntilTimeout+0x34>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 8001c40:	2000      	movs	r0, #0
 8001c42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  {
    while(__HAL_SPI_GET_FLAG(hspi, Flag) != RESET)
    {
      if(Timeout != HAL_MAX_DELAY)
      {
        if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001c46:	b9ed      	cbnz	r5, 8001c84 <SPI_WaitOnFlagUntilTimeout+0x84>
          /* Disable the SPI and reset the CRC: the CRC value should be cleared
             on both master and slave sides in order to resynchronize the master
             and slave for their respective CRC calculation */

          /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
          __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001c48:	6823      	ldr	r3, [r4, #0]
 8001c4a:	685a      	ldr	r2, [r3, #4]
 8001c4c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001c50:	605a      	str	r2, [r3, #4]

          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c58:	601a      	str	r2, [r3, #0]

          /* Reset CRC Calculation */
          if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001c5a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001c5c:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001c60:	d107      	bne.n	8001c72 <SPI_WaitOnFlagUntilTimeout+0x72>
          {
            SPI_RESET_CRC(hspi);
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001c68:	601a      	str	r2, [r3, #0]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001c70:	601a      	str	r2, [r3, #0]
          }

          hspi->State= HAL_SPI_STATE_READY;
 8001c72:	2301      	movs	r3, #1
 8001c74:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 8001c78:	2300      	movs	r3, #0
 8001c7a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50

          return HAL_TIMEOUT;
 8001c7e:	2003      	movs	r0, #3
 8001c80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  {
    while(__HAL_SPI_GET_FLAG(hspi, Flag) != RESET)
    {
      if(Timeout != HAL_MAX_DELAY)
      {
        if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001c84:	f7fe fa96 	bl	80001b4 <HAL_GetTick>
 8001c88:	1bc0      	subs	r0, r0, r7
 8001c8a:	4285      	cmp	r5, r0
 8001c8c:	d3dc      	bcc.n	8001c48 <SPI_WaitOnFlagUntilTimeout+0x48>
      }
    }
  }
  else
  {
    while(__HAL_SPI_GET_FLAG(hspi, Flag) != RESET)
 8001c8e:	6822      	ldr	r2, [r4, #0]
 8001c90:	e7d2      	b.n	8001c38 <SPI_WaitOnFlagUntilTimeout+0x38>

08001c92 <HAL_SPI_TransmitReceive>:
  * @param  Size: amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
{
 8001c92:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001c94:	4604      	mov	r4, r0
  __IO uint16_t tmpreg = 0;
 8001c96:	2000      	movs	r0, #0
 8001c98:	f8ad 0006 	strh.w	r0, [sp, #6]

  if((hspi->State == HAL_SPI_STATE_READY) || (hspi->State == HAL_SPI_STATE_BUSY_RX))
 8001c9c:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
  * @param  Size: amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
{
 8001ca0:	9d06      	ldr	r5, [sp, #24]
  __IO uint16_t tmpreg = 0;

  if((hspi->State == HAL_SPI_STATE_READY) || (hspi->State == HAL_SPI_STATE_BUSY_RX))
 8001ca2:	2801      	cmp	r0, #1
 8001ca4:	d004      	beq.n	8001cb0 <HAL_SPI_TransmitReceive+0x1e>
 8001ca6:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8001caa:	2822      	cmp	r0, #34	; 0x22
 8001cac:	f040 813d 	bne.w	8001f2a <HAL_SPI_TransmitReceive+0x298>
  {
    if((pTxData == NULL ) || (pRxData == NULL ) || (Size == 0))
 8001cb0:	2900      	cmp	r1, #0
 8001cb2:	f000 8138 	beq.w	8001f26 <HAL_SPI_TransmitReceive+0x294>
 8001cb6:	2a00      	cmp	r2, #0
 8001cb8:	f000 8135 	beq.w	8001f26 <HAL_SPI_TransmitReceive+0x294>
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	f000 8132 	beq.w	8001f26 <HAL_SPI_TransmitReceive+0x294>

    /* Check the parameters */
    assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

    /* Process Locked */
    __HAL_LOCK(hspi);
 8001cc2:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
 8001cc6:	2801      	cmp	r0, #1
 8001cc8:	f000 812f 	beq.w	8001f2a <HAL_SPI_TransmitReceive+0x298>
 8001ccc:	2001      	movs	r0, #1
 8001cce:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
 
    /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
    if(hspi->State == HAL_SPI_STATE_READY)
 8001cd2:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
    /*Init field not used in handle to zero */
    hspi->RxISR = 0;
    hspi->TxISR = 0;

    /* Reset CRC Calculation */
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001cd6:	6aa6      	ldr	r6, [r4, #40]	; 0x28

    /* Process Locked */
    __HAL_LOCK(hspi);
 
    /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
    if(hspi->State == HAL_SPI_STATE_READY)
 8001cd8:	2801      	cmp	r0, #1
    {
      hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001cda:	bf04      	itt	eq
 8001cdc:	2032      	moveq	r0, #50	; 0x32
 8001cde:	f884 0051 	strbeq.w	r0, [r4, #81]	; 0x51
    }

     /* Configure communication */   
    hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001ce2:	2000      	movs	r0, #0
    /*Init field not used in handle to zero */
    hspi->RxISR = 0;
    hspi->TxISR = 0;

    /* Reset CRC Calculation */
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001ce4:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
    }

     /* Configure communication */   
    hspi->ErrorCode   = HAL_SPI_ERROR_NONE;

    hspi->pRxBuffPtr  = pRxData;
 8001ce8:	63a2      	str	r2, [r4, #56]	; 0x38
    {
      hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
    }

     /* Configure communication */   
    hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001cea:	6560      	str	r0, [r4, #84]	; 0x54

    hspi->pRxBuffPtr  = pRxData;
    hspi->RxXferSize  = Size;
 8001cec:	87a3      	strh	r3, [r4, #60]	; 0x3c
    hspi->RxXferCount = Size;  
 8001cee:	87e3      	strh	r3, [r4, #62]	; 0x3e
    
    hspi->pTxBuffPtr  = pTxData;
 8001cf0:	6321      	str	r1, [r4, #48]	; 0x30
    hspi->TxXferSize  = Size; 
 8001cf2:	86a3      	strh	r3, [r4, #52]	; 0x34
    hspi->TxXferCount = Size;
 8001cf4:	86e3      	strh	r3, [r4, #54]	; 0x36

    /*Init field not used in handle to zero */
    hspi->RxISR = 0;
 8001cf6:	64a0      	str	r0, [r4, #72]	; 0x48
    hspi->TxISR = 0;
 8001cf8:	64e0      	str	r0, [r4, #76]	; 0x4c
 8001cfa:	6822      	ldr	r2, [r4, #0]

    /* Reset CRC Calculation */
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001cfc:	d107      	bne.n	8001d0e <HAL_SPI_TransmitReceive+0x7c>
    {
      SPI_RESET_CRC(hspi);
 8001cfe:	6810      	ldr	r0, [r2, #0]
 8001d00:	f420 5000 	bic.w	r0, r0, #8192	; 0x2000
 8001d04:	6010      	str	r0, [r2, #0]
 8001d06:	6810      	ldr	r0, [r2, #0]
 8001d08:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
 8001d0c:	6010      	str	r0, [r2, #0]
    }

    /* Check if the SPI is already enabled */ 
    if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8001d0e:	6810      	ldr	r0, [r2, #0]
 8001d10:	0640      	lsls	r0, r0, #25
    {
      /* Enable SPI peripheral */
      __HAL_SPI_ENABLE(hspi);
 8001d12:	bf5e      	ittt	pl
 8001d14:	6810      	ldrpl	r0, [r2, #0]
 8001d16:	f040 0040 	orrpl.w	r0, r0, #64	; 0x40
 8001d1a:	6010      	strpl	r0, [r2, #0]
    }

    /* Transmit and Receive data in 16 Bit mode */
    if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001d1c:	68e0      	ldr	r0, [r4, #12]
 8001d1e:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8001d22:	6860      	ldr	r0, [r4, #4]
 8001d24:	d15b      	bne.n	8001dde <HAL_SPI_TransmitReceive+0x14c>
    {
      if((hspi->Init.Mode == SPI_MODE_SLAVE) || ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->TxXferCount == 0x01)))
 8001d26:	b120      	cbz	r0, 8001d32 <HAL_SPI_TransmitReceive+0xa0>
 8001d28:	f5b0 7f82 	cmp.w	r0, #260	; 0x104
 8001d2c:	d107      	bne.n	8001d3e <HAL_SPI_TransmitReceive+0xac>
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d105      	bne.n	8001d3e <HAL_SPI_TransmitReceive+0xac>
      {
        hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 8001d32:	f831 0b02 	ldrh.w	r0, [r1], #2
        hspi->pTxBuffPtr+=2;
        hspi->TxXferCount--;
 8001d36:	3b01      	subs	r3, #1
    /* Transmit and Receive data in 16 Bit mode */
    if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
    {
      if((hspi->Init.Mode == SPI_MODE_SLAVE) || ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->TxXferCount == 0x01)))
      {
        hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 8001d38:	60d0      	str	r0, [r2, #12]
        hspi->pTxBuffPtr+=2;
 8001d3a:	6321      	str	r1, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8001d3c:	86e3      	strh	r3, [r4, #54]	; 0x36
      }
      if(hspi->TxXferCount == 0)
 8001d3e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d137      	bne.n	8001db4 <HAL_SPI_TransmitReceive+0x122>
      {
        /* Enable CRC Transmission */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001d44:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8001d48:	bf02      	ittt	eq
 8001d4a:	6813      	ldreq	r3, [r2, #0]
 8001d4c:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 8001d50:	6013      	streq	r3, [r2, #0]
        }

        /* Wait until RXNE flag is set */
        if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8001d52:	462b      	mov	r3, r5
 8001d54:	2200      	movs	r2, #0
 8001d56:	e034      	b.n	8001dc2 <HAL_SPI_TransmitReceive+0x130>
      else
      {
        while(hspi->TxXferCount > 0)
        {
          /* Wait until TXE flag is set to send data */
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8001d58:	462b      	mov	r3, r5
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	2102      	movs	r1, #2
 8001d5e:	4620      	mov	r0, r4
 8001d60:	f7ff ff4e 	bl	8001c00 <SPI_WaitOnFlagUntilTimeout>
 8001d64:	2800      	cmp	r0, #0
 8001d66:	f040 80bd 	bne.w	8001ee4 <HAL_SPI_TransmitReceive+0x252>
          { 
            return HAL_TIMEOUT;
          }

          hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 8001d6a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001d6c:	6822      	ldr	r2, [r4, #0]
 8001d6e:	f833 1b02 	ldrh.w	r1, [r3], #2
 8001d72:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr+=2;
 8001d74:	6323      	str	r3, [r4, #48]	; 0x30
          hspi->TxXferCount--;
 8001d76:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001d78:	3b01      	subs	r3, #1
 8001d7a:	b29b      	uxth	r3, r3
 8001d7c:	86e3      	strh	r3, [r4, #54]	; 0x36

          /* Enable CRC Transmission */
          if((hspi->TxXferCount == 0) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8001d7e:	b93b      	cbnz	r3, 8001d90 <HAL_SPI_TransmitReceive+0xfe>
 8001d80:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001d82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8001d86:	bf02      	ittt	eq
 8001d88:	6813      	ldreq	r3, [r2, #0]
 8001d8a:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 8001d8e:	6013      	streq	r3, [r2, #0]
          }

          /* Wait until RXNE flag is set */
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8001d90:	462b      	mov	r3, r5
 8001d92:	2200      	movs	r2, #0
 8001d94:	2101      	movs	r1, #1
 8001d96:	4620      	mov	r0, r4
 8001d98:	f7ff ff32 	bl	8001c00 <SPI_WaitOnFlagUntilTimeout>
 8001d9c:	2800      	cmp	r0, #0
 8001d9e:	f040 80a1 	bne.w	8001ee4 <HAL_SPI_TransmitReceive+0x252>
          { 
            return HAL_TIMEOUT;
          }

          *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001da2:	6823      	ldr	r3, [r4, #0]
 8001da4:	68da      	ldr	r2, [r3, #12]
 8001da6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001da8:	f823 2b02 	strh.w	r2, [r3], #2
          hspi->pRxBuffPtr+=2;
 8001dac:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->RxXferCount--;
 8001dae:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001db0:	3b01      	subs	r3, #1
 8001db2:	87e3      	strh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr+=2;
        hspi->RxXferCount--;
      }
      else
      {
        while(hspi->TxXferCount > 0)
 8001db4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d1ce      	bne.n	8001d58 <HAL_SPI_TransmitReceive+0xc6>
          *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
          hspi->pRxBuffPtr+=2;
          hspi->RxXferCount--;
        }
        /* Receive the last byte */
        if(hspi->Init.Mode == SPI_MODE_SLAVE)
 8001dba:	6862      	ldr	r2, [r4, #4]
 8001dbc:	2a00      	cmp	r2, #0
 8001dbe:	d170      	bne.n	8001ea2 <HAL_SPI_TransmitReceive+0x210>
        {
          /* Wait until RXNE flag is set */
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8001dc0:	462b      	mov	r3, r5
 8001dc2:	2101      	movs	r1, #1
 8001dc4:	4620      	mov	r0, r4
 8001dc6:	f7ff ff1b 	bl	8001c00 <SPI_WaitOnFlagUntilTimeout>
 8001dca:	2800      	cmp	r0, #0
 8001dcc:	f040 808a 	bne.w	8001ee4 <HAL_SPI_TransmitReceive+0x252>
          {
            return HAL_TIMEOUT;
          }
          
          *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001dd0:	6823      	ldr	r3, [r4, #0]
 8001dd2:	68da      	ldr	r2, [r3, #12]
 8001dd4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001dd6:	f823 2b02 	strh.w	r2, [r3], #2
          hspi->pRxBuffPtr+=2;
 8001dda:	63a3      	str	r3, [r4, #56]	; 0x38
 8001ddc:	e05e      	b.n	8001e9c <HAL_SPI_TransmitReceive+0x20a>
      }
    }
    /* Transmit and Receive data in 8 Bit mode */
    else
    {
      if((hspi->Init.Mode == SPI_MODE_SLAVE) || ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->TxXferCount == 0x01)))
 8001dde:	b120      	cbz	r0, 8001dea <HAL_SPI_TransmitReceive+0x158>
 8001de0:	f5b0 7f82 	cmp.w	r0, #260	; 0x104
 8001de4:	d107      	bne.n	8001df6 <HAL_SPI_TransmitReceive+0x164>
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d105      	bne.n	8001df6 <HAL_SPI_TransmitReceive+0x164>
      {
        hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 8001dea:	1c48      	adds	r0, r1, #1
 8001dec:	6320      	str	r0, [r4, #48]	; 0x30
 8001dee:	7809      	ldrb	r1, [r1, #0]
        hspi->TxXferCount--;
 8001df0:	3b01      	subs	r3, #1
    /* Transmit and Receive data in 8 Bit mode */
    else
    {
      if((hspi->Init.Mode == SPI_MODE_SLAVE) || ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->TxXferCount == 0x01)))
      {
        hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 8001df2:	60d1      	str	r1, [r2, #12]
        hspi->TxXferCount--;
 8001df4:	86e3      	strh	r3, [r4, #54]	; 0x36
      }
      if(hspi->TxXferCount == 0)
 8001df6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d13e      	bne.n	8001e7a <HAL_SPI_TransmitReceive+0x1e8>
      {
        /* Enable CRC Transmission */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001dfc:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8001e00:	bf08      	it	eq
 8001e02:	6813      	ldreq	r3, [r2, #0]
        }

        /* Wait until RXNE flag is set */
        if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8001e04:	f04f 0101 	mov.w	r1, #1
      if(hspi->TxXferCount == 0)
      {
        /* Enable CRC Transmission */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8001e08:	bf04      	itt	eq
 8001e0a:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 8001e0e:	6013      	streq	r3, [r2, #0]
        }

        /* Wait until RXNE flag is set */
        if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8001e10:	4620      	mov	r0, r4
 8001e12:	462b      	mov	r3, r5
 8001e14:	2200      	movs	r2, #0
 8001e16:	f7ff fef3 	bl	8001c00 <SPI_WaitOnFlagUntilTimeout>
 8001e1a:	2800      	cmp	r0, #0
 8001e1c:	d162      	bne.n	8001ee4 <HAL_SPI_TransmitReceive+0x252>
        {
          return HAL_TIMEOUT;
        }

        (*hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001e1e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001e20:	e039      	b.n	8001e96 <HAL_SPI_TransmitReceive+0x204>
      else
      {
        while(hspi->TxXferCount > 0)
        {
          /* Wait until TXE flag is set to send data */
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8001e22:	462b      	mov	r3, r5
 8001e24:	2200      	movs	r2, #0
 8001e26:	2102      	movs	r1, #2
 8001e28:	4620      	mov	r0, r4
 8001e2a:	f7ff fee9 	bl	8001c00 <SPI_WaitOnFlagUntilTimeout>
 8001e2e:	2800      	cmp	r0, #0
 8001e30:	d158      	bne.n	8001ee4 <HAL_SPI_TransmitReceive+0x252>
          {
            return HAL_TIMEOUT;
          }

          hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 8001e32:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001e34:	6822      	ldr	r2, [r4, #0]
 8001e36:	1c59      	adds	r1, r3, #1
 8001e38:	6321      	str	r1, [r4, #48]	; 0x30
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	60d3      	str	r3, [r2, #12]
          hspi->TxXferCount--;
 8001e3e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001e40:	3b01      	subs	r3, #1
 8001e42:	b29b      	uxth	r3, r3
 8001e44:	86e3      	strh	r3, [r4, #54]	; 0x36

          /* Enable CRC Transmission */
          if((hspi->TxXferCount == 0) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8001e46:	b93b      	cbnz	r3, 8001e58 <HAL_SPI_TransmitReceive+0x1c6>
 8001e48:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001e4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8001e4e:	bf02      	ittt	eq
 8001e50:	6813      	ldreq	r3, [r2, #0]
 8001e52:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 8001e56:	6013      	streq	r3, [r2, #0]
          }

          /* Wait until RXNE flag is set */
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8001e58:	462b      	mov	r3, r5
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	2101      	movs	r1, #1
 8001e5e:	4620      	mov	r0, r4
 8001e60:	f7ff fece 	bl	8001c00 <SPI_WaitOnFlagUntilTimeout>
 8001e64:	2800      	cmp	r0, #0
 8001e66:	d13d      	bne.n	8001ee4 <HAL_SPI_TransmitReceive+0x252>
          {
            return HAL_TIMEOUT;
          }

          (*hspi->pRxBuffPtr++) = hspi->Instance->DR;
 8001e68:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001e6a:	1c5a      	adds	r2, r3, #1
 8001e6c:	63a2      	str	r2, [r4, #56]	; 0x38
 8001e6e:	6822      	ldr	r2, [r4, #0]
 8001e70:	68d2      	ldr	r2, [r2, #12]
 8001e72:	701a      	strb	r2, [r3, #0]
          hspi->RxXferCount--;
 8001e74:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001e76:	3b01      	subs	r3, #1
 8001e78:	87e3      	strh	r3, [r4, #62]	; 0x3e
        (*hspi->pRxBuffPtr) = hspi->Instance->DR;
        hspi->RxXferCount--;
      }
      else
      {
        while(hspi->TxXferCount > 0)
 8001e7a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d1d0      	bne.n	8001e22 <HAL_SPI_TransmitReceive+0x190>
          }

          (*hspi->pRxBuffPtr++) = hspi->Instance->DR;
          hspi->RxXferCount--;
        }
        if(hspi->Init.Mode == SPI_MODE_SLAVE)
 8001e80:	6862      	ldr	r2, [r4, #4]
 8001e82:	b972      	cbnz	r2, 8001ea2 <HAL_SPI_TransmitReceive+0x210>
        {
          /* Wait until RXNE flag is set */
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8001e84:	462b      	mov	r3, r5
 8001e86:	2101      	movs	r1, #1
 8001e88:	4620      	mov	r0, r4
 8001e8a:	f7ff feb9 	bl	8001c00 <SPI_WaitOnFlagUntilTimeout>
 8001e8e:	bb48      	cbnz	r0, 8001ee4 <HAL_SPI_TransmitReceive+0x252>
          {
            return HAL_TIMEOUT;
          }
          
          (*hspi->pRxBuffPtr++) = hspi->Instance->DR;
 8001e90:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001e92:	1c5a      	adds	r2, r3, #1
 8001e94:	63a2      	str	r2, [r4, #56]	; 0x38
 8001e96:	6822      	ldr	r2, [r4, #0]
 8001e98:	68d2      	ldr	r2, [r2, #12]
 8001e9a:	701a      	strb	r2, [r3, #0]
          hspi->RxXferCount--;
 8001e9c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001e9e:	3b01      	subs	r3, #1
 8001ea0:	87e3      	strh	r3, [r4, #62]	; 0x3e
        }
      }
    }

    /* Read CRC from DR to close CRC calculation process */
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001ea2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001ea4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ea8:	d111      	bne.n	8001ece <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Wait until RXNE flag is set */
      if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8001eaa:	462b      	mov	r3, r5
 8001eac:	2200      	movs	r2, #0
 8001eae:	2101      	movs	r1, #1
 8001eb0:	4620      	mov	r0, r4
 8001eb2:	f7ff fea5 	bl	8001c00 <SPI_WaitOnFlagUntilTimeout>
 8001eb6:	b118      	cbz	r0, 8001ec0 <HAL_SPI_TransmitReceive+0x22e>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8001eb8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001eba:	f043 0302 	orr.w	r3, r3, #2
 8001ebe:	e010      	b.n	8001ee2 <HAL_SPI_TransmitReceive+0x250>
        return HAL_TIMEOUT;
      }
      /* Read CRC */
      tmpreg = hspi->Instance->DR;
 8001ec0:	6823      	ldr	r3, [r4, #0]
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	b29b      	uxth	r3, r3
 8001ec6:	f8ad 3006 	strh.w	r3, [sp, #6]
      UNUSED(tmpreg);
 8001eca:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    }

    /* Wait until Busy flag is reset before disabling SPI */
    if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_BSY, SET, Timeout) != HAL_OK)
 8001ece:	462b      	mov	r3, r5
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	2180      	movs	r1, #128	; 0x80
 8001ed4:	4620      	mov	r0, r4
 8001ed6:	f7ff fe93 	bl	8001c00 <SPI_WaitOnFlagUntilTimeout>
 8001eda:	b128      	cbz	r0, 8001ee8 <HAL_SPI_TransmitReceive+0x256>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001edc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001ede:	f043 0310 	orr.w	r3, r3, #16
 8001ee2:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8001ee4:	2003      	movs	r0, #3
 8001ee6:	e021      	b.n	8001f2c <HAL_SPI_TransmitReceive+0x29a>
    }
    
    hspi->State = HAL_SPI_STATE_READY;

    /* Check if CRC error occurred */
    if((hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET))
 8001ee8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
      return HAL_TIMEOUT;
    }
    
    hspi->State = HAL_SPI_STATE_READY;
 8001eea:	2101      	movs	r1, #1

    /* Check if CRC error occurred */
    if((hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET))
 8001eec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
      return HAL_TIMEOUT;
    }
    
    hspi->State = HAL_SPI_STATE_READY;
 8001ef0:	f884 1051 	strb.w	r1, [r4, #81]	; 0x51

    /* Check if CRC error occurred */
    if((hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET))
 8001ef4:	d113      	bne.n	8001f1e <HAL_SPI_TransmitReceive+0x28c>
 8001ef6:	6823      	ldr	r3, [r4, #0]
 8001ef8:	689a      	ldr	r2, [r3, #8]
 8001efa:	06d2      	lsls	r2, r2, #27
 8001efc:	d50f      	bpl.n	8001f1e <HAL_SPI_TransmitReceive+0x28c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8001efe:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001f00:	f042 0202 	orr.w	r2, r2, #2
 8001f04:	6562      	str	r2, [r4, #84]	; 0x54

      SPI_RESET_CRC(hspi);
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f0c:	601a      	str	r2, [r3, #0]
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f14:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hspi);
 8001f16:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
      
      return HAL_ERROR; 
 8001f1a:	4608      	mov	r0, r1
 8001f1c:	e006      	b.n	8001f2c <HAL_SPI_TransmitReceive+0x29a>
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8001f1e:	2300      	movs	r3, #0
 8001f20:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50

    return HAL_OK;
 8001f24:	e002      	b.n	8001f2c <HAL_SPI_TransmitReceive+0x29a>

  if((hspi->State == HAL_SPI_STATE_READY) || (hspi->State == HAL_SPI_STATE_BUSY_RX))
  {
    if((pTxData == NULL ) || (pRxData == NULL ) || (Size == 0))
    {
      return  HAL_ERROR;
 8001f26:	2001      	movs	r0, #1
 8001f28:	e000      	b.n	8001f2c <HAL_SPI_TransmitReceive+0x29a>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8001f2a:	2002      	movs	r0, #2
  }
}
 8001f2c:	b002      	add	sp, #8
 8001f2e:	bd70      	pop	{r4, r5, r6, pc}

08001f30 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *                the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001f30:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8001f32:	4604      	mov	r4, r0
 8001f34:	2800      	cmp	r0, #0
 8001f36:	d034      	beq.n	8001fa2 <HAL_SPI_Init+0x72>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  assert_param(IS_SPI_CRC_CALCULATION(hspi->Init.CRCCalculation));
  assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));

  if(hspi->State == HAL_SPI_STATE_RESET)
 8001f38:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8001f3c:	b90b      	cbnz	r3, 8001f42 <HAL_SPI_Init+0x12>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001f3e:	f001 fb3f 	bl	80035c0 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001f42:	68a1      	ldr	r1, [r4, #8]
 8001f44:	6860      	ldr	r0, [r4, #4]
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
  }
  
  hspi->State = HAL_SPI_STATE_BUSY;
 8001f46:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001f48:	4308      	orrs	r0, r1
 8001f4a:	68e1      	ldr	r1, [r4, #12]
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
  }
  
  hspi->State = HAL_SPI_STATE_BUSY;
 8001f4c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001f50:	4308      	orrs	r0, r1
 8001f52:	6921      	ldr	r1, [r4, #16]
  }
  
  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disble the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001f54:	6823      	ldr	r3, [r4, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001f56:	4308      	orrs	r0, r1
 8001f58:	6961      	ldr	r1, [r4, #20]
  }
  
  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disble the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001f5a:	681a      	ldr	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001f5c:	4308      	orrs	r0, r1
 8001f5e:	69e1      	ldr	r1, [r4, #28]
  }
  
  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disble the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001f60:	f022 0240 	bic.w	r2, r2, #64	; 0x40

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001f64:	4308      	orrs	r0, r1
 8001f66:	6a21      	ldr	r1, [r4, #32]
  }
  
  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disble the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001f68:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001f6a:	4308      	orrs	r0, r1
 8001f6c:	69a2      	ldr	r2, [r4, #24]
 8001f6e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001f70:	4308      	orrs	r0, r1
 8001f72:	f402 7100 	and.w	r1, r2, #512	; 0x200
 8001f76:	4301      	orrs	r1, r0
 8001f78:	6019      	str	r1, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001f7a:	0c12      	lsrs	r2, r2, #16
 8001f7c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001f7e:	f002 0204 	and.w	r2, r2, #4
 8001f82:	430a      	orrs	r2, r1
 8001f84:	605a      	str	r2, [r3, #4]

  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8001f86:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
     Revision ID information is only available in Debug mode, so Workaround could not be implemented
     to distinguish Rev Z devices (issue present) from more recent version (issue fixed).
     So, in case of Revison Z F101 or F103 devices, below variable should be assigned to 1 */
  uCRCErrorWorkaroundCheck = 0;
#else
  uCRCErrorWorkaroundCheck = 0;
 8001f88:	2000      	movs	r0, #0
  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode));

  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8001f8a:	611a      	str	r2, [r3, #16]

#if defined (STM32F101x6) || defined (STM32F101xB) || defined (STM32F101xE) || defined (STM32F101xG) || defined (STM32F102x6) || defined (STM32F102xB) || defined (STM32F103x6) || defined (STM32F103xB) || defined (STM32F103xE) || defined (STM32F103xG) || defined (STM32F105xC) || defined (STM32F107xC)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001f8c:	69da      	ldr	r2, [r3, #28]
 8001f8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f92:	61da      	str	r2, [r3, #28]
     Revision ID information is only available in Debug mode, so Workaround could not be implemented
     to distinguish Rev Z devices (issue present) from more recent version (issue fixed).
     So, in case of Revison Z F101 or F103 devices, below variable should be assigned to 1 */
  uCRCErrorWorkaroundCheck = 0;
#else
  uCRCErrorWorkaroundCheck = 0;
 8001f94:	4b04      	ldr	r3, [pc, #16]	; (8001fa8 <HAL_SPI_Init+0x78>)
#endif

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001f96:	6560      	str	r0, [r4, #84]	; 0x54
     Revision ID information is only available in Debug mode, so Workaround could not be implemented
     to distinguish Rev Z devices (issue present) from more recent version (issue fixed).
     So, in case of Revison Z F101 or F103 devices, below variable should be assigned to 1 */
  uCRCErrorWorkaroundCheck = 0;
#else
  uCRCErrorWorkaroundCheck = 0;
 8001f98:	7018      	strb	r0, [r3, #0]
#endif

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
  hspi->State = HAL_SPI_STATE_READY;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  
  return HAL_OK;
 8001fa0:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  /* Check the SPI handle allocation */
  if(hspi == NULL)
  {
    return HAL_ERROR;
 8001fa2:	2001      	movs	r0, #1

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
  hspi->State = HAL_SPI_STATE_READY;
  
  return HAL_OK;
}
 8001fa4:	bd10      	pop	{r4, pc}
 8001fa6:	bf00      	nop
 8001fa8:	200001dc 	.word	0x200001dc

08001fac <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8001fac:	b084      	sub	sp, #16
 8001fae:	a801      	add	r0, sp, #4
 8001fb0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8001fb4:	b004      	add	sp, #16
 8001fb6:	2000      	movs	r0, #0
 8001fb8:	4770      	bx	lr

08001fba <USB_EnableGlobalInt>:
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
    | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8001fba:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8001fbe:	b29b      	uxth	r3, r3
 8001fc0:	f443 433d 	orr.w	r3, r3, #48384	; 0xbd00
 8001fc4:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  
  return HAL_OK;
}
 8001fc8:	2000      	movs	r0, #0
 8001fca:	4770      	bx	lr

08001fcc <USB_DisableGlobalInt>:
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
    | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8001fcc:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8001fd0:	f423 5374 	bic.w	r3, r3, #15616	; 0x3d00
 8001fd4:	045b      	lsls	r3, r3, #17
 8001fd6:	0c5b      	lsrs	r3, r3, #17
 8001fd8:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  
  return HAL_OK;
}
 8001fdc:	2000      	movs	r0, #0
 8001fde:	4770      	bx	lr

08001fe0 <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8001fe0:	2000      	movs	r0, #0
 8001fe2:	4770      	bx	lr

08001fe4 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{    
 8001fe4:	b084      	sub	sp, #16
 8001fe6:	b510      	push	{r4, lr}
 8001fe8:	ac03      	add	r4, sp, #12
 8001fea:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  
  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
    
  return HAL_OK;
}
 8001fee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  */
HAL_StatusTypeDef USB_DevInit (USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{    
  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  
  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  
  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
    
  return HAL_OK;
}
 8001ffe:	b004      	add	sp, #16
  
  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 
  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8002000:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  
  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002004:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
    
  return HAL_OK;
}
 8002008:	4618      	mov	r0, r3
 800200a:	4770      	bx	lr

0800200c <USB_ActivateEndpoint>:
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  /* initialize Endpoint */
  switch (ep->type)
 800200c:	78cb      	ldrb	r3, [r1, #3]
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800200e:	b530      	push	{r4, r5, lr}
 8002010:	780a      	ldrb	r2, [r1, #0]
  /* initialize Endpoint */
  switch (ep->type)
 8002012:	2b03      	cmp	r3, #3
 8002014:	d82b      	bhi.n	800206e <USB_ActivateEndpoint+0x62>
 8002016:	e8df f003 	tbb	[pc, r3]
 800201a:	1f02      	.short	0x1f02
 800201c:	150c      	.short	0x150c
  {
  case EP_TYPE_CTRL:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_CONTROL);
 800201e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002022:	b29b      	uxth	r3, r3
 8002024:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8002028:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800202c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002030:	e01b      	b.n	800206a <USB_ActivateEndpoint+0x5e>
    break;
  case EP_TYPE_BULK:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_BULK);
 8002032:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002036:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800203a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800203e:	041b      	lsls	r3, r3, #16
 8002040:	0c1b      	lsrs	r3, r3, #16
 8002042:	e012      	b.n	800206a <USB_ActivateEndpoint+0x5e>
    break;
  case EP_TYPE_INTR:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_INTERRUPT);
 8002044:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002048:	b29b      	uxth	r3, r3
 800204a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800204e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002052:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8002056:	e008      	b.n	800206a <USB_ActivateEndpoint+0x5e>
    break;
  case EP_TYPE_ISOC:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_ISOCHRONOUS);
 8002058:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800205c:	b29b      	uxth	r3, r3
 800205e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8002062:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002066:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800206a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    break;
  default:
      break;
  } 
  
  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800206e:	780c      	ldrb	r4, [r1, #0]
 8002070:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8002074:	f444 4200 	orr.w	r2, r4, #32768	; 0x8000
 8002078:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800207c:	051b      	lsls	r3, r3, #20
 800207e:	0d1b      	lsrs	r3, r3, #20
 8002080:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002084:	4313      	orrs	r3, r2
 8002086:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
  
  if (ep->doublebuffer == 0) 
 800208a:	7a8b      	ldrb	r3, [r1, #10]
 800208c:	780d      	ldrb	r5, [r1, #0]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d174      	bne.n	800217c <USB_ActivateEndpoint+0x170>
  {
    if (ep->is_in)
 8002092:	784a      	ldrb	r2, [r1, #1]
 8002094:	888b      	ldrh	r3, [r1, #4]
 8002096:	b33a      	cbz	r2, 80020e8 <USB_ActivateEndpoint+0xdc>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002098:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800209c:	085b      	lsrs	r3, r3, #1
 800209e:	b292      	uxth	r2, r2
 80020a0:	eb02 04c5 	add.w	r4, r2, r5, lsl #3
 80020a4:	005b      	lsls	r3, r3, #1
 80020a6:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 80020aa:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80020ae:	780a      	ldrb	r2, [r1, #0]
 80020b0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80020b4:	065b      	lsls	r3, r3, #25
 80020b6:	d50b      	bpl.n	80020d0 <USB_ActivateEndpoint+0xc4>
 80020b8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80020bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80020c0:	051b      	lsls	r3, r3, #20
 80020c2:	0d1b      	lsrs	r3, r3, #20
 80020c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020c8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80020cc:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      /* Configure NAK status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK); 
 80020d0:	780a      	ldrb	r2, [r1, #0]
 80020d2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80020d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80020da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80020de:	041b      	lsls	r3, r3, #16
 80020e0:	0c1b      	lsrs	r3, r3, #16
 80020e2:	f083 0320 	eor.w	r3, r3, #32
 80020e6:	e0fb      	b.n	80022e0 <USB_ActivateEndpoint+0x2d4>
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80020e8:	f8b0 4050 	ldrh.w	r4, [r0, #80]	; 0x50
 80020ec:	085b      	lsrs	r3, r3, #1
 80020ee:	b2a4      	uxth	r4, r4
 80020f0:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80020f4:	3404      	adds	r4, #4
 80020f6:	005b      	lsls	r3, r3, #1
 80020f8:	f500 6280 	add.w	r2, r0, #1024	; 0x400
 80020fc:	f842 3014 	str.w	r3, [r2, r4, lsl #1]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002100:	f8b0 4050 	ldrh.w	r4, [r0, #80]	; 0x50
 8002104:	780b      	ldrb	r3, [r1, #0]
 8002106:	690d      	ldr	r5, [r1, #16]
 8002108:	b2a4      	uxth	r4, r4
 800210a:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 800210e:	2d3e      	cmp	r5, #62	; 0x3e
 8002110:	f104 0406 	add.w	r4, r4, #6
 8002114:	d90b      	bls.n	800212e <USB_ActivateEndpoint+0x122>
 8002116:	f3c5 134f 	ubfx	r3, r5, #5, #16
 800211a:	06ed      	lsls	r5, r5, #27
 800211c:	bf04      	itt	eq
 800211e:	f103 33ff 	addeq.w	r3, r3, #4294967295
 8002122:	b29b      	uxtheq	r3, r3
 8002124:	ea6f 63c3 	mvn.w	r3, r3, lsl #27
 8002128:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800212c:	e006      	b.n	800213c <USB_ActivateEndpoint+0x130>
 800212e:	f3c5 034f 	ubfx	r3, r5, #1, #16
 8002132:	07ed      	lsls	r5, r5, #31
 8002134:	bf44      	itt	mi
 8002136:	3301      	addmi	r3, #1
 8002138:	b29b      	uxthmi	r3, r3
 800213a:	029b      	lsls	r3, r3, #10
 800213c:	b29b      	uxth	r3, r3
 800213e:	f842 3014 	str.w	r3, [r2, r4, lsl #1]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002142:	780a      	ldrb	r2, [r1, #0]
 8002144:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002148:	045c      	lsls	r4, r3, #17
 800214a:	d50b      	bpl.n	8002164 <USB_ActivateEndpoint+0x158>
 800214c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002150:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002154:	051b      	lsls	r3, r3, #20
 8002156:	0d1b      	lsrs	r3, r3, #20
 8002158:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800215c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002160:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002164:	780a      	ldrb	r2, [r1, #0]
 8002166:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800216a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800216e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002172:	041b      	lsls	r3, r3, #16
 8002174:	0c1b      	lsrs	r3, r3, #16
 8002176:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800217a:	e0b1      	b.n	80022e0 <USB_ActivateEndpoint+0x2d4>
  }
  /*Double Buffer*/
  else
  {
    /*Set the endpoint as double buffered*/
    PCD_SET_EP_DBUF(USBx, ep->num);
 800217c:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
 8002180:	f500 6480 	add.w	r4, r0, #1024	; 0x400
 8002184:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8002188:	051b      	lsls	r3, r3, #20
 800218a:	0d1b      	lsrs	r3, r3, #20
 800218c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8002190:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002194:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
    /*Set buffer address for double buffered mode*/
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num,ep->pmaaddr0, ep->pmaaddr1);
 8002198:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800219c:	780a      	ldrb	r2, [r1, #0]
 800219e:	b29b      	uxth	r3, r3
 80021a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80021a4:	88ca      	ldrh	r2, [r1, #6]
 80021a6:	0852      	lsrs	r2, r2, #1
 80021a8:	0052      	lsls	r2, r2, #1
 80021aa:	f844 2013 	str.w	r2, [r4, r3, lsl #1]
 80021ae:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80021b2:	780a      	ldrb	r2, [r1, #0]
 80021b4:	b29b      	uxth	r3, r3
 80021b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80021ba:	890a      	ldrh	r2, [r1, #8]
 80021bc:	3304      	adds	r3, #4
 80021be:	0852      	lsrs	r2, r2, #1
 80021c0:	0052      	lsls	r2, r2, #1
 80021c2:	f844 2013 	str.w	r2, [r4, r3, lsl #1]
    
    if (ep->is_in==0)
 80021c6:	784b      	ldrb	r3, [r1, #1]
 80021c8:	780a      	ldrb	r2, [r1, #0]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d146      	bne.n	800225c <USB_ActivateEndpoint+0x250>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80021ce:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80021d2:	045b      	lsls	r3, r3, #17
 80021d4:	d50b      	bpl.n	80021ee <USB_ActivateEndpoint+0x1e2>
 80021d6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80021da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80021de:	051b      	lsls	r3, r3, #20
 80021e0:	0d1b      	lsrs	r3, r3, #20
 80021e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80021e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021ea:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80021ee:	780a      	ldrb	r2, [r1, #0]
 80021f0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80021f4:	065d      	lsls	r5, r3, #25
 80021f6:	d50b      	bpl.n	8002210 <USB_ActivateEndpoint+0x204>
 80021f8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80021fc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002200:	051b      	lsls	r3, r3, #20
 8002202:	0d1b      	lsrs	r3, r3, #20
 8002204:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002208:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800220c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      
      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8002210:	780a      	ldrb	r2, [r1, #0]
 8002212:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002216:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800221a:	051b      	lsls	r3, r3, #20
 800221c:	0d1b      	lsrs	r3, r3, #20
 800221e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002222:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002226:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800222a:	780a      	ldrb	r2, [r1, #0]
 800222c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002230:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002234:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002238:	041b      	lsls	r3, r3, #16
 800223a:	0c1b      	lsrs	r3, r3, #16
 800223c:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002240:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002244:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002248:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800224c:	780a      	ldrb	r2, [r1, #0]
 800224e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002252:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002256:	051b      	lsls	r3, r3, #20
 8002258:	0d1b      	lsrs	r3, r3, #20
 800225a:	e041      	b.n	80022e0 <USB_ActivateEndpoint+0x2d4>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800225c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002260:	045c      	lsls	r4, r3, #17
 8002262:	d50b      	bpl.n	800227c <USB_ActivateEndpoint+0x270>
 8002264:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002268:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800226c:	051b      	lsls	r3, r3, #20
 800226e:	0d1b      	lsrs	r3, r3, #20
 8002270:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002274:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002278:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800227c:	780a      	ldrb	r2, [r1, #0]
 800227e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002282:	065b      	lsls	r3, r3, #25
 8002284:	d50b      	bpl.n	800229e <USB_ActivateEndpoint+0x292>
 8002286:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800228a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800228e:	051b      	lsls	r3, r3, #20
 8002290:	0d1b      	lsrs	r3, r3, #20
 8002292:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002296:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800229a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 800229e:	780a      	ldrb	r2, [r1, #0]
 80022a0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80022a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80022a8:	051b      	lsls	r3, r3, #20
 80022aa:	0d1b      	lsrs	r3, r3, #20
 80022ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80022b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022b4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80022b8:	780a      	ldrb	r2, [r1, #0]
 80022ba:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80022be:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80022c2:	051b      	lsls	r3, r3, #20
 80022c4:	0d1b      	lsrs	r3, r3, #20
 80022c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022ce:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80022d2:	780a      	ldrb	r2, [r1, #0]
 80022d4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80022d8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80022dc:	049b      	lsls	r3, r3, #18
 80022de:	0c9b      	lsrs	r3, r3, #18
 80022e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022e8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }
  
  return HAL_OK;
}
 80022ec:	2000      	movs	r0, #0
 80022ee:	bd30      	pop	{r4, r5, pc}

080022f0 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80022f0:	b510      	push	{r4, lr}
  if (ep->doublebuffer == 0) 
 80022f2:	7a8c      	ldrb	r4, [r1, #10]
 80022f4:	784a      	ldrb	r2, [r1, #1]
 80022f6:	780b      	ldrb	r3, [r1, #0]
 80022f8:	bb1c      	cbnz	r4, 8002342 <USB_DeactivateEndpoint+0x52>
  {
    if (ep->is_in)
 80022fa:	b182      	cbz	r2, 800231e <USB_DeactivateEndpoint+0x2e>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80022fc:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002300:	0652      	lsls	r2, r2, #25
 8002302:	d55b      	bpl.n	80023bc <USB_DeactivateEndpoint+0xcc>
 8002304:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002308:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800230c:	0512      	lsls	r2, r2, #20
 800230e:	0d12      	lsrs	r2, r2, #20
 8002310:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002314:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8002318:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
 800231c:	e04e      	b.n	80023bc <USB_DeactivateEndpoint+0xcc>
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS); 
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800231e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002322:	0454      	lsls	r4, r2, #17
 8002324:	f140 808d 	bpl.w	8002442 <USB_DeactivateEndpoint+0x152>
 8002328:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800232c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002330:	0512      	lsls	r2, r2, #20
 8002332:	0d12      	lsrs	r2, r2, #20
 8002334:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002338:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800233c:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
 8002340:	e07f      	b.n	8002442 <USB_DeactivateEndpoint+0x152>
    }
  }
  /*Double Buffer*/
  else
  { 
    if (ep->is_in==0)
 8002342:	2a00      	cmp	r2, #0
 8002344:	d142      	bne.n	80023cc <USB_DeactivateEndpoint+0xdc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002346:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800234a:	0452      	lsls	r2, r2, #17
 800234c:	d50b      	bpl.n	8002366 <USB_DeactivateEndpoint+0x76>
 800234e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002352:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002356:	0512      	lsls	r2, r2, #20
 8002358:	0d12      	lsrs	r2, r2, #20
 800235a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800235e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002362:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002366:	780a      	ldrb	r2, [r1, #0]
 8002368:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800236c:	065c      	lsls	r4, r3, #25
 800236e:	d50b      	bpl.n	8002388 <USB_DeactivateEndpoint+0x98>
 8002370:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002374:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002378:	051b      	lsls	r3, r3, #20
 800237a:	0d1b      	lsrs	r3, r3, #20
 800237c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002380:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002384:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      
      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8002388:	780a      	ldrb	r2, [r1, #0]
 800238a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800238e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002392:	051b      	lsls	r3, r3, #20
 8002394:	0d1b      	lsrs	r3, r3, #20
 8002396:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800239a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800239e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80023a2:	780a      	ldrb	r2, [r1, #0]
 80023a4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80023a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80023ac:	049b      	lsls	r3, r3, #18
 80023ae:	0c9b      	lsrs	r3, r3, #18
 80023b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023b8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80023bc:	780a      	ldrb	r2, [r1, #0]
 80023be:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80023c2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80023c6:	051b      	lsls	r3, r3, #20
 80023c8:	0d1b      	lsrs	r3, r3, #20
 80023ca:	e041      	b.n	8002450 <USB_DeactivateEndpoint+0x160>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80023cc:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80023d0:	0452      	lsls	r2, r2, #17
 80023d2:	d50b      	bpl.n	80023ec <USB_DeactivateEndpoint+0xfc>
 80023d4:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80023d8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80023dc:	0512      	lsls	r2, r2, #20
 80023de:	0d12      	lsrs	r2, r2, #20
 80023e0:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80023e4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80023e8:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80023ec:	780a      	ldrb	r2, [r1, #0]
 80023ee:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80023f2:	065b      	lsls	r3, r3, #25
 80023f4:	d50b      	bpl.n	800240e <USB_DeactivateEndpoint+0x11e>
 80023f6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80023fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80023fe:	051b      	lsls	r3, r3, #20
 8002400:	0d1b      	lsrs	r3, r3, #20
 8002402:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002406:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800240a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 800240e:	780a      	ldrb	r2, [r1, #0]
 8002410:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002414:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002418:	051b      	lsls	r3, r3, #20
 800241a:	0d1b      	lsrs	r3, r3, #20
 800241c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002420:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002424:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002428:	780a      	ldrb	r2, [r1, #0]
 800242a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800242e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002432:	051b      	lsls	r3, r3, #20
 8002434:	0d1b      	lsrs	r3, r3, #20
 8002436:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800243a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800243e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002442:	780a      	ldrb	r2, [r1, #0]
 8002444:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002448:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800244c:	049b      	lsls	r3, r3, #18
 800244e:	0c9b      	lsrs	r3, r3, #18
 8002450:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002454:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002458:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }
  
  return HAL_OK;
}
 800245c:	2000      	movs	r0, #0
 800245e:	bd10      	pop	{r4, pc}

08002460 <USB_EPSetStall>:
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx , USB_EPTypeDef *ep)
{
  if (ep->num == 0)
 8002460:	780a      	ldrb	r2, [r1, #0]
 8002462:	b97a      	cbnz	r2, 8002484 <USB_EPSetStall+0x24>
  {
    /* This macro sets STALL status for RX & TX*/ 
    PCD_SET_EP_TXRX_STATUS(USBx, ep->num, USB_EP_RX_STALL, USB_EP_TX_STALL); 
 8002464:	8803      	ldrh	r3, [r0, #0]
 8002466:	b29b      	uxth	r3, r3
 8002468:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800246c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002470:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002474:	f083 0310 	eor.w	r3, r3, #16
 8002478:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800247c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002480:	8003      	strh	r3, [r0, #0]
 8002482:	e01c      	b.n	80024be <USB_EPSetStall+0x5e>
  }
  else
  {
    if (ep->is_in)
 8002484:	784b      	ldrb	r3, [r1, #1]
 8002486:	b153      	cbz	r3, 800249e <USB_EPSetStall+0x3e>
    {
      PCD_SET_EP_TX_STATUS(USBx, ep->num , USB_EP_TX_STALL); 
 8002488:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800248c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002490:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002494:	041b      	lsls	r3, r3, #16
 8002496:	0c1b      	lsrs	r3, r3, #16
 8002498:	f083 0310 	eor.w	r3, r3, #16
 800249c:	e009      	b.n	80024b2 <USB_EPSetStall+0x52>
    }
    else
    {
      PCD_SET_EP_RX_STATUS(USBx, ep->num , USB_EP_RX_STALL);
 800249e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80024a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80024a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024aa:	041b      	lsls	r3, r3, #16
 80024ac:	0c1b      	lsrs	r3, r3, #16
 80024ae:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80024b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024ba:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }
  return HAL_OK;
}
 80024be:	2000      	movs	r0, #0
 80024c0:	4770      	bx	lr

080024c2 <USB_EPClearStall>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in)
 80024c2:	784b      	ldrb	r3, [r1, #1]
 80024c4:	780a      	ldrb	r2, [r1, #0]
 80024c6:	b1db      	cbz	r3, 8002500 <USB_EPClearStall+0x3e>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80024c8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80024cc:	065b      	lsls	r3, r3, #25
 80024ce:	d50b      	bpl.n	80024e8 <USB_EPClearStall+0x26>
 80024d0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80024d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80024d8:	051b      	lsls	r3, r3, #20
 80024da:	0d1b      	lsrs	r3, r3, #20
 80024dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024e0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80024e4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80024e8:	780a      	ldrb	r2, [r1, #0]
 80024ea:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80024ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80024f6:	041b      	lsls	r3, r3, #16
 80024f8:	0c1b      	lsrs	r3, r3, #16
 80024fa:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 80024fe:	e01a      	b.n	8002536 <USB_EPClearStall+0x74>
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002500:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002504:	045b      	lsls	r3, r3, #17
 8002506:	d50b      	bpl.n	8002520 <USB_EPClearStall+0x5e>
 8002508:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800250c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002510:	051b      	lsls	r3, r3, #20
 8002512:	0d1b      	lsrs	r3, r3, #20
 8002514:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002518:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800251c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002520:	780a      	ldrb	r2, [r1, #0]
 8002522:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002526:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800252a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800252e:	041b      	lsls	r3, r3, #16
 8002530:	0c1b      	lsrs	r3, r3, #16
 8002532:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002536:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800253a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800253e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }
  return HAL_OK;
}
 8002542:	2000      	movs	r0, #0
 8002544:	4770      	bx	lr

08002546 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_TypeDef *USBx, uint8_t address)
{
  if(address == 0) 
 8002546:	b911      	cbnz	r1, 800254e <USB_SetDevAddress+0x8>
  {
   /* set device address and enable function */
   USBx->DADDR = USB_DADDR_EF;
 8002548:	2380      	movs	r3, #128	; 0x80
 800254a:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }
  
  return HAL_OK;
}
 800254e:	2000      	movs	r0, #0
 8002550:	4770      	bx	lr

08002552 <USB_DevConnect>:
 8002552:	2000      	movs	r0, #0
 8002554:	4770      	bx	lr

08002556 <USB_DevDisconnect>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8002556:	2000      	movs	r0, #0
 8002558:	4770      	bx	lr

0800255a <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts (USB_TypeDef *USBx)
{
  uint32_t tmpreg = 0;
  
  tmpreg = USBx->ISTR;
 800255a:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 800255e:	b280      	uxth	r0, r0
 8002560:	4770      	bx	lr

08002562 <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8002562:	2000      	movs	r0, #0
 8002564:	4770      	bx	lr

08002566 <USB_WritePMA>:
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
 8002566:	3301      	adds	r3, #1
  uint32_t index = 0, temp1 = 0, temp2 = 0;
  uint16_t *pdwVal = NULL;
  
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8002568:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  * @param  wPMABufAddr : address into PMA.
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800256c:	b510      	push	{r4, lr}
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
 800256e:	105b      	asrs	r3, r3, #1
  uint32_t index = 0, temp1 = 0, temp2 = 0;
  uint16_t *pdwVal = NULL;
  
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8002570:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  for (index = nbytes; index != 0; index--)
 8002574:	2400      	movs	r4, #0
 8002576:	42a3      	cmp	r3, r4
 8002578:	d005      	beq.n	8002586 <USB_WritePMA+0x20>
 800257a:	f831 0b02 	ldrh.w	r0, [r1], #2
  {
    temp1 = (uint16_t) * pbUsrBuf;
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
    *pdwVal++ = temp2;
 800257e:	f822 0024 	strh.w	r0, [r2, r4, lsl #2]
 8002582:	3401      	adds	r4, #1
 8002584:	e7f7      	b.n	8002576 <USB_WritePMA+0x10>
    pdwVal++;
    pbUsrBuf++;
  }
}
 8002586:	bd10      	pop	{r4, pc}

08002588 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx , USB_EPTypeDef *ep)
{
 8002588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800258a:	4604      	mov	r4, r0
  uint16_t pmabuffer = 0;
  uint32_t len = ep->xfer_len;
  
  /* IN endpoint */
  if (ep->is_in == 1)
 800258c:	7848      	ldrb	r0, [r1, #1]
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx , USB_EPTypeDef *ep)
{
 800258e:	460e      	mov	r6, r1
  uint16_t pmabuffer = 0;
  uint32_t len = ep->xfer_len;
  
  /* IN endpoint */
  if (ep->is_in == 1)
 8002590:	2801      	cmp	r0, #1
 8002592:	698b      	ldr	r3, [r1, #24]
 8002594:	690a      	ldr	r2, [r1, #16]
 8002596:	7a8f      	ldrb	r7, [r1, #10]
 8002598:	d157      	bne.n	800264a <USB_EPStartXfer+0xc2>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800259a:	461d      	mov	r5, r3
 800259c:	4293      	cmp	r3, r2
    {
      len=ep->maxpacket;
      ep->xfer_len-=len; 
 800259e:	bf83      	ittte	hi
 80025a0:	1a9d      	subhi	r5, r3, r2
 80025a2:	618d      	strhi	r5, [r1, #24]
 80025a4:	4615      	movhi	r5, r2
    }
    else
    {  
      len=ep->xfer_len;
      ep->xfer_len =0;
 80025a6:	2300      	movls	r3, #0
 80025a8:	bf98      	it	ls
 80025aa:	618b      	strls	r3, [r1, #24]
 80025ac:	b2ab      	uxth	r3, r5
    }
    
    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0) 
 80025ae:	b97f      	cbnz	r7, 80025d0 <USB_EPStartXfer+0x48>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, len);
 80025b0:	888a      	ldrh	r2, [r1, #4]
 80025b2:	4620      	mov	r0, r4
 80025b4:	6949      	ldr	r1, [r1, #20]
 80025b6:	f7ff ffd6 	bl	8002566 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80025ba:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 80025be:	7832      	ldrb	r2, [r6, #0]
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80025c6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80025ca:	f8c3 5404 	str.w	r5, [r3, #1028]	; 0x404
 80025ce:	e030      	b.n	8002632 <USB_EPStartXfer+0xaa>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if (PCD_GET_ENDPOINT(USBx, ep->num)& USB_EP_DTOG_TX)
 80025d0:	780a      	ldrb	r2, [r1, #0]
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
        pmabuffer = ep->pmaaddr0;
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, len);
 80025d2:	4620      	mov	r0, r4
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
    }
    else
    {
      /* Write the data to the USB endpoint */
      if (PCD_GET_ENDPOINT(USBx, ep->num)& USB_EP_DTOG_TX)
 80025d4:	f834 1022 	ldrh.w	r1, [r4, r2, lsl #2]
 80025d8:	00d2      	lsls	r2, r2, #3
 80025da:	f011 0f40 	tst.w	r1, #64	; 0x40
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80025de:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 80025e2:	b289      	uxth	r1, r1
 80025e4:	440a      	add	r2, r1
 80025e6:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 80025ea:	f8c2 5404 	str.w	r5, [r2, #1028]	; 0x404
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
        pmabuffer = ep->pmaaddr0;
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, len);
 80025ee:	6971      	ldr	r1, [r6, #20]
      /* Write the data to the USB endpoint */
      if (PCD_GET_ENDPOINT(USBx, ep->num)& USB_EP_DTOG_TX)
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
        pmabuffer = ep->pmaaddr1;
 80025f0:	bf14      	ite	ne
 80025f2:	8932      	ldrhne	r2, [r6, #8]
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
        pmabuffer = ep->pmaaddr0;
 80025f4:	88f2      	ldrheq	r2, [r6, #6]
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, len);
 80025f6:	f7ff ffb6 	bl	8002566 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80025fa:	7873      	ldrb	r3, [r6, #1]
 80025fc:	7832      	ldrb	r2, [r6, #0]
 80025fe:	b953      	cbnz	r3, 8002616 <USB_EPStartXfer+0x8e>
 8002600:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8002604:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002608:	051b      	lsls	r3, r3, #20
 800260a:	0d1b      	lsrs	r3, r3, #20
 800260c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002610:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002614:	e00b      	b.n	800262e <USB_EPStartXfer+0xa6>
 8002616:	2b01      	cmp	r3, #1
 8002618:	d10b      	bne.n	8002632 <USB_EPStartXfer+0xaa>
 800261a:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 800261e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002622:	051b      	lsls	r3, r3, #20
 8002624:	0d1b      	lsrs	r3, r3, #20
 8002626:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800262a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800262e:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
    }
    
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8002632:	7832      	ldrb	r2, [r6, #0]
 8002634:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8002638:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800263c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002640:	041b      	lsls	r3, r3, #16
 8002642:	0c1b      	lsrs	r3, r3, #16
 8002644:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8002648:	e066      	b.n	8002718 <USB_EPStartXfer+0x190>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800264a:	4293      	cmp	r3, r2
    {
      len=ep->maxpacket;
      ep->xfer_len-=len; 
 800264c:	bf8b      	itete	hi
 800264e:	1a9b      	subhi	r3, r3, r2
    }
    else
    {
      len=ep->xfer_len;
      ep->xfer_len =0;
 8002650:	2200      	movls	r2, #0
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
    {
      len=ep->maxpacket;
      ep->xfer_len-=len; 
 8002652:	618b      	strhi	r3, [r1, #24]
    }
    else
    {
      len=ep->xfer_len;
      ep->xfer_len =0;
 8002654:	618a      	strls	r2, [r1, #24]
 8002656:	bf88      	it	hi
 8002658:	4613      	movhi	r3, r2
 800265a:	7809      	ldrb	r1, [r1, #0]
    }
    
    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0) 
 800265c:	b327      	cbz	r7, 80026a8 <USB_EPStartXfer+0x120>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800265e:	bb00      	cbnz	r0, 80026a2 <USB_EPStartXfer+0x11a>
 8002660:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
 8002664:	2b3e      	cmp	r3, #62	; 0x3e
 8002666:	b292      	uxth	r2, r2
 8002668:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 800266c:	f101 0102 	add.w	r1, r1, #2
 8002670:	f504 6080 	add.w	r0, r4, #1024	; 0x400
 8002674:	d90b      	bls.n	800268e <USB_EPStartXfer+0x106>
 8002676:	f3c3 124f 	ubfx	r2, r3, #5, #16
 800267a:	06dd      	lsls	r5, r3, #27
 800267c:	bf04      	itt	eq
 800267e:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8002682:	b292      	uxtheq	r2, r2
 8002684:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8002688:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800268c:	e006      	b.n	800269c <USB_EPStartXfer+0x114>
 800268e:	f3c3 024f 	ubfx	r2, r3, #1, #16
 8002692:	07df      	lsls	r7, r3, #31
 8002694:	bf44      	itt	mi
 8002696:	3201      	addmi	r2, #1
 8002698:	b292      	uxthmi	r2, r2
 800269a:	0292      	lsls	r2, r2, #10
 800269c:	b292      	uxth	r2, r2
 800269e:	f840 2011 	str.w	r2, [r0, r1, lsl #1]
 80026a2:	7872      	ldrb	r2, [r6, #1]
 80026a4:	7831      	ldrb	r1, [r6, #0]
 80026a6:	bb0a      	cbnz	r2, 80026ec <USB_EPStartXfer+0x164>
 80026a8:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
 80026ac:	2b3e      	cmp	r3, #62	; 0x3e
 80026ae:	b292      	uxth	r2, r2
 80026b0:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 80026b4:	f101 0106 	add.w	r1, r1, #6
 80026b8:	f504 6080 	add.w	r0, r4, #1024	; 0x400
 80026bc:	d90b      	bls.n	80026d6 <USB_EPStartXfer+0x14e>
 80026be:	f3c3 124f 	ubfx	r2, r3, #5, #16
 80026c2:	06dd      	lsls	r5, r3, #27
 80026c4:	bf04      	itt	eq
 80026c6:	f102 32ff 	addeq.w	r2, r2, #4294967295
 80026ca:	b292      	uxtheq	r2, r2
 80026cc:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 80026d0:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80026d4:	e006      	b.n	80026e4 <USB_EPStartXfer+0x15c>
 80026d6:	f3c3 024f 	ubfx	r2, r3, #1, #16
 80026da:	07db      	lsls	r3, r3, #31
 80026dc:	bf44      	itt	mi
 80026de:	3201      	addmi	r2, #1
 80026e0:	b292      	uxthmi	r2, r2
 80026e2:	0292      	lsls	r2, r2, #10
 80026e4:	b292      	uxth	r2, r2
 80026e6:	f840 2011 	str.w	r2, [r0, r1, lsl #1]
 80026ea:	e00a      	b.n	8002702 <USB_EPStartXfer+0x17a>
 80026ec:	2a01      	cmp	r2, #1
 80026ee:	d108      	bne.n	8002702 <USB_EPStartXfer+0x17a>
 80026f0:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
 80026f4:	b292      	uxth	r2, r2
 80026f6:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 80026fa:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 80026fe:	f8c1 3404 	str.w	r3, [r1, #1028]	; 0x404
    }
    
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002702:	7832      	ldrb	r2, [r6, #0]
 8002704:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8002708:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800270c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002710:	041b      	lsls	r3, r3, #16
 8002712:	0c1b      	lsrs	r3, r3, #16
 8002714:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002718:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800271c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002720:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
  }
  
  return HAL_OK;
}
 8002724:	2000      	movs	r0, #0
 8002726:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002728 <USB_ReadPMA>:
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
 8002728:	3301      	adds	r3, #1
  uint32_t index = 0;
  uint32_t *pdwVal = NULL;
  
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 800272a:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  * @param  wPMABufAddr : address into PMA.
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800272e:	b510      	push	{r4, lr}
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
 8002730:	105b      	asrs	r3, r3, #1
  uint32_t index = 0;
  uint32_t *pdwVal = NULL;
  
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8002732:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  for (index = nbytes; index != 0; index--)
 8002736:	2400      	movs	r4, #0
 8002738:	42a3      	cmp	r3, r4
 800273a:	d005      	beq.n	8002748 <USB_ReadPMA+0x20>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 800273c:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 8002740:	f821 0014 	strh.w	r0, [r1, r4, lsl #1]
 8002744:	3401      	adds	r4, #1
 8002746:	e7f7      	b.n	8002738 <USB_ReadPMA+0x10>
    pbUsrBuf++;
  }
}
 8002748:	bd10      	pop	{r4, pc}

0800274a <USBD_CDC_DataIn>:
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800274a:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  if(pdev->pClassData != NULL)
 800274e:	b11b      	cbz	r3, 8002758 <USBD_CDC_DataIn+0xe>
  {
    
    hcdc->TxState = 0;
 8002750:	2000      	movs	r0, #0
 8002752:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214

    return USBD_OK;
 8002756:	4770      	bx	lr
  }
  else
  {
    return USBD_FAIL;
 8002758:	2002      	movs	r0, #2
  }
}
 800275a:	4770      	bx	lr

0800275c <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 800275c:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
 8002760:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002762:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 8002766:	b15b      	cbz	r3, 8002780 <USBD_CDC_EP0_RxReady+0x24>
 8002768:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 800276c:	28ff      	cmp	r0, #255	; 0xff
 800276e:	d007      	beq.n	8002780 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8002776:	4621      	mov	r1, r4
 8002778:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      hcdc->CmdLength);
      hcdc->CmdOpCode = 0xFF; 
 800277a:	23ff      	movs	r3, #255	; 0xff
 800277c:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
      
  }
  return USBD_OK;
}
 8002780:	2000      	movs	r0, #0
 8002782:	bd10      	pop	{r4, pc}

08002784 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8002784:	2343      	movs	r3, #67	; 0x43
 8002786:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8002788:	4800      	ldr	r0, [pc, #0]	; (800278c <USBD_CDC_GetFSCfgDesc+0x8>)
 800278a:	4770      	bx	lr
 800278c:	20000000 	.word	0x20000000

08002790 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8002790:	2343      	movs	r3, #67	; 0x43
 8002792:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8002794:	4800      	ldr	r0, [pc, #0]	; (8002798 <USBD_CDC_GetHSCfgDesc+0x8>)
 8002796:	4770      	bx	lr
 8002798:	200000cc 	.word	0x200000cc

0800279c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 800279c:	2343      	movs	r3, #67	; 0x43
 800279e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 80027a0:	4800      	ldr	r0, [pc, #0]	; (80027a4 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 80027a2:	4770      	bx	lr
 80027a4:	20000088 	.word	0x20000088

080027a8 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 80027a8:	230a      	movs	r3, #10
 80027aa:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 80027ac:	4800      	ldr	r0, [pc, #0]	; (80027b0 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 80027ae:	4770      	bx	lr
 80027b0:	2000007c 	.word	0x2000007c

080027b4 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{      
 80027b4:	b538      	push	{r3, r4, r5, lr}
 80027b6:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80027b8:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  
  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 80027bc:	f001 f8ee 	bl	800399c <USBD_LL_GetRxDataSize>
  
  /* USB data will be immediately processed, this allow next USB traffic being 
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 80027c0:	f8d5 3218 	ldr.w	r3, [r5, #536]	; 0x218
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{      
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  
  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 80027c4:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
  
  /* USB data will be immediately processed, this allow next USB traffic being 
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 80027c8:	b14b      	cbz	r3, 80027de <USBD_CDC_DataOut+0x2a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80027ca:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 80027ce:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 80027d8:	4798      	blx	r3

    return USBD_OK;
 80027da:	2000      	movs	r0, #0
 80027dc:	bd38      	pop	{r3, r4, r5, pc}
  }
  else
  {
    return USBD_FAIL;
 80027de:	2002      	movs	r0, #2
  }
}
 80027e0:	bd38      	pop	{r3, r4, r5, pc}
	...

080027e4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev, 
                                USBD_SetupReqTypedef *req)
{
 80027e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  static uint8_t ifalt = 0;
    
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80027e6:	780f      	ldrb	r7, [r1, #0]
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev, 
                                USBD_SetupReqTypedef *req)
{
 80027e8:	4606      	mov	r6, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  static uint8_t ifalt = 0;
    
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80027ea:	f017 0360 	ands.w	r3, r7, #96	; 0x60
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev, 
                                USBD_SetupReqTypedef *req)
{
 80027ee:	460c      	mov	r4, r1
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  static uint8_t ifalt = 0;
    
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80027f0:	d022      	beq.n	8002838 <USBD_CDC_Setup+0x54>
 80027f2:	2b20      	cmp	r3, #32
 80027f4:	d127      	bne.n	8002846 <USBD_CDC_Setup+0x62>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 80027f6:	88ca      	ldrh	r2, [r1, #6]
 80027f8:	784b      	ldrb	r3, [r1, #1]
 80027fa:	b1ba      	cbz	r2, 800282c <USBD_CDC_Setup+0x48>
    {
      if (req->bmRequest & 0x80)
 80027fc:	0639      	lsls	r1, r7, #24
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev, 
                                USBD_SetupReqTypedef *req)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80027fe:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
    {
      if (req->bmRequest & 0x80)
 8002802:	d509      	bpl.n	8002818 <USBD_CDC_Setup+0x34>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8002804:	f8d0 121c 	ldr.w	r1, [r0, #540]	; 0x21c
 8002808:	4618      	mov	r0, r3
 800280a:	688f      	ldr	r7, [r1, #8]
 800280c:	4629      	mov	r1, r5
 800280e:	47b8      	blx	r7
                                                          (uint8_t *)hcdc->data,
                                                          req->wLength);
          USBD_CtlSendData (pdev, 
 8002810:	88e2      	ldrh	r2, [r4, #6]
 8002812:	4629      	mov	r1, r5
 8002814:	4630      	mov	r0, r6
 8002816:	e014      	b.n	8002842 <USBD_CDC_Setup+0x5e>
                            (uint8_t *)hcdc->data,
                            req->wLength);
      }
      else
      {
        hcdc->CmdOpCode = req->bRequest;
 8002818:	f885 3200 	strb.w	r3, [r5, #512]	; 0x200
        hcdc->CmdLength = req->wLength;
 800281c:	88e3      	ldrh	r3, [r4, #6]
        
        USBD_CtlPrepareRx (pdev, 
 800281e:	4629      	mov	r1, r5
                            req->wLength);
      }
      else
      {
        hcdc->CmdOpCode = req->bRequest;
        hcdc->CmdLength = req->wLength;
 8002820:	f885 3201 	strb.w	r3, [r5, #513]	; 0x201
        
        USBD_CtlPrepareRx (pdev, 
 8002824:	88e2      	ldrh	r2, [r4, #6]
 8002826:	f000 fba7 	bl	8002f78 <USBD_CtlPrepareRx>
 800282a:	e00c      	b.n	8002846 <USBD_CDC_Setup+0x62>
      }
      
    }
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800282c:	f8d0 021c 	ldr.w	r0, [r0, #540]	; 0x21c
 8002830:	6884      	ldr	r4, [r0, #8]
 8002832:	4618      	mov	r0, r3
 8002834:	47a0      	blx	r4
 8002836:	e006      	b.n	8002846 <USBD_CDC_Setup+0x62>
                                                        0);
    }
    break;

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8002838:	784b      	ldrb	r3, [r1, #1]
 800283a:	2b0a      	cmp	r3, #10
 800283c:	d103      	bne.n	8002846 <USBD_CDC_Setup+0x62>
    {      
    case USB_REQ_GET_INTERFACE :
      USBD_CtlSendData (pdev,
 800283e:	4903      	ldr	r1, [pc, #12]	; (800284c <USBD_CDC_Setup+0x68>)
 8002840:	2201      	movs	r2, #1
 8002842:	f000 fb84 	bl	8002f4e <USBD_CtlSendData>
 
  default: 
    break;
  }
  return USBD_OK;
}
 8002846:	2000      	movs	r0, #0
 8002848:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800284a:	bf00      	nop
 800284c:	200001dd 	.word	0x200001dd

08002850 <USBD_CDC_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, 
                                 uint8_t cfgidx)
{
 8002850:	b510      	push	{r4, lr}
 8002852:	4604      	mov	r4, r0
  uint8_t ret = 0;
  
  /* Open EP IN */
  USBD_LL_CloseEP(pdev,
 8002854:	2181      	movs	r1, #129	; 0x81
 8002856:	f001 f83d 	bl	80038d4 <USBD_LL_CloseEP>
              CDC_IN_EP);
  
  /* Open EP OUT */
  USBD_LL_CloseEP(pdev,
 800285a:	2101      	movs	r1, #1
 800285c:	4620      	mov	r0, r4
 800285e:	f001 f839 	bl	80038d4 <USBD_LL_CloseEP>
              CDC_OUT_EP);
  
  /* Open Command IN EP */
  USBD_LL_CloseEP(pdev,
 8002862:	2182      	movs	r1, #130	; 0x82
 8002864:	4620      	mov	r0, r4
 8002866:	f001 f835 	bl	80038d4 <USBD_LL_CloseEP>
              CDC_CMD_EP);
  
  
  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 800286a:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 800286e:	b153      	cbz	r3, 8002886 <USBD_CDC_DeInit+0x36>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8002870:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8002878:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 800287c:	f001 f898 	bl	80039b0 <USBD_static_free>
    pdev->pClassData = NULL;
 8002880:	2300      	movs	r3, #0
 8002882:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
  }
  
  return ret;
}
 8002886:	2000      	movs	r0, #0
 8002888:	bd10      	pop	{r4, pc}

0800288a <USBD_CDC_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
 800288a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint8_t ret = 0;
  USBD_CDC_HandleTypeDef   *hcdc;
  
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 800288c:	7c03      	ldrb	r3, [r0, #16]
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
 800288e:	4604      	mov	r4, r0
  uint8_t ret = 0;
  USBD_CDC_HandleTypeDef   *hcdc;
  
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8002890:	b943      	cbnz	r3, 80028a4 <USBD_CDC_Init+0x1a>
  {  
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 8002892:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002896:	2202      	movs	r2, #2
 8002898:	2181      	movs	r1, #129	; 0x81
 800289a:	f001 f80b 	bl	80038b4 <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_HS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 800289e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028a2:	e005      	b.n	80028b0 <USBD_CDC_Init+0x26>
    
  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 80028a4:	2340      	movs	r3, #64	; 0x40
 80028a6:	2202      	movs	r2, #2
 80028a8:	2181      	movs	r1, #129	; 0x81
 80028aa:	f001 f803 	bl	80038b4 <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 80028ae:	2340      	movs	r3, #64	; 0x40
 80028b0:	2202      	movs	r2, #2
 80028b2:	2101      	movs	r1, #1
 80028b4:	4620      	mov	r0, r4
 80028b6:	f000 fffd 	bl	80038b4 <USBD_LL_OpenEP>
                   CDC_OUT_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_OUT_PACKET_SIZE);
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev,
 80028ba:	2308      	movs	r3, #8
 80028bc:	2203      	movs	r2, #3
 80028be:	2182      	movs	r1, #130	; 0x82
 80028c0:	4620      	mov	r0, r4
 80028c2:	f000 fff7 	bl	80038b4 <USBD_LL_OpenEP>
                 CDC_CMD_EP,
                 USBD_EP_TYPE_INTR,
                 CDC_CMD_PACKET_SIZE);
  
    
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 80028c6:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80028ca:	f001 f86d 	bl	80039a8 <USBD_static_malloc>
 80028ce:	4606      	mov	r6, r0
 80028d0:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
  
  if(pdev->pClassData == NULL)
 80028d4:	b1e8      	cbz	r0, 8002912 <USBD_CDC_Init+0x88>
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
    
    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80028d6:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
    
    /* Init Xfer states */
    hcdc->TxState =0;
 80028da:	2500      	movs	r5, #0
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
    
    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4798      	blx	r3
    
    /* Init Xfer states */
    hcdc->TxState =0;
    hcdc->RxState =0;
       
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 80028e0:	7c27      	ldrb	r7, [r4, #16]
    
    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
    
    /* Init Xfer states */
    hcdc->TxState =0;
 80028e2:	f8c6 5214 	str.w	r5, [r6, #532]	; 0x214
    hcdc->RxState =0;
 80028e6:	f8c6 5218 	str.w	r5, [r6, #536]	; 0x218
       
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 80028ea:	b94f      	cbnz	r7, 8002900 <USBD_CDC_Init+0x76>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80028ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028f0:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 80028f4:	2101      	movs	r1, #1
 80028f6:	4620      	mov	r0, r4
 80028f8:	f001 f842 	bl	8003980 <USBD_LL_PrepareReceive>
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
  uint8_t ret = 0;
 80028fc:	4638      	mov	r0, r7
 80028fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8002900:	2340      	movs	r3, #64	; 0x40
 8002902:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 8002906:	2101      	movs	r1, #1
 8002908:	4620      	mov	r0, r4
 800290a:	f001 f839 	bl	8003980 <USBD_LL_PrepareReceive>
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
  uint8_t ret = 0;
 800290e:	4628      	mov	r0, r5
 8002910:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
  
  if(pdev->pClassData == NULL)
  {
    ret = 1; 
 8002912:	2001      	movs	r0, #1
    }
    
    
  }
  return ret;
}
 8002914:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002916 <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;
  
  if(fops != NULL)
 8002916:	b119      	cbz	r1, 8002920 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData= fops;
 8002918:	f8c0 121c 	str.w	r1, [r0, #540]	; 0x21c
    ret = USBD_OK;    
 800291c:	2000      	movs	r0, #0
 800291e:	4770      	bx	lr
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;
 8002920:	2002      	movs	r0, #2
    pdev->pUserData= fops;
    ret = USBD_OK;    
  }
  
  return ret;
}
 8002922:	4770      	bx	lr

08002924 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002924:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;  
  
  return USBD_OK;  
}
 8002928:	2000      	movs	r0, #0
                                uint8_t  *pbuff,
                                uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  
  hcdc->TxBuffer = pbuff;
 800292a:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;  
 800292e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  
  return USBD_OK;  
}
 8002932:	4770      	bx	lr

08002934 <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  
  hcdc->RxBuffer = pbuff;
 8002934:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  return USBD_OK;
}
 8002938:	2000      	movs	r0, #0
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  
  hcdc->RxBuffer = pbuff;
 800293a:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
  
  return USBD_OK;
}
 800293e:	4770      	bx	lr

08002940 <USBD_CDC_TransmitPacket>:
  * @param  epnum: endpoint number
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{      
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002940:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{      
 8002944:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  
  if(pdev->pClassData != NULL)
 8002946:	b172      	cbz	r2, 8002966 <USBD_CDC_TransmitPacket+0x26>
  {
    if(hcdc->TxState == 0)
 8002948:	f8d2 4214 	ldr.w	r4, [r2, #532]	; 0x214
 800294c:	2301      	movs	r3, #1
 800294e:	b964      	cbnz	r4, 800296a <USBD_CDC_TransmitPacket+0x2a>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1;
 8002950:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
      
      /* Transmit next packet */
      USBD_LL_Transmit(pdev,
 8002954:	2181      	movs	r1, #129	; 0x81
 8002956:	f8b2 3210 	ldrh.w	r3, [r2, #528]	; 0x210
 800295a:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 800295e:	f001 f801 	bl	8003964 <USBD_LL_Transmit>
                       CDC_IN_EP,
                       hcdc->TxBuffer,
                       hcdc->TxLength);
      
      return USBD_OK;
 8002962:	4620      	mov	r0, r4
 8002964:	bd10      	pop	{r4, pc}
      return USBD_BUSY;
    }
  }
  else
  {
    return USBD_FAIL;
 8002966:	2002      	movs	r0, #2
 8002968:	bd10      	pop	{r4, pc}
      
      return USBD_OK;
    }
    else
    {
      return USBD_BUSY;
 800296a:	4618      	mov	r0, r3
  }
  else
  {
    return USBD_FAIL;
  }
}
 800296c:	bd10      	pop	{r4, pc}

0800296e <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800296e:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
 8002972:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8002974:	b162      	cbz	r2, 8002990 <USBD_CDC_ReceivePacket+0x22>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8002976:	7c04      	ldrb	r4, [r0, #16]
 8002978:	b914      	cbnz	r4, 8002980 <USBD_CDC_ReceivePacket+0x12>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800297a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800297e:	e000      	b.n	8002982 <USBD_CDC_ReceivePacket+0x14>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8002980:	2340      	movs	r3, #64	; 0x40
 8002982:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8002986:	2101      	movs	r1, #1
 8002988:	f000 fffa 	bl	8003980 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800298c:	2000      	movs	r0, #0
 800298e:	bd10      	pop	{r4, pc}
  }
  else
  {
    return USBD_FAIL;
 8002990:	2002      	movs	r0, #2
  }
}
 8002992:	bd10      	pop	{r4, pc}

08002994 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8002994:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8002996:	b180      	cbz	r0, 80029ba <USBD_Init+0x26>
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8002998:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800299c:	b113      	cbz	r3, 80029a4 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 800299e:	2300      	movs	r3, #0
 80029a0:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 80029a4:	b109      	cbz	r1, 80029aa <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 80029a6:	f8c0 1210 	str.w	r1, [r0, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 80029aa:	2301      	movs	r3, #1
 80029ac:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  pdev->id = id;
 80029b0:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80029b2:	f000 ff29 	bl	8003808 <USBD_LL_Init>
  
  return USBD_OK; 
 80029b6:	2000      	movs	r0, #0
 80029b8:	bd08      	pop	{r3, pc}
{
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
  {
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
 80029ba:	2002      	movs	r0, #2
  pdev->id = id;
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
  
  return USBD_OK; 
}
 80029bc:	bd08      	pop	{r3, pc}

080029be <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 80029be:	b119      	cbz	r1, 80029c8 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80029c0:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    status = USBD_OK;
 80029c4:	2000      	movs	r0, #0
 80029c6:	4770      	bx	lr
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 80029c8:	2002      	movs	r0, #2
  }
  
  return status;
}
 80029ca:	4770      	bx	lr

080029cc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 80029cc:	b508      	push	{r3, lr}
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 80029ce:	f000 ff63 	bl	8003898 <USBD_LL_Start>
  
  return USBD_OK;  
}
 80029d2:	2000      	movs	r0, #0
 80029d4:	bd08      	pop	{r3, pc}

080029d6 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80029d6:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;
  
  if(pdev->pClass != NULL)
 80029d8:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80029dc:	b90b      	cbnz	r3, 80029e2 <USBD_SetClassConfig+0xc>
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
  USBD_StatusTypeDef   ret = USBD_FAIL;
 80029de:	2002      	movs	r0, #2
 80029e0:	bd08      	pop	{r3, pc}
  
  if(pdev->pClass != NULL)
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4798      	blx	r3
 80029e6:	2800      	cmp	r0, #0
 80029e8:	d1f9      	bne.n	80029de <USBD_SetClassConfig+0x8>
    {
      ret = USBD_OK;
    }
  }
  return ret; 
}
 80029ea:	bd08      	pop	{r3, pc}

080029ec <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80029ec:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 80029ee:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	4798      	blx	r3
  return USBD_OK;
}
 80029f6:	2000      	movs	r0, #0
 80029f8:	bd08      	pop	{r3, pc}

080029fa <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80029fa:	b538      	push	{r3, r4, r5, lr}
 80029fc:	4604      	mov	r4, r0

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80029fe:	f500 7502 	add.w	r5, r0, #520	; 0x208
 8002a02:	4628      	mov	r0, r5
 8002a04:	f000 f8e2 	bl	8002bcc <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	f8c4 31f4 	str.w	r3, [r4, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
  
  switch (pdev->request.bmRequest & 0x1F) 
 8002a0e:	f894 1208 	ldrb.w	r1, [r4, #520]	; 0x208
{

  USBD_ParseSetupRequest(&pdev->request, psetup);
  
  pdev->ep0_state = USBD_EP0_SETUP;
  pdev->ep0_data_len = pdev->request.wLength;
 8002a12:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 8002a16:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  
  switch (pdev->request.bmRequest & 0x1F) 
 8002a1a:	f001 031f 	and.w	r3, r1, #31
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d00c      	beq.n	8002a3c <USBD_LL_SetupStage+0x42>
 8002a22:	d306      	bcc.n	8002a32 <USBD_LL_SetupStage+0x38>
 8002a24:	2b02      	cmp	r3, #2
 8002a26:	d10e      	bne.n	8002a46 <USBD_LL_SetupStage+0x4c>
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &pdev->request);
    break;
    
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
 8002a28:	4629      	mov	r1, r5
 8002a2a:	4620      	mov	r0, r4
 8002a2c:	f000 fa10 	bl	8002e50 <USBD_StdEPReq>
    break;
 8002a30:	e00e      	b.n	8002a50 <USBD_LL_SetupStage+0x56>
  pdev->ep0_data_len = pdev->request.wLength;
  
  switch (pdev->request.bmRequest & 0x1F) 
  {
  case USB_REQ_RECIPIENT_DEVICE:   
    USBD_StdDevReq (pdev, &pdev->request);
 8002a32:	4629      	mov	r1, r5
 8002a34:	4620      	mov	r0, r4
 8002a36:	f000 f8e9 	bl	8002c0c <USBD_StdDevReq>
    break;
 8002a3a:	e009      	b.n	8002a50 <USBD_LL_SetupStage+0x56>
    
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &pdev->request);
 8002a3c:	4629      	mov	r1, r5
 8002a3e:	4620      	mov	r0, r4
 8002a40:	f000 f9ee 	bl	8002e20 <USBD_StdItfReq>
    break;
 8002a44:	e004      	b.n	8002a50 <USBD_LL_SetupStage+0x56>
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
    break;
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 8002a46:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8002a4a:	4620      	mov	r0, r4
 8002a4c:	f000 ff50 	bl	80038f0 <USBD_LL_StallEP>
    break;
  }  
  return USBD_OK;  
}
 8002a50:	2000      	movs	r0, #0
 8002a52:	bd38      	pop	{r3, r4, r5, pc}

08002a54 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 8002a54:	b538      	push	{r3, r4, r5, lr}
 8002a56:	4604      	mov	r4, r0
 8002a58:	4615      	mov	r5, r2
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 8002a5a:	bb09      	cbnz	r1, 8002aa0 <USBD_LL_DataOutStage+0x4c>
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8002a5c:	f8d0 31f4 	ldr.w	r3, [r0, #500]	; 0x1f4
 8002a60:	2b03      	cmp	r3, #3
 8002a62:	d126      	bne.n	8002ab2 <USBD_LL_DataOutStage+0x5e>
    {
      if(pep->rem_length > pep->maxpacket)
 8002a64:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
 8002a68:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
 8002a6c:	4291      	cmp	r1, r2
 8002a6e:	d90a      	bls.n	8002a86 <USBD_LL_DataOutStage+0x32>
      {
        pep->rem_length -=  pep->maxpacket;
 8002a70:	1a8b      	subs	r3, r1, r2
       
        USBD_CtlContinueRx (pdev, 
 8002a72:	429a      	cmp	r2, r3
 8002a74:	bf28      	it	cs
 8002a76:	461a      	movcs	r2, r3
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
    {
      if(pep->rem_length > pep->maxpacket)
      {
        pep->rem_length -=  pep->maxpacket;
 8002a78:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
       
        USBD_CtlContinueRx (pdev, 
 8002a7c:	b292      	uxth	r2, r2
 8002a7e:	4629      	mov	r1, r5
 8002a80:	f000 fa89 	bl	8002f96 <USBD_CtlContinueRx>
 8002a84:	e015      	b.n	8002ab2 <USBD_LL_DataOutStage+0x5e>
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8002a86:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002a8a:	691b      	ldr	r3, [r3, #16]
 8002a8c:	b123      	cbz	r3, 8002a98 <USBD_LL_DataOutStage+0x44>
 8002a8e:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002a92:	2a03      	cmp	r2, #3
 8002a94:	d100      	bne.n	8002a98 <USBD_LL_DataOutStage+0x44>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
        {
          pdev->pClass->EP0_RxReady(pdev); 
 8002a96:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8002a98:	4620      	mov	r0, r4
 8002a9a:	f000 fa84 	bl	8002fa6 <USBD_CtlSendStatus>
 8002a9e:	e008      	b.n	8002ab2 <USBD_LL_DataOutStage+0x5e>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL)&&
 8002aa0:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002aa4:	699b      	ldr	r3, [r3, #24]
 8002aa6:	b123      	cbz	r3, 8002ab2 <USBD_LL_DataOutStage+0x5e>
 8002aa8:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002aac:	2a03      	cmp	r2, #3
 8002aae:	d100      	bne.n	8002ab2 <USBD_LL_DataOutStage+0x5e>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum); 
 8002ab0:	4798      	blx	r3
  }  
  return USBD_OK;
}
 8002ab2:	2000      	movs	r0, #0
 8002ab4:	bd38      	pop	{r3, r4, r5, pc}

08002ab6 <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 8002ab6:	b570      	push	{r4, r5, r6, lr}
 8002ab8:	4613      	mov	r3, r2
 8002aba:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 8002abc:	460e      	mov	r6, r1
 8002abe:	2900      	cmp	r1, #0
 8002ac0:	d13c      	bne.n	8002b3c <USBD_LL_DataInStage+0x86>
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8002ac2:	f8d0 21f4 	ldr.w	r2, [r0, #500]	; 0x1f4
 8002ac6:	2a02      	cmp	r2, #2
 8002ac8:	d130      	bne.n	8002b2c <USBD_LL_DataInStage+0x76>
    {
      if(pep->rem_length > pep->maxpacket)
 8002aca:	69c5      	ldr	r5, [r0, #28]
 8002acc:	6a02      	ldr	r2, [r0, #32]
 8002ace:	4295      	cmp	r5, r2
 8002ad0:	d907      	bls.n	8002ae2 <USBD_LL_DataInStage+0x2c>
      {
        pep->rem_length -=  pep->maxpacket;
 8002ad2:	1aaa      	subs	r2, r5, r2
 8002ad4:	61c2      	str	r2, [r0, #28]
        
        USBD_CtlContinueSendData (pdev, 
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	b292      	uxth	r2, r2
 8002ada:	f000 fa45 	bl	8002f68 <USBD_CtlContinueSendData>
                                  pdata, 
                                  pep->rem_length);
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8002ade:	4633      	mov	r3, r6
 8002ae0:	e011      	b.n	8002b06 <USBD_LL_DataInStage+0x50>
                                NULL,
                                0);  
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0) &&
 8002ae2:	6983      	ldr	r3, [r0, #24]
 8002ae4:	fbb3 f5f2 	udiv	r5, r3, r2
 8002ae8:	fb02 3515 	mls	r5, r2, r5, r3
 8002aec:	b98d      	cbnz	r5, 8002b12 <USBD_LL_DataInStage+0x5c>
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d80f      	bhi.n	8002b12 <USBD_LL_DataInStage+0x5c>
           (pep->total_length >= pep->maxpacket) &&
 8002af2:	f8d0 21f8 	ldr.w	r2, [r0, #504]	; 0x1f8
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d20b      	bcs.n	8002b12 <USBD_LL_DataInStage+0x5c>
             (pep->total_length < pdev->ep0_data_len ))
        {
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
 8002afa:	462a      	mov	r2, r5
 8002afc:	f000 fa34 	bl	8002f68 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8002b00:	462b      	mov	r3, r5
           (pep->total_length >= pep->maxpacket) &&
             (pep->total_length < pdev->ep0_data_len ))
        {
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
          pdev->ep0_data_len = 0;
 8002b02:	f8c4 51f8 	str.w	r5, [r4, #504]	; 0x1f8
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8002b06:	461a      	mov	r2, r3
 8002b08:	4619      	mov	r1, r3
 8002b0a:	4620      	mov	r0, r4
 8002b0c:	f000 ff38 	bl	8003980 <USBD_LL_PrepareReceive>
 8002b10:	e00c      	b.n	8002b2c <USBD_LL_DataInStage+0x76>
                                NULL,
                                0);
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8002b12:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	b12b      	cbz	r3, 8002b26 <USBD_LL_DataInStage+0x70>
 8002b1a:	f894 21fc 	ldrb.w	r2, [r4, #508]	; 0x1fc
 8002b1e:	2a03      	cmp	r2, #3
 8002b20:	d101      	bne.n	8002b26 <USBD_LL_DataInStage+0x70>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
          {
            pdev->pClass->EP0_TxSent(pdev); 
 8002b22:	4620      	mov	r0, r4
 8002b24:	4798      	blx	r3
          }          
          USBD_CtlReceiveStatus(pdev);
 8002b26:	4620      	mov	r0, r4
 8002b28:	f000 fa48 	bl	8002fbc <USBD_CtlReceiveStatus>
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 8002b2c:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d10c      	bne.n	8002b4e <USBD_LL_DataInStage+0x98>
    {
      USBD_RunTestMode(pdev); 
      pdev->dev_test_mode = 0;
 8002b34:	2300      	movs	r3, #0
 8002b36:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
 8002b3a:	e008      	b.n	8002b4e <USBD_LL_DataInStage+0x98>
    }
  }
  else if((pdev->pClass->DataIn != NULL)&& 
 8002b3c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002b40:	695b      	ldr	r3, [r3, #20]
 8002b42:	b123      	cbz	r3, 8002b4e <USBD_LL_DataInStage+0x98>
 8002b44:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002b48:	2a03      	cmp	r2, #3
 8002b4a:	d100      	bne.n	8002b4e <USBD_LL_DataInStage+0x98>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
 8002b4c:	4798      	blx	r3
  }  
  return USBD_OK;
}
 8002b4e:	2000      	movs	r0, #0
 8002b50:	bd70      	pop	{r4, r5, r6, pc}

08002b52 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8002b52:	b538      	push	{r3, r4, r5, lr}
 8002b54:	4604      	mov	r4, r0
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8002b56:	2200      	movs	r2, #0
 8002b58:	4611      	mov	r1, r2
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8002b5a:	2540      	movs	r5, #64	; 0x40
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8002b5c:	2340      	movs	r3, #64	; 0x40
 8002b5e:	f000 fea9 	bl	80038b4 <USBD_LL_OpenEP>
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 8002b62:	462b      	mov	r3, r5
  USBD_LL_OpenEP(pdev,
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8002b64:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 8002b68:	2200      	movs	r2, #0
 8002b6a:	2180      	movs	r1, #128	; 0x80
 8002b6c:	4620      	mov	r0, r4
 8002b6e:	f000 fea1 	bl	80038b4 <USBD_LL_OpenEP>
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8002b72:	2301      	movs	r3, #1
 8002b74:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 8002b78:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
  USBD_LL_OpenEP(pdev,
              0x80,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8002b7c:	6225      	str	r5, [r4, #32]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  
  if (pdev->pClassData) 
 8002b7e:	b12b      	cbz	r3, 8002b8c <USBD_LL_Reset+0x3a>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8002b80:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8002b84:	7921      	ldrb	r1, [r4, #4]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	4620      	mov	r0, r4
 8002b8a:	4798      	blx	r3
 
  
  return USBD_OK;
}
 8002b8c:	2000      	movs	r0, #0
 8002b8e:	bd38      	pop	{r3, r4, r5, pc}

08002b90 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8002b90:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 8002b92:	2000      	movs	r0, #0
 8002b94:	4770      	bx	lr

08002b96 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8002b96:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8002b9a:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8002b9e:	2304      	movs	r3, #4
 8002ba0:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 8002ba4:	2000      	movs	r0, #0
 8002ba6:	4770      	bx	lr

08002ba8 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;  
 8002ba8:	f890 31fd 	ldrb.w	r3, [r0, #509]	; 0x1fd
 8002bac:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 8002bb0:	2000      	movs	r0, #0
 8002bb2:	4770      	bx	lr

08002bb4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8002bb4:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8002bb6:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002bba:	2a03      	cmp	r2, #3
 8002bbc:	d104      	bne.n	8002bc8 <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 8002bbe:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002bc2:	69db      	ldr	r3, [r3, #28]
 8002bc4:	b103      	cbz	r3, 8002bc8 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 8002bc6:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 8002bc8:	2000      	movs	r0, #0
 8002bca:	bd08      	pop	{r3, pc}

08002bcc <USBD_ParseSetupRequest>:
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
  req->bmRequest     = *(uint8_t *)  (pdata);
 8002bcc:	780b      	ldrb	r3, [r1, #0]
 8002bce:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8002bd0:	784b      	ldrb	r3, [r1, #1]
 8002bd2:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8002bd4:	78ca      	ldrb	r2, [r1, #3]
 8002bd6:	788b      	ldrb	r3, [r1, #2]
 8002bd8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002bdc:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8002bde:	794a      	ldrb	r2, [r1, #5]
 8002be0:	790b      	ldrb	r3, [r1, #4]
 8002be2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002be6:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8002be8:	79ca      	ldrb	r2, [r1, #7]
 8002bea:	798b      	ldrb	r3, [r1, #6]
 8002bec:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002bf0:	80c3      	strh	r3, [r0, #6]
 8002bf2:	4770      	bx	lr

08002bf4 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8002bf4:	b510      	push	{r4, lr}
 8002bf6:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80);
 8002bf8:	2180      	movs	r1, #128	; 0x80
 8002bfa:	f000 fe79 	bl	80038f0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 8002bfe:	4620      	mov	r0, r4
}
 8002c00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80);
  USBD_LL_StallEP(pdev , 0);
 8002c04:	2100      	movs	r1, #0
 8002c06:	f000 be73 	b.w	80038f0 <USBD_LL_StallEP>
	...

08002c0c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8002c0c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  USBD_StatusTypeDef ret = USBD_OK;  
  
  switch (req->bRequest) 
 8002c0e:	784b      	ldrb	r3, [r1, #1]
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8002c10:	4604      	mov	r4, r0
 8002c12:	460d      	mov	r5, r1
  USBD_StatusTypeDef ret = USBD_OK;  
  
  switch (req->bRequest) 
 8002c14:	2b09      	cmp	r3, #9
 8002c16:	f200 80f9 	bhi.w	8002e0c <USBD_StdDevReq+0x200>
 8002c1a:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002c1e:	00cb      	.short	0x00cb
 8002c20:	00f700e2 	.word	0x00f700e2
 8002c24:	00f700de 	.word	0x00f700de
 8002c28:	000a0075 	.word	0x000a0075
 8002c2c:	00bb00f7 	.word	0x00bb00f7
 8002c30:	0091      	.short	0x0091
{
  uint16_t len;
  uint8_t *pbuf;
  
    
  switch (req->wValue >> 8)
 8002c32:	884b      	ldrh	r3, [r1, #2]
 8002c34:	0a1a      	lsrs	r2, r3, #8
 8002c36:	3a01      	subs	r2, #1
 8002c38:	2a06      	cmp	r2, #6
 8002c3a:	f200 80e7 	bhi.w	8002e0c <USBD_StdDevReq+0x200>
 8002c3e:	e8df f012 	tbh	[pc, r2, lsl #1]
 8002c42:	0007      	.short	0x0007
 8002c44:	0017000b 	.word	0x0017000b
 8002c48:	00e500e5 	.word	0x00e500e5
 8002c4c:	0047003c 	.word	0x0047003c
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif    
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8002c50:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	e017      	b.n	8002c88 <USBD_StdDevReq+0x7c>
    break;
    
  case USB_DESC_TYPE_CONFIGURATION:     
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 8002c58:	7c02      	ldrb	r2, [r0, #16]
 8002c5a:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002c5e:	b90a      	cbnz	r2, 8002c64 <USBD_StdDevReq+0x58>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8002c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c62:	e000      	b.n	8002c66 <USBD_StdDevReq+0x5a>
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8002c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c66:	f10d 0006 	add.w	r0, sp, #6
 8002c6a:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8002c6c:	2302      	movs	r3, #2
 8002c6e:	e03a      	b.n	8002ce6 <USBD_StdDevReq+0xda>
    }
    break;
    
  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	2b05      	cmp	r3, #5
 8002c74:	f200 80ca 	bhi.w	8002e0c <USBD_StdDevReq+0x200>
 8002c78:	e8df f003 	tbb	[pc, r3]
 8002c7c:	130f0b03 	.word	0x130f0b03
 8002c80:	1b17      	.short	0x1b17
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8002c82:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f10d 0106 	add.w	r1, sp, #6
 8002c8c:	7c20      	ldrb	r0, [r4, #16]
 8002c8e:	4798      	blx	r3
 8002c90:	e02a      	b.n	8002ce8 <USBD_StdDevReq+0xdc>
      break;
      
    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8002c92:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	e7f6      	b.n	8002c88 <USBD_StdDevReq+0x7c>
      break;
      
    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8002c9a:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	e7f2      	b.n	8002c88 <USBD_StdDevReq+0x7c>
      break;
      
    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8002ca2:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002ca6:	691b      	ldr	r3, [r3, #16]
 8002ca8:	e7ee      	b.n	8002c88 <USBD_StdDevReq+0x7c>
      break;
      
    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8002caa:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002cae:	695b      	ldr	r3, [r3, #20]
 8002cb0:	e7ea      	b.n	8002c88 <USBD_StdDevReq+0x7c>
      break;
      
    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8002cb2:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002cb6:	699b      	ldr	r3, [r3, #24]
 8002cb8:	e7e6      	b.n	8002c88 <USBD_StdDevReq+0x7c>
#endif   
    }
    break;
  case USB_DESC_TYPE_DEVICE_QUALIFIER:                   

    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8002cba:	7c03      	ldrb	r3, [r0, #16]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	f040 80a5 	bne.w	8002e0c <USBD_StdDevReq+0x200>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8002cc2:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002cc6:	f10d 0006 	add.w	r0, sp, #6
 8002cca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ccc:	4798      	blx	r3
 8002cce:	e00b      	b.n	8002ce8 <USBD_StdDevReq+0xdc>
      USBD_CtlError(pdev , req);
      return;
    } 

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8002cd0:	7c03      	ldrb	r3, [r0, #16]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	f040 809a 	bne.w	8002e0c <USBD_StdDevReq+0x200>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8002cd8:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002cdc:	f10d 0006 	add.w	r0, sp, #6
 8002ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce2:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8002ce4:	2307      	movs	r3, #7
 8002ce6:	7043      	strb	r3, [r0, #1]
  default: 
     USBD_CtlError(pdev , req);
    return;
  }
  
  if((len != 0)&& (req->wLength != 0))
 8002ce8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8002cec:	2a00      	cmp	r2, #0
 8002cee:	f000 8091 	beq.w	8002e14 <USBD_StdDevReq+0x208>
 8002cf2:	88eb      	ldrh	r3, [r5, #6]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	f000 808d 	beq.w	8002e14 <USBD_StdDevReq+0x208>
  {
    
    len = MIN(len , req->wLength);
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	bf28      	it	cs
 8002cfe:	461a      	movcs	r2, r3
    
    USBD_CtlSendData (pdev, 
 8002d00:	4601      	mov	r1, r0
  }
  
  if((len != 0)&& (req->wLength != 0))
  {
    
    len = MIN(len , req->wLength);
 8002d02:	f8ad 2006 	strh.w	r2, [sp, #6]
 8002d06:	e064      	b.n	8002dd2 <USBD_StdDevReq+0x1c6>
static void USBD_SetAddress(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 8002d08:	888b      	ldrh	r3, [r1, #4]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d17e      	bne.n	8002e0c <USBD_StdDevReq+0x200>
 8002d0e:	88cb      	ldrh	r3, [r1, #6]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d17b      	bne.n	8002e0c <USBD_StdDevReq+0x200>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8002d14:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
{
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8002d18:	788e      	ldrb	r6, [r1, #2]
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8002d1a:	2b03      	cmp	r3, #3
{
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8002d1c:	f006 067f 	and.w	r6, r6, #127	; 0x7f
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8002d20:	d074      	beq.n	8002e0c <USBD_StdDevReq+0x200>
    {
      USBD_CtlError(pdev , req);
    } 
    else 
    {
      pdev->dev_address = dev_addr;
 8002d22:	f880 61fe 	strb.w	r6, [r0, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 8002d26:	4631      	mov	r1, r6
 8002d28:	f000 fe0e 	bl	8003948 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 8002d2c:	4620      	mov	r0, r4
 8002d2e:	f000 f93a 	bl	8002fa6 <USBD_CtlSendStatus>
      
      if (dev_addr != 0) 
 8002d32:	b10e      	cbz	r6, 8002d38 <USBD_StdDevReq+0x12c>
      {
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 8002d34:	2302      	movs	r3, #2
 8002d36:	e000      	b.n	8002d3a <USBD_StdDevReq+0x12e>
      } 
      else 
      {
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 8002d38:	2301      	movs	r3, #1
 8002d3a:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
 8002d3e:	e069      	b.n	8002e14 <USBD_StdDevReq+0x208>
                           USBD_SetupReqTypedef *req)
{
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 8002d40:	7889      	ldrb	r1, [r1, #2]
 8002d42:	4e36      	ldr	r6, [pc, #216]	; (8002e1c <USBD_StdDevReq+0x210>)
  
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8002d44:	2901      	cmp	r1, #1
                           USBD_SetupReqTypedef *req)
{
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 8002d46:	7031      	strb	r1, [r6, #0]
  
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8002d48:	d860      	bhi.n	8002e0c <USBD_StdDevReq+0x200>
  {            
     USBD_CtlError(pdev , req);                              
  } 
  else 
  {
    switch (pdev->dev_state) 
 8002d4a:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d002      	beq.n	8002d58 <USBD_StdDevReq+0x14c>
 8002d52:	2b03      	cmp	r3, #3
 8002d54:	d008      	beq.n	8002d68 <USBD_StdDevReq+0x15c>
 8002d56:	e059      	b.n	8002e0c <USBD_StdDevReq+0x200>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx) 
 8002d58:	2900      	cmp	r1, #0
 8002d5a:	d053      	beq.n	8002e04 <USBD_StdDevReq+0x1f8>
      {                                			   							   							   				
        pdev->dev_config = cfgidx;
 8002d5c:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8002d5e:	2303      	movs	r3, #3
    switch (pdev->dev_state) 
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx) 
      {                                			   							   							   				
        pdev->dev_config = cfgidx;
 8002d60:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8002d62:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
 8002d66:	e00f      	b.n	8002d88 <USBD_StdDevReq+0x17c>
         USBD_CtlSendStatus(pdev);
      }
      break;
      
    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0) 
 8002d68:	b931      	cbnz	r1, 8002d78 <USBD_StdDevReq+0x16c>
      {                           
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8002d6a:	2302      	movs	r3, #2
 8002d6c:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 8002d70:	6041      	str	r1, [r0, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 8002d72:	f7ff fe3b 	bl	80029ec <USBD_ClrClassConfig>
 8002d76:	e045      	b.n	8002e04 <USBD_StdDevReq+0x1f8>
        USBD_CtlSendStatus(pdev);
        
      } 
      else  if (cfgidx != pdev->dev_config) 
 8002d78:	6841      	ldr	r1, [r0, #4]
 8002d7a:	2901      	cmp	r1, #1
 8002d7c:	d042      	beq.n	8002e04 <USBD_StdDevReq+0x1f8>
      {
        /* Clear old configuration */
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 8002d7e:	b2c9      	uxtb	r1, r1
 8002d80:	f7ff fe34 	bl	80029ec <USBD_ClrClassConfig>
        
        /* set new configuration */
        pdev->dev_config = cfgidx;
 8002d84:	7831      	ldrb	r1, [r6, #0]
 8002d86:	6061      	str	r1, [r4, #4]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8002d88:	4620      	mov	r0, r4
 8002d8a:	f7ff fe24 	bl	80029d6 <USBD_SetClassConfig>
 8002d8e:	2802      	cmp	r0, #2
 8002d90:	d138      	bne.n	8002e04 <USBD_StdDevReq+0x1f8>
 8002d92:	e03b      	b.n	8002e0c <USBD_StdDevReq+0x200>
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{

  if (req->wLength != 1) 
 8002d94:	88ca      	ldrh	r2, [r1, #6]
 8002d96:	2a01      	cmp	r2, #1
 8002d98:	d138      	bne.n	8002e0c <USBD_StdDevReq+0x200>
  {                   
     USBD_CtlError(pdev , req);
  }
  else 
  {
    switch (pdev->dev_state )  
 8002d9a:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d003      	beq.n	8002daa <USBD_StdDevReq+0x19e>
 8002da2:	2b03      	cmp	r3, #3
 8002da4:	d132      	bne.n	8002e0c <USBD_StdDevReq+0x200>
                        1);
      break;
      
    case USBD_STATE_CONFIGURED:   
      
      USBD_CtlSendData (pdev, 
 8002da6:	1d01      	adds	r1, r0, #4
 8002da8:	e013      	b.n	8002dd2 <USBD_StdDevReq+0x1c6>
  else 
  {
    switch (pdev->dev_state )  
    {
    case USBD_STATE_ADDRESSED:                     
      pdev->dev_default_config = 0;
 8002daa:	4601      	mov	r1, r0
 8002dac:	2300      	movs	r3, #0
 8002dae:	f841 3f08 	str.w	r3, [r1, #8]!
 8002db2:	e00e      	b.n	8002dd2 <USBD_StdDevReq+0x1c6>
static void USBD_GetStatus(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
  
    
  switch (pdev->dev_state) 
 8002db4:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8002db8:	3b02      	subs	r3, #2
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d826      	bhi.n	8002e0c <USBD_StdDevReq+0x200>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    
#if ( USBD_SELF_POWERED == 1)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	60c3      	str	r3, [r0, #12]
#else
    pdev->dev_config_status = 0;                                   
#endif
                      
    if (pdev->dev_remote_wakeup) 
 8002dc2:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 8002dc6:	b10b      	cbz	r3, 8002dcc <USBD_StdDevReq+0x1c0>
    {
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 8002dc8:	2303      	movs	r3, #3
 8002dca:	60c3      	str	r3, [r0, #12]
    }
    
    USBD_CtlSendData (pdev, 
 8002dcc:	2202      	movs	r2, #2
 8002dce:	f104 010c 	add.w	r1, r4, #12
 8002dd2:	4620      	mov	r0, r4
 8002dd4:	f000 f8bb 	bl	8002f4e <USBD_CtlSendData>
 8002dd8:	e01c      	b.n	8002e14 <USBD_StdDevReq+0x208>
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8002dda:	884b      	ldrh	r3, [r1, #2]
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d119      	bne.n	8002e14 <USBD_StdDevReq+0x208>
 8002de0:	e008      	b.n	8002df4 <USBD_StdDevReq+0x1e8>
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
  switch (pdev->dev_state)
 8002de2:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8002de6:	3b02      	subs	r3, #2
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d80f      	bhi.n	8002e0c <USBD_StdDevReq+0x200>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 8002dec:	884b      	ldrh	r3, [r1, #2]
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d110      	bne.n	8002e14 <USBD_StdDevReq+0x208>
    {
      pdev->dev_remote_wakeup = 0; 
 8002df2:	2300      	movs	r3, #0
 8002df4:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 8002df8:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8002dfc:	4629      	mov	r1, r5
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	4620      	mov	r0, r4
 8002e02:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 8002e04:	4620      	mov	r0, r4
 8002e06:	f000 f8ce 	bl	8002fa6 <USBD_CtlSendStatus>
 8002e0a:	e003      	b.n	8002e14 <USBD_StdDevReq+0x208>
  case USB_REQ_CLEAR_FEATURE:                                   
    USBD_ClrFeature (pdev , req);
    break;
    
  default:  
    USBD_CtlError(pdev , req);
 8002e0c:	4629      	mov	r1, r5
 8002e0e:	4620      	mov	r0, r4
 8002e10:	f7ff fef0 	bl	8002bf4 <USBD_CtlError>
    break;
  }
  
  return ret;
}
 8002e14:	2000      	movs	r0, #0
 8002e16:	b002      	add	sp, #8
 8002e18:	bd70      	pop	{r4, r5, r6, pc}
 8002e1a:	bf00      	nop
 8002e1c:	200001de 	.word	0x200001de

08002e20 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8002e20:	b538      	push	{r3, r4, r5, lr}
  USBD_StatusTypeDef ret = USBD_OK; 
  
  switch (pdev->dev_state) 
 8002e22:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8002e26:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret = USBD_OK; 
  
  switch (pdev->dev_state) 
 8002e28:	2b03      	cmp	r3, #3
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8002e2a:	460d      	mov	r5, r1
  USBD_StatusTypeDef ret = USBD_OK; 
  
  switch (pdev->dev_state) 
 8002e2c:	d10c      	bne.n	8002e48 <USBD_StdItfReq+0x28>
  {
  case USBD_STATE_CONFIGURED:
    
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 8002e2e:	790b      	ldrb	r3, [r1, #4]
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d809      	bhi.n	8002e48 <USBD_StdItfReq+0x28>
    {
      pdev->pClass->Setup (pdev, req); 
 8002e34:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	4798      	blx	r3
      
      if((req->wLength == 0)&& (ret == USBD_OK))
 8002e3c:	88eb      	ldrh	r3, [r5, #6]
 8002e3e:	b92b      	cbnz	r3, 8002e4c <USBD_StdItfReq+0x2c>
      {
         USBD_CtlSendStatus(pdev);
 8002e40:	4620      	mov	r0, r4
 8002e42:	f000 f8b0 	bl	8002fa6 <USBD_CtlSendStatus>
 8002e46:	e001      	b.n	8002e4c <USBD_StdItfReq+0x2c>
       USBD_CtlError(pdev , req);
    }
    break;
    
  default:
     USBD_CtlError(pdev , req);
 8002e48:	f7ff fed4 	bl	8002bf4 <USBD_CtlError>
    break;
  }
  return USBD_OK;
}
 8002e4c:	2000      	movs	r0, #0
 8002e4e:	bd38      	pop	{r3, r4, r5, pc}

08002e50 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8002e50:	b570      	push	{r4, r5, r6, lr}
  USBD_StatusTypeDef ret = USBD_OK; 
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
  
  /* Check if it is a class request */
  if ((req->bmRequest & 0x60) == 0x20)
 8002e52:	780a      	ldrb	r2, [r1, #0]
{
  
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK; 
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
 8002e54:	888e      	ldrh	r6, [r1, #4]
  
  /* Check if it is a class request */
  if ((req->bmRequest & 0x60) == 0x20)
 8002e56:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8002e5a:	2a20      	cmp	r2, #32
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8002e5c:	4604      	mov	r4, r0
 8002e5e:	460d      	mov	r5, r1
  
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK; 
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
 8002e60:	b2f3      	uxtb	r3, r6
  
  /* Check if it is a class request */
  if ((req->bmRequest & 0x60) == 0x20)
 8002e62:	d104      	bne.n	8002e6e <USBD_StdEPReq+0x1e>
  {
    pdev->pClass->Setup (pdev, req);
 8002e64:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	4798      	blx	r3
    
    return USBD_OK;
 8002e6c:	e051      	b.n	8002f12 <USBD_StdEPReq+0xc2>
  }
  
  switch (req->bRequest) 
 8002e6e:	784a      	ldrb	r2, [r1, #1]
 8002e70:	2a01      	cmp	r2, #1
 8002e72:	d010      	beq.n	8002e96 <USBD_StdEPReq+0x46>
 8002e74:	d326      	bcc.n	8002ec4 <USBD_StdEPReq+0x74>
 8002e76:	2a03      	cmp	r2, #3
 8002e78:	d14b      	bne.n	8002f12 <USBD_StdEPReq+0xc2>
  {
    
  case USB_REQ_SET_FEATURE :
    
    switch (pdev->dev_state) 
 8002e7a:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002e7e:	2a02      	cmp	r2, #2
 8002e80:	d027      	beq.n	8002ed2 <USBD_StdEPReq+0x82>
 8002e82:	2a03      	cmp	r2, #3
 8002e84:	d143      	bne.n	8002f0e <USBD_StdEPReq+0xbe>
        USBD_LL_StallEP(pdev , ep_addr);
      }
      break;	
      
    case USBD_STATE_CONFIGURED:   
      if (req->wValue == USB_FEATURE_EP_HALT)
 8002e86:	884a      	ldrh	r2, [r1, #2]
 8002e88:	b992      	cbnz	r2, 8002eb0 <USBD_StdEPReq+0x60>
      {
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8002e8a:	065e      	lsls	r6, r3, #25
 8002e8c:	d010      	beq.n	8002eb0 <USBD_StdEPReq+0x60>
        { 
          USBD_LL_StallEP(pdev , ep_addr);
 8002e8e:	4619      	mov	r1, r3
 8002e90:	f000 fd2e 	bl	80038f0 <USBD_LL_StallEP>
 8002e94:	e00c      	b.n	8002eb0 <USBD_StdEPReq+0x60>
    }
    break;
    
  case USB_REQ_CLEAR_FEATURE :
    
    switch (pdev->dev_state) 
 8002e96:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002e9a:	2a02      	cmp	r2, #2
 8002e9c:	d019      	beq.n	8002ed2 <USBD_StdEPReq+0x82>
 8002e9e:	2a03      	cmp	r2, #3
 8002ea0:	d135      	bne.n	8002f0e <USBD_StdEPReq+0xbe>
        USBD_LL_StallEP(pdev , ep_addr);
      }
      break;	
      
    case USBD_STATE_CONFIGURED:   
      if (req->wValue == USB_FEATURE_EP_HALT)
 8002ea2:	884a      	ldrh	r2, [r1, #2]
 8002ea4:	bbaa      	cbnz	r2, 8002f12 <USBD_StdEPReq+0xc2>
      {
        if ((ep_addr & 0x7F) != 0x00) 
 8002ea6:	0659      	lsls	r1, r3, #25
 8002ea8:	d008      	beq.n	8002ebc <USBD_StdEPReq+0x6c>
        {        
          USBD_LL_ClearStallEP(pdev , ep_addr);
 8002eaa:	4619      	mov	r1, r3
 8002eac:	f000 fd2e 	bl	800390c <USBD_LL_ClearStallEP>
          pdev->pClass->Setup (pdev, req);
 8002eb0:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8002eb4:	4629      	mov	r1, r5
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	4620      	mov	r0, r4
 8002eba:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8002ebc:	4620      	mov	r0, r4
 8002ebe:	f000 f872 	bl	8002fa6 <USBD_CtlSendStatus>
 8002ec2:	e026      	b.n	8002f12 <USBD_StdEPReq+0xc2>
      break;    
    }
    break;
    
  case USB_REQ_GET_STATUS:                  
    switch (pdev->dev_state) 
 8002ec4:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002ec8:	2a02      	cmp	r2, #2
 8002eca:	d002      	beq.n	8002ed2 <USBD_StdEPReq+0x82>
 8002ecc:	2a03      	cmp	r2, #3
 8002ece:	d006      	beq.n	8002ede <USBD_StdEPReq+0x8e>
 8002ed0:	e01d      	b.n	8002f0e <USBD_StdEPReq+0xbe>
    {
    case USBD_STATE_ADDRESSED:          
      if ((ep_addr & 0x7F) != 0x00) 
 8002ed2:	065a      	lsls	r2, r3, #25
 8002ed4:	d01d      	beq.n	8002f12 <USBD_StdEPReq+0xc2>
      {
        USBD_LL_StallEP(pdev , ep_addr);
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	f000 fd0a 	bl	80038f0 <USBD_LL_StallEP>
 8002edc:	e019      	b.n	8002f12 <USBD_StdEPReq+0xc2>
 8002ede:	f003 057f 	and.w	r5, r3, #127	; 0x7f
      }
      break;	
      
    case USBD_STATE_CONFIGURED:
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8002ee2:	f016 0f80 	tst.w	r6, #128	; 0x80
 8002ee6:	eb00 1505 	add.w	r5, r0, r5, lsl #4
                                         &pdev->ep_out[ep_addr & 0x7F];
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8002eea:	4619      	mov	r1, r3
        USBD_LL_StallEP(pdev , ep_addr);
      }
      break;	
      
    case USBD_STATE_CONFIGURED:
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8002eec:	bf14      	ite	ne
 8002eee:	3514      	addne	r5, #20
 8002ef0:	f505 7582 	addeq.w	r5, r5, #260	; 0x104
                                         &pdev->ep_out[ep_addr & 0x7F];
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8002ef4:	f000 fd18 	bl	8003928 <USBD_LL_IsStallEP>
 8002ef8:	b110      	cbz	r0, 8002f00 <USBD_StdEPReq+0xb0>
      {
        pep->status = 0x0001;     
 8002efa:	2301      	movs	r3, #1
 8002efc:	602b      	str	r3, [r5, #0]
 8002efe:	e000      	b.n	8002f02 <USBD_StdEPReq+0xb2>
      }
      else
      {
        pep->status = 0x0000;  
 8002f00:	6028      	str	r0, [r5, #0]
      }
      
      USBD_CtlSendData (pdev,
 8002f02:	2202      	movs	r2, #2
 8002f04:	4629      	mov	r1, r5
 8002f06:	4620      	mov	r0, r4
 8002f08:	f000 f821 	bl	8002f4e <USBD_CtlSendData>
                        (uint8_t *)&pep->status,
                        2);
      break;
 8002f0c:	e001      	b.n	8002f12 <USBD_StdEPReq+0xc2>
      
    default:                         
      USBD_CtlError(pdev , req);
 8002f0e:	f7ff fe71 	bl	8002bf4 <USBD_CtlError>
    
  default:
    break;
  }
  return ret;
}
 8002f12:	2000      	movs	r0, #0
 8002f14:	bd70      	pop	{r4, r5, r6, pc}

08002f16 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8002f16:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0;
  
  if (desc != NULL) 
 8002f18:	b1c0      	cbz	r0, 8002f4c <USBD_GetString+0x36>
 8002f1a:	4605      	mov	r5, r0
 8002f1c:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;

    while (*buf != '\0') 
 8002f1e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	2c00      	cmp	r4, #0
 8002f26:	d1f9      	bne.n	8002f1c <USBD_GetString+0x6>
{
  uint8_t idx = 0;
  
  if (desc != NULL) 
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
 8002f28:	005b      	lsls	r3, r3, #1
 8002f2a:	3302      	adds	r3, #2
 8002f2c:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *len;
 8002f2e:	700b      	strb	r3, [r1, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 8002f30:	2303      	movs	r3, #3
 8002f32:	704b      	strb	r3, [r1, #1]
 8002f34:	3801      	subs	r0, #1
 8002f36:	2302      	movs	r3, #2
    
    while (*desc != '\0') 
 8002f38:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8002f3c:	b135      	cbz	r5, 8002f4c <USBD_GetString+0x36>
    {
      unicode[idx++] = *desc++;
 8002f3e:	1c5a      	adds	r2, r3, #1
 8002f40:	54cd      	strb	r5, [r1, r3]
 8002f42:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0x00;
 8002f44:	3302      	adds	r3, #2
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	548c      	strb	r4, [r1, r2]
 8002f4a:	e7f5      	b.n	8002f38 <USBD_GetString+0x22>
 8002f4c:	bd30      	pop	{r4, r5, pc}

08002f4e <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 8002f4e:	4613      	mov	r3, r2
 8002f50:	b510      	push	{r4, lr}
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8002f52:	2202      	movs	r2, #2
 8002f54:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 8002f58:	6183      	str	r3, [r0, #24]
  pdev->ep_in[0].rem_length   = len;
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8002f5a:	460a      	mov	r2, r1
                               uint16_t len)
{
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;
 8002f5c:	61c3      	str	r3, [r0, #28]
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8002f5e:	2100      	movs	r1, #0
 8002f60:	f000 fd00 	bl	8003964 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8002f64:	2000      	movs	r0, #0
 8002f66:	bd10      	pop	{r4, pc}

08002f68 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 8002f68:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	460a      	mov	r2, r1
 8002f6e:	2100      	movs	r1, #0
 8002f70:	f000 fcf8 	bl	8003964 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8002f74:	2000      	movs	r0, #0
 8002f76:	bd08      	pop	{r3, pc}

08002f78 <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 8002f78:	4613      	mov	r3, r2
 8002f7a:	b510      	push	{r4, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 8002f7c:	2203      	movs	r2, #3
 8002f7e:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
 8002f82:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
  pdev->ep_out[0].rem_length   = len;
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 8002f86:	460a      	mov	r2, r1
                                  uint16_t len)
{
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length   = len;
 8002f88:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 8002f8c:	2100      	movs	r1, #0
 8002f8e:	f000 fcf7 	bl	8003980 <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
}
 8002f92:	2000      	movs	r0, #0
 8002f94:	bd10      	pop	{r4, pc}

08002f96 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 8002f96:	b508      	push	{r3, lr}

  USBD_LL_PrepareReceive (pdev,
 8002f98:	4613      	mov	r3, r2
 8002f9a:	460a      	mov	r2, r1
 8002f9c:	2100      	movs	r1, #0
 8002f9e:	f000 fcef 	bl	8003980 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
}
 8002fa2:	2000      	movs	r0, #0
 8002fa4:	bd08      	pop	{r3, pc}

08002fa6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 8002fa6:	b508      	push	{r3, lr}

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8002fa8:	2304      	movs	r3, #4
 8002faa:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 8002fae:	2300      	movs	r3, #0
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	4619      	mov	r1, r3
 8002fb4:	f000 fcd6 	bl	8003964 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8002fb8:	2000      	movs	r0, #0
 8002fba:	bd08      	pop	{r3, pc}

08002fbc <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 8002fbc:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 8002fbe:	2305      	movs	r3, #5
 8002fc0:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	4619      	mov	r1, r3
 8002fca:	f000 fcd9 	bl	8003980 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
}
 8002fce:	2000      	movs	r0, #0
 8002fd0:	bd08      	pop	{r3, pc}

08002fd2 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8002fd2:	b510      	push	{r4, lr}
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002fd4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8002fd8:	b094      	sub	sp, #80	; 0x50
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002fda:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002fdc:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002fde:	2100      	movs	r1, #0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002fe0:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002fe2:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002fe4:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002fe6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002fea:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002fec:	910c      	str	r1, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002fee:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ff0:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002ff2:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ff4:	f7fe f97a 	bl	80012ec <HAL_RCC_OscConfig>
 8002ff8:	b100      	cbz	r0, 8002ffc <SystemClock_Config+0x2a>
 8002ffa:	e7fe      	b.n	8002ffa <SystemClock_Config+0x28>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ffc:	230f      	movs	r3, #15
 8002ffe:	9305      	str	r3, [sp, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003000:	9007      	str	r0, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003002:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003006:	9009      	str	r0, [sp, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003008:	4621      	mov	r1, r4
 800300a:	a805      	add	r0, sp, #20

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800300c:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800300e:	9308      	str	r3, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003010:	f7fe fc14 	bl	800183c <HAL_RCC_ClockConfig>
 8003014:	b100      	cbz	r0, 8003018 <SystemClock_Config+0x46>
 8003016:	e7fe      	b.n	8003016 <SystemClock_Config+0x44>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8003018:	2312      	movs	r3, #18
 800301a:	9301      	str	r3, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800301c:	9004      	str	r0, [sp, #16]
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800301e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003022:	a801      	add	r0, sp, #4
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8003024:	9303      	str	r3, [sp, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003026:	f7fe fcd9 	bl	80019dc <HAL_RCCEx_PeriphCLKConfig>
 800302a:	4604      	mov	r4, r0
 800302c:	b100      	cbz	r0, 8003030 <SystemClock_Config+0x5e>
 800302e:	e7fe      	b.n	800302e <SystemClock_Config+0x5c>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8003030:	f7fe fcb6 	bl	80019a0 <HAL_RCC_GetHCLKFreq>
 8003034:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003038:	fbb0 f0f3 	udiv	r0, r0, r3
 800303c:	f7fd fc54 	bl	80008e8 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8003040:	2004      	movs	r0, #4
 8003042:	f7fd fc67 	bl	8000914 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003046:	4622      	mov	r2, r4
 8003048:	4621      	mov	r1, r4
 800304a:	f04f 30ff 	mov.w	r0, #4294967295
 800304e:	f7fd fc0b 	bl	8000868 <HAL_NVIC_SetPriority>
}
 8003052:	b014      	add	sp, #80	; 0x50
 8003054:	bd10      	pop	{r4, pc}
	...

08003058 <send_receive_spi>:
  * 	pRX			Receive buffer
  * 	numBytes	number of bytes to send
  * @retval
  * 	HAL_StatusTypeDef HAL_OK or HAIL_FAIL
  */
HAL_StatusTypeDef send_receive_spi(uint8_t *pTX, uint8_t *pRX, uint8_t numBytes){
 8003058:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800305a:	4605      	mov	r5, r0
 800305c:	460e      	mov	r6, r1

	HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_RESET);
 800305e:	4c0c      	ldr	r4, [pc, #48]	; (8003090 <send_receive_spi+0x38>)
 8003060:	2200      	movs	r2, #0
 8003062:	4620      	mov	r0, r4
 8003064:	2108      	movs	r1, #8
 8003066:	f7fd fd3f 	bl	8000ae8 <HAL_GPIO_WritePin>
	HAL_StatusTypeDef status;
	status = HAL_SPI_TransmitReceive(&hspi1, pTX, pRX, 2 , SPI_MAX_TIMEOUT );
 800306a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800306e:	9300      	str	r3, [sp, #0]
 8003070:	4632      	mov	r2, r6
 8003072:	2302      	movs	r3, #2
 8003074:	4629      	mov	r1, r5
 8003076:	4807      	ldr	r0, [pc, #28]	; (8003094 <send_receive_spi+0x3c>)
 8003078:	f7fe fe0b 	bl	8001c92 <HAL_SPI_TransmitReceive>
 800307c:	4605      	mov	r5, r0
	HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_SET);
 800307e:	2201      	movs	r2, #1
 8003080:	4620      	mov	r0, r4
 8003082:	2108      	movs	r1, #8
 8003084:	f7fd fd30 	bl	8000ae8 <HAL_GPIO_WritePin>
	return status;

}
 8003088:	4628      	mov	r0, r5
 800308a:	b002      	add	sp, #8
 800308c:	bd70      	pop	{r4, r5, r6, pc}
 800308e:	bf00      	nop
 8003090:	40010800 	.word	0x40010800
 8003094:	2000043c 	.word	0x2000043c

08003098 <tx_send>:
  *
  * 	HAL_OK 		all is good
  * 	HAL_BUSY	spi error
  * 	HAL_ERROR	config error
  */
HAL_StatusTypeDef tx_send(uint8_t *pTX, uint8_t numBytes){
 8003098:	b573      	push	{r0, r1, r4, r5, r6, lr}
	uint8_t txBuff[]={0x00, 0x00};
	uint8_t rxBuff[]={0x00, 0x00};
 800309a:	2300      	movs	r3, #0
  *
  * 	HAL_OK 		all is good
  * 	HAL_BUSY	spi error
  * 	HAL_ERROR	config error
  */
HAL_StatusTypeDef tx_send(uint8_t *pTX, uint8_t numBytes){
 800309c:	4606      	mov	r6, r0
	uint8_t txBuff[]={0x00, 0x00};
	uint8_t rxBuff[]={0x00, 0x00};
	uint8_t *allData = (uint8_t *)malloc(sizeof(pTX)+2*sizeof(uint8_t));
 800309e:	2006      	movs	r0, #6
  *
  * 	HAL_OK 		all is good
  * 	HAL_BUSY	spi error
  * 	HAL_ERROR	config error
  */
HAL_StatusTypeDef tx_send(uint8_t *pTX, uint8_t numBytes){
 80030a0:	460c      	mov	r4, r1
	uint8_t txBuff[]={0x00, 0x00};
	uint8_t rxBuff[]={0x00, 0x00};
 80030a2:	f88d 3004 	strb.w	r3, [sp, #4]
 80030a6:	f88d 3005 	strb.w	r3, [sp, #5]
	uint8_t *allData = (uint8_t *)malloc(sizeof(pTX)+2*sizeof(uint8_t));
 80030aa:	f000 fd21 	bl	8003af0 <malloc>

	//Set the power up bit high
	txBuff[0] = (uint8_t)(W_MASK|CONFIG_REG);
 80030ae:	2320      	movs	r3, #32
  * 	HAL_ERROR	config error
  */
HAL_StatusTypeDef tx_send(uint8_t *pTX, uint8_t numBytes){
	uint8_t txBuff[]={0x00, 0x00};
	uint8_t rxBuff[]={0x00, 0x00};
	uint8_t *allData = (uint8_t *)malloc(sizeof(pTX)+2*sizeof(uint8_t));
 80030b0:	4605      	mov	r5, r0

	//Set the power up bit high
	txBuff[0] = (uint8_t)(W_MASK|CONFIG_REG);
 80030b2:	f88d 3000 	strb.w	r3, [sp]
	txBuff[1] = (uint8_t)((1<<EN_CRC)|(1<<PWR_UP));
	if(send_receive_spi(txBuff, rxBuff, 2)!=HAL_OK){
 80030b6:	2202      	movs	r2, #2
	uint8_t rxBuff[]={0x00, 0x00};
	uint8_t *allData = (uint8_t *)malloc(sizeof(pTX)+2*sizeof(uint8_t));

	//Set the power up bit high
	txBuff[0] = (uint8_t)(W_MASK|CONFIG_REG);
	txBuff[1] = (uint8_t)((1<<EN_CRC)|(1<<PWR_UP));
 80030b8:	230a      	movs	r3, #10
	if(send_receive_spi(txBuff, rxBuff, 2)!=HAL_OK){
 80030ba:	a901      	add	r1, sp, #4
 80030bc:	4668      	mov	r0, sp
	uint8_t rxBuff[]={0x00, 0x00};
	uint8_t *allData = (uint8_t *)malloc(sizeof(pTX)+2*sizeof(uint8_t));

	//Set the power up bit high
	txBuff[0] = (uint8_t)(W_MASK|CONFIG_REG);
	txBuff[1] = (uint8_t)((1<<EN_CRC)|(1<<PWR_UP));
 80030be:	f88d 3001 	strb.w	r3, [sp, #1]
	if(send_receive_spi(txBuff, rxBuff, 2)!=HAL_OK){
 80030c2:	f7ff ffc9 	bl	8003058 <send_receive_spi>
 80030c6:	bb00      	cbnz	r0, 800310a <tx_send+0x72>
		return HAL_BUSY;
	}

	//Now send the data
	allData[0] = (uint8_t)(W_TX_PAYLOAD);
 80030c8:	23a0      	movs	r3, #160	; 0xa0
 80030ca:	702b      	strb	r3, [r5, #0]
	memcpy(allData+sizeof(uint8_t), pTX, sizeof(pTX));

	if(send_receive_spi(allData, rxBuff, numBytes+1)!=HAL_OK){
 80030cc:	1c62      	adds	r2, r4, #1
		return HAL_BUSY;
	}

	//Now send the data
	allData[0] = (uint8_t)(W_TX_PAYLOAD);
	memcpy(allData+sizeof(uint8_t), pTX, sizeof(pTX));
 80030ce:	6833      	ldr	r3, [r6, #0]

	if(send_receive_spi(allData, rxBuff, numBytes+1)!=HAL_OK){
 80030d0:	b2d2      	uxtb	r2, r2
 80030d2:	a901      	add	r1, sp, #4
 80030d4:	4628      	mov	r0, r5
		return HAL_BUSY;
	}

	//Now send the data
	allData[0] = (uint8_t)(W_TX_PAYLOAD);
	memcpy(allData+sizeof(uint8_t), pTX, sizeof(pTX));
 80030d6:	f8c5 3001 	str.w	r3, [r5, #1]

	if(send_receive_spi(allData, rxBuff, numBytes+1)!=HAL_OK){
 80030da:	f7ff ffbd 	bl	8003058 <send_receive_spi>
 80030de:	4604      	mov	r4, r0
		free(allData);
 80030e0:	4628      	mov	r0, r5

	//Now send the data
	allData[0] = (uint8_t)(W_TX_PAYLOAD);
	memcpy(allData+sizeof(uint8_t), pTX, sizeof(pTX));

	if(send_receive_spi(allData, rxBuff, numBytes+1)!=HAL_OK){
 80030e2:	b114      	cbz	r4, 80030ea <tx_send+0x52>
		free(allData);
 80030e4:	f000 fd0c 	bl	8003b00 <free>
 80030e8:	e00f      	b.n	800310a <tx_send+0x72>
		return HAL_BUSY;
	}
	free(allData);
 80030ea:	f000 fd09 	bl	8003b00 <free>

	//Data loaded into the device now pulse the CE pin for more than 10us
	HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_SET);
 80030ee:	2201      	movs	r2, #1
 80030f0:	2102      	movs	r1, #2
 80030f2:	4808      	ldr	r0, [pc, #32]	; (8003114 <tx_send+0x7c>)
 80030f4:	f7fd fcf8 	bl	8000ae8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80030f8:	2001      	movs	r0, #1
 80030fa:	f7fd f861 	bl	80001c0 <HAL_Delay>
	HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 80030fe:	4622      	mov	r2, r4
 8003100:	2102      	movs	r1, #2
 8003102:	4804      	ldr	r0, [pc, #16]	; (8003114 <tx_send+0x7c>)
 8003104:	f7fd fcf0 	bl	8000ae8 <HAL_GPIO_WritePin>

	return HAL_OK;
 8003108:	e000      	b.n	800310c <tx_send+0x74>

	//Set the power up bit high
	txBuff[0] = (uint8_t)(W_MASK|CONFIG_REG);
	txBuff[1] = (uint8_t)((1<<EN_CRC)|(1<<PWR_UP));
	if(send_receive_spi(txBuff, rxBuff, 2)!=HAL_OK){
		return HAL_BUSY;
 800310a:	2402      	movs	r4, #2
	HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_SET);
	HAL_Delay(1);
	HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);

	return HAL_OK;
}
 800310c:	4620      	mov	r0, r4
 800310e:	b002      	add	sp, #8
 8003110:	bd70      	pop	{r4, r5, r6, pc}
 8003112:	bf00      	nop
 8003114:	40010800 	.word	0x40010800

08003118 <joystick_init>:
	}
	return HAL_OK;
}


void joystick_init(){
 8003118:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	//__HAL_RCC_GPIOB_CLK_ENABLE();
	/* Configure A0 as analog input */
	GPIO_InitStructure.Pin = JS_X_Pin;			//Set A0 pin
	GPIO_InitStructure.Mode = GPIO_MODE_ANALOG;		//Set to Analog input
	GPIO_InitStructure.Pull = GPIO_NOPULL ;			//No Pull up resister
	HAL_GPIO_Init(JS_X_GPIO_Port, &GPIO_InitStructure);
 800311a:	4c0a      	ldr	r4, [pc, #40]	; (8003144 <joystick_init+0x2c>)
void joystick_init(){
	GPIO_InitTypeDef GPIO_InitStructure;
	//__HAL_RCC_GPIOB_CLK_ENABLE();
	/* Configure A0 as analog input */
	GPIO_InitStructure.Pin = JS_X_Pin;			//Set A0 pin
	GPIO_InitStructure.Mode = GPIO_MODE_ANALOG;		//Set to Analog input
 800311c:	2301      	movs	r3, #1
 800311e:	2603      	movs	r6, #3
	GPIO_InitStructure.Pull = GPIO_NOPULL ;			//No Pull up resister
 8003120:	2500      	movs	r5, #0
	HAL_GPIO_Init(JS_X_GPIO_Port, &GPIO_InitStructure);
 8003122:	4669      	mov	r1, sp
 8003124:	4620      	mov	r0, r4
void joystick_init(){
	GPIO_InitTypeDef GPIO_InitStructure;
	//__HAL_RCC_GPIOB_CLK_ENABLE();
	/* Configure A0 as analog input */
	GPIO_InitStructure.Pin = JS_X_Pin;			//Set A0 pin
	GPIO_InitStructure.Mode = GPIO_MODE_ANALOG;		//Set to Analog input
 8003126:	e88d 0048 	stmia.w	sp, {r3, r6}
	GPIO_InitStructure.Pull = GPIO_NOPULL ;			//No Pull up resister
 800312a:	9502      	str	r5, [sp, #8]
	HAL_GPIO_Init(JS_X_GPIO_Port, &GPIO_InitStructure);
 800312c:	f7fd fc04 	bl	8000938 <HAL_GPIO_Init>

	/* Configure A0 as analog input */
	GPIO_InitStructure.Pin = JS_Y_Pin;			//Set A0 pin
 8003130:	2302      	movs	r3, #2
	GPIO_InitStructure.Mode = GPIO_MODE_ANALOG;		//Set to Analog input
	GPIO_InitStructure.Pull = GPIO_NOPULL ;			//No Pull up resister
	HAL_GPIO_Init(JS_Y_GPIO_Port, &GPIO_InitStructure);
 8003132:	4669      	mov	r1, sp
 8003134:	4620      	mov	r0, r4
	GPIO_InitStructure.Pull = GPIO_NOPULL ;			//No Pull up resister
	HAL_GPIO_Init(JS_X_GPIO_Port, &GPIO_InitStructure);

	/* Configure A0 as analog input */
	GPIO_InitStructure.Pin = JS_Y_Pin;			//Set A0 pin
	GPIO_InitStructure.Mode = GPIO_MODE_ANALOG;		//Set to Analog input
 8003136:	e88d 0048 	stmia.w	sp, {r3, r6}
	GPIO_InitStructure.Pull = GPIO_NOPULL ;			//No Pull up resister
 800313a:	9502      	str	r5, [sp, #8]
	HAL_GPIO_Init(JS_Y_GPIO_Port, &GPIO_InitStructure);
 800313c:	f7fd fbfc 	bl	8000938 <HAL_GPIO_Init>

}
 8003140:	b004      	add	sp, #16
 8003142:	bd70      	pop	{r4, r5, r6, pc}
 8003144:	40010c00 	.word	0x40010c00

08003148 <joystick_read>:
  * @param
  *	ADC_HandleTypeDef   adc handler to be used
  *	uint8_t				the channel number that you want
  * @retval uint16_t converted adc value
  */
uint16_t joystick_read(ADC_HandleTypeDef *adc, uint8_t chan){
 8003148:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800314a:	4606      	mov	r6, r0
 800314c:	460d      	mov	r5, r1
	uint16_t adcValues[2]={0x00, 0x00};
 800314e:	2400      	movs	r4, #0
 8003150:	f8ad 4004 	strh.w	r4, [sp, #4]
 8003154:	f8ad 4006 	strh.w	r4, [sp, #6]
	uint8_t numConversions = 2;

	for(int i=0; i<numConversions; i++){
		HAL_ADC_Start(adc);
 8003158:	4630      	mov	r0, r6
 800315a:	f7fd fa59 	bl	8000610 <HAL_ADC_Start>
		while(HAL_ADC_PollForConversion(adc, 10)!=HAL_OK){
 800315e:	210a      	movs	r1, #10
 8003160:	4630      	mov	r0, r6
 8003162:	f7fd f83b 	bl	80001dc <HAL_ADC_PollForConversion>
 8003166:	2800      	cmp	r0, #0
 8003168:	d1f9      	bne.n	800315e <joystick_read+0x16>
			;//Do nothing
		}
		//Conversion done
		adcValues[i]=(uint16_t)(HAL_ADC_GetValue(adc));
 800316a:	4630      	mov	r0, r6
 800316c:	f7fd f8dc 	bl	8000328 <HAL_ADC_GetValue>
 8003170:	ab01      	add	r3, sp, #4
 8003172:	f823 0014 	strh.w	r0, [r3, r4, lsl #1]
  */
uint16_t joystick_read(ADC_HandleTypeDef *adc, uint8_t chan){
	uint16_t adcValues[2]={0x00, 0x00};
	uint8_t numConversions = 2;

	for(int i=0; i<numConversions; i++){
 8003176:	3401      	adds	r4, #1
 8003178:	2c02      	cmp	r4, #2
 800317a:	d1ed      	bne.n	8003158 <joystick_read+0x10>
		}
		//Conversion done
		adcValues[i]=(uint16_t)(HAL_ADC_GetValue(adc));
	}

	return adcValues[chan];
 800317c:	ab02      	add	r3, sp, #8
 800317e:	eb03 0545 	add.w	r5, r3, r5, lsl #1

}
 8003182:	f835 0c04 	ldrh.w	r0, [r5, #-4]
 8003186:	b002      	add	sp, #8
 8003188:	bd70      	pop	{r4, r5, r6, pc}
	...

0800318c <main>:
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

int main(void)
{
 800318c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003190:	b08c      	sub	sp, #48	; 0x30
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003192:	f7fc fff5 	bl	8000180 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003196:	f7ff ff1c 	bl	8002fd2 <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800319a:	4b65      	ldr	r3, [pc, #404]	; (8003330 <main+0x1a4>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800319c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80031a0:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80031a2:	4864      	ldr	r0, [pc, #400]	; (8003334 <main+0x1a8>)
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80031a4:	f042 0210 	orr.w	r2, r2, #16
 80031a8:	619a      	str	r2, [r3, #24]
 80031aa:	699a      	ldr	r2, [r3, #24]
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, NRF_CE_Pin|NRF_CSN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031ac:	2501      	movs	r5, #1
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80031ae:	f002 0210 	and.w	r2, r2, #16
 80031b2:	9203      	str	r2, [sp, #12]
 80031b4:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80031b6:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, NRF_CE_Pin|NRF_CSN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031b8:	2702      	movs	r7, #2

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80031ba:	f042 0220 	orr.w	r2, r2, #32
 80031be:	619a      	str	r2, [r3, #24]
 80031c0:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : NRF_CE_Pin NRF_CSN_Pin */
  GPIO_InitStruct.Pin = NRF_CE_Pin|NRF_CSN_Pin;
 80031c2:	260a      	movs	r6, #10

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80031c4:	f002 0220 	and.w	r2, r2, #32
 80031c8:	9204      	str	r2, [sp, #16]
 80031ca:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80031cc:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ce:	2400      	movs	r4, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80031d0:	f042 0204 	orr.w	r2, r2, #4
 80031d4:	619a      	str	r2, [r3, #24]
 80031d6:	699a      	ldr	r2, [r3, #24]
 80031d8:	f002 0204 	and.w	r2, r2, #4
 80031dc:	9205      	str	r2, [sp, #20]
 80031de:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80031e0:	699a      	ldr	r2, [r3, #24]
 80031e2:	f042 0208 	orr.w	r2, r2, #8
 80031e6:	619a      	str	r2, [r3, #24]
 80031e8:	699b      	ldr	r3, [r3, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80031ea:	2200      	movs	r2, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80031ec:	f003 0308 	and.w	r3, r3, #8
 80031f0:	9306      	str	r3, [sp, #24]
 80031f2:	9b06      	ldr	r3, [sp, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80031f4:	f7fd fc78 	bl	8000ae8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, NRF_CE_Pin|NRF_CSN_Pin, GPIO_PIN_RESET);
 80031f8:	2200      	movs	r2, #0
 80031fa:	210a      	movs	r1, #10
 80031fc:	484e      	ldr	r0, [pc, #312]	; (8003338 <main+0x1ac>)
 80031fe:	f7fd fc73 	bl	8000ae8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8003202:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8003206:	a907      	add	r1, sp, #28
 8003208:	484a      	ldr	r0, [pc, #296]	; (8003334 <main+0x1a8>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, NRF_CE_Pin|NRF_CSN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800320a:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800320c:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800320e:	970a      	str	r7, [sp, #40]	; 0x28
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8003210:	f7fd fb92 	bl	8000938 <HAL_GPIO_Init>

  /*Configure GPIO pins : NRF_CE_Pin NRF_CSN_Pin */
  GPIO_InitStruct.Pin = NRF_CE_Pin|NRF_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003214:	a907      	add	r1, sp, #28
 8003216:	4848      	ldr	r0, [pc, #288]	; (8003338 <main+0x1ac>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : NRF_CE_Pin NRF_CSN_Pin */
  GPIO_InitStruct.Pin = NRF_CE_Pin|NRF_CSN_Pin;
 8003218:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800321a:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800321c:	950a      	str	r5, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800321e:	f7fd fb8b 	bl	8000938 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003222:	2304      	movs	r3, #4
 8003224:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003226:	4b45      	ldr	r3, [pc, #276]	; (800333c <main+0x1b0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003228:	a907      	add	r1, sp, #28
 800322a:	4843      	ldr	r0, [pc, #268]	; (8003338 <main+0x1ac>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800322c:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800322e:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003230:	f7fd fb82 	bl	8000938 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 10, 0);
 8003234:	4622      	mov	r2, r4
 8003236:	4631      	mov	r1, r6
 8003238:	2008      	movs	r0, #8
 800323a:	f7fd fb15 	bl	8000868 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800323e:	2008      	movs	r0, #8
 8003240:	f7fd fb46 	bl	80008d0 <HAL_NVIC_EnableIRQ>

/* SPI1 init function */
static void MX_SPI1_Init(void)
{

  hspi1.Instance = SPI1;
 8003244:	483e      	ldr	r0, [pc, #248]	; (8003340 <main+0x1b4>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003246:	4a3f      	ldr	r2, [pc, #252]	; (8003344 <main+0x1b8>)
 8003248:	f44f 7382 	mov.w	r3, #260	; 0x104
 800324c:	e880 000c 	stmia.w	r0, {r2, r3}
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8003250:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003254:	6183      	str	r3, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8003256:	2328      	movs	r3, #40	; 0x28
static void MX_SPI1_Init(void)
{

  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003258:	6084      	str	r4, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800325a:	60c4      	str	r4, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800325c:	6104      	str	r4, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800325e:	6144      	str	r4, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8003260:	61c3      	str	r3, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003262:	6204      	str	r4, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003264:	6244      	str	r4, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003266:	6284      	str	r4, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003268:	62c6      	str	r6, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800326a:	f7fe fe61 	bl	8001f30 <HAL_SPI_Init>
 800326e:	4680      	mov	r8, r0
 8003270:	b100      	cbz	r0, 8003274 <main+0xe8>
 8003272:	e7fe      	b.n	8003272 <main+0xe6>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_SPI1_Init();
  MX_USB_DEVICE_Init();
 8003274:	f000 fa18 	bl	80036a8 <MX_USB_DEVICE_Init>

  ADC_ChannelConfTypeDef sConfig;

    /**Common config 
    */
  hadc1.Instance = ADC1;
 8003278:	4c33      	ldr	r4, [pc, #204]	; (8003348 <main+0x1bc>)
 800327a:	4b34      	ldr	r3, [pc, #208]	; (800334c <main+0x1c0>)
  hadc1.Init.DiscontinuousConvMode = ENABLE;
  hadc1.Init.NbrOfDiscConversion = 1;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 2;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800327c:	4620      	mov	r0, r4

  ADC_ChannelConfTypeDef sConfig;

    /**Common config 
    */
  hadc1.Instance = ADC1;
 800327e:	6023      	str	r3, [r4, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8003280:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003284:	60a3      	str	r3, [r4, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = ENABLE;
  hadc1.Init.NbrOfDiscConversion = 1;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003286:	f44f 2360 	mov.w	r3, #917504	; 0xe0000

    /**Common config 
    */
  hadc1.Instance = ADC1;
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
 800328a:	f8c4 800c 	str.w	r8, [r4, #12]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 800328e:	6165      	str	r5, [r4, #20]
  hadc1.Init.NbrOfDiscConversion = 1;
 8003290:	61a5      	str	r5, [r4, #24]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003292:	61e3      	str	r3, [r4, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003294:	f8c4 8004 	str.w	r8, [r4, #4]
  hadc1.Init.NbrOfConversion = 2;
 8003298:	6127      	str	r7, [r4, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800329a:	f7fd fa3d 	bl	8000718 <HAL_ADC_Init>
 800329e:	b100      	cbz	r0, 80032a2 <main+0x116>
 80032a0:	e7fe      	b.n	80032a0 <main+0x114>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_8;
 80032a2:	2308      	movs	r3, #8
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80032a4:	9009      	str	r0, [sp, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80032a6:	a907      	add	r1, sp, #28
 80032a8:	4620      	mov	r0, r4
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_8;
 80032aa:	9307      	str	r3, [sp, #28]
  sConfig.Rank = 1;
 80032ac:	9508      	str	r5, [sp, #32]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80032ae:	f7fd f8b7 	bl	8000420 <HAL_ADC_ConfigChannel>
 80032b2:	b100      	cbz	r0, 80032b6 <main+0x12a>
 80032b4:	e7fe      	b.n	80032b4 <main+0x128>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_9;
 80032b6:	2309      	movs	r3, #9
  sConfig.Rank = 2;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80032b8:	4620      	mov	r0, r4
 80032ba:	a907      	add	r1, sp, #28
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_9;
 80032bc:	9307      	str	r3, [sp, #28]
  sConfig.Rank = 2;
 80032be:	9708      	str	r7, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80032c0:	f7fd f8ae 	bl	8000420 <HAL_ADC_ConfigChannel>
 80032c4:	4604      	mov	r4, r0
 80032c6:	b100      	cbz	r0, 80032ca <main+0x13e>
 80032c8:	e7fe      	b.n	80032c8 <main+0x13c>

  /* USER CODE BEGIN 2 */



  uint8_t buff[3] = {0xFF, 0xFF, 0xff};
 80032ca:	4b21      	ldr	r3, [pc, #132]	; (8003350 <main+0x1c4>)
  uint8_t on = 0xaa;
  uint8_t off = 0x66;

  //Clear the receive buffer, will be updated in the interrupt handler

  memset(str, '\0', sizeof(str));
 80032cc:	4601      	mov	r1, r0

  /* USER CODE BEGIN 2 */



  uint8_t buff[3] = {0xFF, 0xFF, 0xff};
 80032ce:	881a      	ldrh	r2, [r3, #0]
 80032d0:	789b      	ldrb	r3, [r3, #2]
 80032d2:	f8ad 2008 	strh.w	r2, [sp, #8]
  uint8_t rxBuff[2] = {0x00, 0x00};
 80032d6:	f88d 0004 	strb.w	r0, [sp, #4]
  uint8_t on = 0xaa;
  uint8_t off = 0x66;

  //Clear the receive buffer, will be updated in the interrupt handler

  memset(str, '\0', sizeof(str));
 80032da:	2214      	movs	r2, #20
  /* USER CODE BEGIN 2 */



  uint8_t buff[3] = {0xFF, 0xFF, 0xff};
  uint8_t rxBuff[2] = {0x00, 0x00};
 80032dc:	f88d 0005 	strb.w	r0, [sp, #5]
  uint8_t on = 0xaa;
  uint8_t off = 0x66;

  //Clear the receive buffer, will be updated in the interrupt handler

  memset(str, '\0', sizeof(str));
 80032e0:	a807      	add	r0, sp, #28

  /* USER CODE BEGIN 2 */



  uint8_t buff[3] = {0xFF, 0xFF, 0xff};
 80032e2:	f88d 300a 	strb.w	r3, [sp, #10]
  uint8_t on = 0xaa;
  uint8_t off = 0x66;

  //Clear the receive buffer, will be updated in the interrupt handler

  memset(str, '\0', sizeof(str));
 80032e6:	f000 fc13 	bl	8003b10 <memset>
  HAL_StatusTypeDef status;
  HAL_Delay(3000);	//Wait for the user to open comm port
 80032ea:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80032ee:	f7fc ff67 	bl	80001c0 <HAL_Delay>

  #ifdef TX
  //Usually sets itself up except for pwr_up bit
  //Use powr_up pin wen sending data
  joystick_init();
 80032f2:	f7ff ff11 	bl	8003118 <joystick_init>
  HAL_Delay(10);
 80032f6:	4630      	mov	r0, r6
 80032f8:	f7fc ff62 	bl	80001c0 <HAL_Delay>
  int count = 0;
 80032fc:	4626      	mov	r6, r4

  while (1)
  {

#ifdef TX
	  if(count){
 80032fe:	b126      	cbz	r6, 800330a <main+0x17e>
		  count=0;
		  buff[0]=off;
 8003300:	2366      	movs	r3, #102	; 0x66
 8003302:	f88d 3008 	strb.w	r3, [sp, #8]
  while (1)
  {

#ifdef TX
	  if(count){
		  count=0;
 8003306:	2600      	movs	r6, #0
 8003308:	e003      	b.n	8003312 <main+0x186>
		  buff[0]=off;
	  }else{
		  count++;
		  buff[0]=on;
 800330a:	23aa      	movs	r3, #170	; 0xaa
 800330c:	f88d 3008 	strb.w	r3, [sp, #8]
#ifdef TX
	  if(count){
		  count=0;
		  buff[0]=off;
	  }else{
		  count++;
 8003310:	2601      	movs	r6, #1
		  buff[0]=on;

	  }
	  status = tx_send(buff, 1);
 8003312:	2101      	movs	r1, #1
 8003314:	a802      	add	r0, sp, #8
 8003316:	f7ff febf 	bl	8003098 <tx_send>
	  switch(status){
 800331a:	2801      	cmp	r0, #1
 800331c:	d006      	beq.n	800332c <main+0x1a0>
 800331e:	d303      	bcc.n	8003328 <main+0x19c>
 8003320:	2802      	cmp	r0, #2
 8003322:	d11d      	bne.n	8003360 <main+0x1d4>
	  case HAL_OK:
		  strcpy(str, "TX_SEND: Success \n\r");
		  break;
	  case HAL_BUSY:
		  strcpy(str, "TX_SEND: Busy\n\r");
 8003324:	490b      	ldr	r1, [pc, #44]	; (8003354 <main+0x1c8>)
 8003326:	e01c      	b.n	8003362 <main+0x1d6>

	  }
	  status = tx_send(buff, 1);
	  switch(status){
	  case HAL_OK:
		  strcpy(str, "TX_SEND: Success \n\r");
 8003328:	490b      	ldr	r1, [pc, #44]	; (8003358 <main+0x1cc>)
 800332a:	e01a      	b.n	8003362 <main+0x1d6>
		  break;
	  case HAL_BUSY:
		  strcpy(str, "TX_SEND: Busy\n\r");
		  break;
	  case HAL_ERROR:
		  strcpy(str, "TX_SEND: Error\n\r");
 800332c:	490b      	ldr	r1, [pc, #44]	; (800335c <main+0x1d0>)
 800332e:	e018      	b.n	8003362 <main+0x1d6>
 8003330:	40021000 	.word	0x40021000
 8003334:	40011000 	.word	0x40011000
 8003338:	40010800 	.word	0x40010800
 800333c:	10210000 	.word	0x10210000
 8003340:	2000043c 	.word	0x2000043c
 8003344:	40013000 	.word	0x40013000
 8003348:	2000040c 	.word	0x2000040c
 800334c:	40012400 	.word	0x40012400
 8003350:	080043e4 	.word	0x080043e4
 8003354:	08004417 	.word	0x08004417
 8003358:	08004403 	.word	0x08004403
 800335c:	08004427 	.word	0x08004427
		  break;
	  default:
		  strcpy(str, "Sad face =( \n\r");
 8003360:	4958      	ldr	r1, [pc, #352]	; (80034c4 <main+0x338>)
 8003362:	a807      	add	r0, sp, #28
 8003364:	f000 fcba 	bl	8003cdc <strcpy>
		  break;
	  }
	  //Send Debug message
	  CDC_Transmit_FS(str, strlen(str));
 8003368:	a807      	add	r0, sp, #28
 800336a:	f7fc feef 	bl	800014c <strlen>
 800336e:	b281      	uxth	r1, r0
 8003370:	a807      	add	r0, sp, #28
 8003372:	f000 f9db 	bl	800372c <CDC_Transmit_FS>
	  HAL_Delay(20);

	  //Check if max retransmits bit is set, means failed to send
	  	  if(((0x01)&(rxBuff[0]>>MAX_RT))>0){
 8003376:	ad0c      	add	r5, sp, #48	; 0x30
		  strcpy(str, "Sad face =( \n\r");
		  break;
	  }
	  //Send Debug message
	  CDC_Transmit_FS(str, strlen(str));
	  HAL_Delay(20);
 8003378:	2014      	movs	r0, #20
 800337a:	f7fc ff21 	bl	80001c0 <HAL_Delay>

	  //Check if max retransmits bit is set, means failed to send
	  	  if(((0x01)&(rxBuff[0]>>MAX_RT))>0){
 800337e:	f815 3d2c 	ldrb.w	r3, [r5, #-44]!
 8003382:	06db      	lsls	r3, r3, #27
 8003384:	d542      	bpl.n	800340c <main+0x280>
	  		  //Maximum retransmits occured, failed to send
	  		  //Flush the TX_ fifo and then clear the bit
	  		  clear(buff);
	  		  clear (rxBuff);
	  		  buff[0] = (uint8_t)FLUSH_TX;
 8003386:	23e1      	movs	r3, #225	; 0xe1
	  		  send_receive_spi(buff, rxBuff, 1);
 8003388:	2201      	movs	r2, #1
 800338a:	4629      	mov	r1, r5
 800338c:	a802      	add	r0, sp, #8

	  //Check if max retransmits bit is set, means failed to send
	  	  if(((0x01)&(rxBuff[0]>>MAX_RT))>0){
	  		  //Maximum retransmits occured, failed to send
	  		  //Flush the TX_ fifo and then clear the bit
	  		  clear(buff);
 800338e:	f8ad 4008 	strh.w	r4, [sp, #8]
 8003392:	f88d 400a 	strb.w	r4, [sp, #10]
	  		  clear (rxBuff);
	  		  buff[0] = (uint8_t)FLUSH_TX;
 8003396:	f88d 3008 	strb.w	r3, [sp, #8]
	  //Check if max retransmits bit is set, means failed to send
	  	  if(((0x01)&(rxBuff[0]>>MAX_RT))>0){
	  		  //Maximum retransmits occured, failed to send
	  		  //Flush the TX_ fifo and then clear the bit
	  		  clear(buff);
	  		  clear (rxBuff);
 800339a:	f8ad 4004 	strh.w	r4, [sp, #4]
	  		  buff[0] = (uint8_t)FLUSH_TX;
	  		  send_receive_spi(buff, rxBuff, 1);
 800339e:	f7ff fe5b 	bl	8003058 <send_receive_spi>

	  		  //Now clear the bit
	  		  clear(buff);
	  		  clear (rxBuff);
	  		  buff[0] = (uint8_t)(W_MASK|STATUS_REG);
 80033a2:	2327      	movs	r3, #39	; 0x27
 80033a4:	f88d 3008 	strb.w	r3, [sp, #8]
	  		  buff[1] = (uint8_t)(1<<MAX_RT);
	  		  send_receive_spi(buff, rxBuff, 2);
 80033a8:	2202      	movs	r2, #2

	  		  //Now clear the bit
	  		  clear(buff);
	  		  clear (rxBuff);
	  		  buff[0] = (uint8_t)(W_MASK|STATUS_REG);
	  		  buff[1] = (uint8_t)(1<<MAX_RT);
 80033aa:	2310      	movs	r3, #16
	  		  send_receive_spi(buff, rxBuff, 2);
 80033ac:	4629      	mov	r1, r5
 80033ae:	a802      	add	r0, sp, #8

	  		  //Now clear the bit
	  		  clear(buff);
	  		  clear (rxBuff);
	  		  buff[0] = (uint8_t)(W_MASK|STATUS_REG);
	  		  buff[1] = (uint8_t)(1<<MAX_RT);
 80033b0:	f88d 3009 	strb.w	r3, [sp, #9]
	  		  clear (rxBuff);
	  		  buff[0] = (uint8_t)FLUSH_TX;
	  		  send_receive_spi(buff, rxBuff, 1);

	  		  //Now clear the bit
	  		  clear(buff);
 80033b4:	f88d 400a 	strb.w	r4, [sp, #10]
	  		  clear (rxBuff);
 80033b8:	f8ad 4004 	strh.w	r4, [sp, #4]
	  		  buff[0] = (uint8_t)(W_MASK|STATUS_REG);
	  		  buff[1] = (uint8_t)(1<<MAX_RT);
	  		  send_receive_spi(buff, rxBuff, 2);
 80033bc:	f7ff fe4c 	bl	8003058 <send_receive_spi>

		  	  clear(rxBuff);
		  	  clear(buff);
		  	  buff[0] = (uint8_t)(R_MASK|CONFIG_REG);
		  	  buff[1]= (uint8_t)NOP;
 80033c0:	23ff      	movs	r3, #255	; 0xff

		  	  if(send_receive_spi(buff, rxBuff, 2)==HAL_OK){
 80033c2:	4629      	mov	r1, r5
 80033c4:	2202      	movs	r2, #2
 80033c6:	a802      	add	r0, sp, #8
	  		  buff[0] = (uint8_t)(W_MASK|STATUS_REG);
	  		  buff[1] = (uint8_t)(1<<MAX_RT);
	  		  send_receive_spi(buff, rxBuff, 2);

		  	  clear(rxBuff);
		  	  clear(buff);
 80033c8:	f8ad 4008 	strh.w	r4, [sp, #8]
	  		  clear (rxBuff);
	  		  buff[0] = (uint8_t)(W_MASK|STATUS_REG);
	  		  buff[1] = (uint8_t)(1<<MAX_RT);
	  		  send_receive_spi(buff, rxBuff, 2);

		  	  clear(rxBuff);
 80033cc:	f8ad 4004 	strh.w	r4, [sp, #4]
		  	  clear(buff);
 80033d0:	f88d 400a 	strb.w	r4, [sp, #10]
		  	  buff[0] = (uint8_t)(R_MASK|CONFIG_REG);
		  	  buff[1]= (uint8_t)NOP;
 80033d4:	f88d 3009 	strb.w	r3, [sp, #9]

		  	  if(send_receive_spi(buff, rxBuff, 2)==HAL_OK){
 80033d8:	f7ff fe3e 	bl	8003058 <send_receive_spi>
 80033dc:	4601      	mov	r1, r0
 80033de:	b9a8      	cbnz	r0, 800340c <main+0x280>
		  		  //print out the buff contents
		  		  memset(str, '\0', sizeof(str));
 80033e0:	2214      	movs	r2, #20
 80033e2:	a807      	add	r0, sp, #28
 80033e4:	f000 fb94 	bl	8003b10 <memset>
		  		  sprintf(str, ">>STAT: %02x CONF: %02x\r\n", rxBuff[0], rxBuff[1]);
 80033e8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80033ec:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80033f0:	4935      	ldr	r1, [pc, #212]	; (80034c8 <main+0x33c>)
 80033f2:	a807      	add	r0, sp, #28
 80033f4:	f000 fc4e 	bl	8003c94 <siprintf>
		  		  CDC_Transmit_FS(str, strlen(str));
 80033f8:	a807      	add	r0, sp, #28
 80033fa:	f7fc fea7 	bl	800014c <strlen>
 80033fe:	b281      	uxth	r1, r0
 8003400:	a807      	add	r0, sp, #28
 8003402:	f000 f993 	bl	800372c <CDC_Transmit_FS>
		  		  HAL_Delay(20);
 8003406:	2014      	movs	r0, #20
 8003408:	f7fc feda 	bl	80001c0 <HAL_Delay>
		  	  }

	  	  }

	  	  HAL_Delay(1);
 800340c:	2001      	movs	r0, #1
 800340e:	f7fc fed7 	bl	80001c0 <HAL_Delay>

	  	  xValue = joystick_read(&hadc1, JS_X);
 8003412:	2100      	movs	r1, #0
 8003414:	482d      	ldr	r0, [pc, #180]	; (80034cc <main+0x340>)
 8003416:	f7ff fe97 	bl	8003148 <joystick_read>
	  	  yValue = joystick_read(&hadc1, JS_Y);
 800341a:	2101      	movs	r1, #1

	  	  }

	  	  HAL_Delay(1);

	  	  xValue = joystick_read(&hadc1, JS_X);
 800341c:	4607      	mov	r7, r0
	  	  yValue = joystick_read(&hadc1, JS_Y);
 800341e:	482b      	ldr	r0, [pc, #172]	; (80034cc <main+0x340>)
 8003420:	f7ff fe92 	bl	8003148 <joystick_read>
 8003424:	4680      	mov	r8, r0
	  	  memset(str, '\0', sizeof(str));
 8003426:	2214      	movs	r2, #20
 8003428:	2100      	movs	r1, #0
 800342a:	a807      	add	r0, sp, #28
 800342c:	f000 fb70 	bl	8003b10 <memset>
	  	  sprintf(str, "<->X: 0x%04x <->Y: 0x%04x\n\r", xValue, yValue);
 8003430:	4643      	mov	r3, r8
 8003432:	463a      	mov	r2, r7
 8003434:	4926      	ldr	r1, [pc, #152]	; (80034d0 <main+0x344>)
 8003436:	a807      	add	r0, sp, #28
 8003438:	f000 fc2c 	bl	8003c94 <siprintf>
	  	  CDC_Transmit_FS(str, strlen(str));
 800343c:	a807      	add	r0, sp, #28
 800343e:	f7fc fe85 	bl	800014c <strlen>
 8003442:	b281      	uxth	r1, r0
 8003444:	a807      	add	r0, sp, #28
 8003446:	f000 f971 	bl	800372c <CDC_Transmit_FS>
	  	  HAL_Delay(20);
 800344a:	2014      	movs	r0, #20
 800344c:	f7fc feb8 	bl	80001c0 <HAL_Delay>

	  //Check the status register and the config register
	  clear(rxBuff);
	  clear(buff);
	  buff[0] = (uint8_t)(R_MASK|CONFIG_REG);
	  buff[1]= (uint8_t)NOP;
 8003450:	23ff      	movs	r3, #255	; 0xff

	  if(send_receive_spi(buff, rxBuff, 2)==HAL_OK){
 8003452:	4629      	mov	r1, r5

#endif


	  //Check the status register and the config register
	  clear(rxBuff);
 8003454:	802c      	strh	r4, [r5, #0]
	  clear(buff);
	  buff[0] = (uint8_t)(R_MASK|CONFIG_REG);
	  buff[1]= (uint8_t)NOP;

	  if(send_receive_spi(buff, rxBuff, 2)==HAL_OK){
 8003456:	2202      	movs	r2, #2
 8003458:	a802      	add	r0, sp, #8
#endif


	  //Check the status register and the config register
	  clear(rxBuff);
	  clear(buff);
 800345a:	f8ad 4008 	strh.w	r4, [sp, #8]
 800345e:	f88d 400a 	strb.w	r4, [sp, #10]
	  buff[0] = (uint8_t)(R_MASK|CONFIG_REG);
	  buff[1]= (uint8_t)NOP;
 8003462:	f88d 3009 	strb.w	r3, [sp, #9]

	  if(send_receive_spi(buff, rxBuff, 2)==HAL_OK){
 8003466:	f7ff fdf7 	bl	8003058 <send_receive_spi>
 800346a:	4601      	mov	r1, r0
 800346c:	b9a8      	cbnz	r0, 800349a <main+0x30e>
		  //print out the buff contents
		  memset(str, '\0', sizeof(str));
 800346e:	2214      	movs	r2, #20
 8003470:	a807      	add	r0, sp, #28
 8003472:	f000 fb4d 	bl	8003b10 <memset>
		  sprintf(str, "STAT: %02x CONF: %02x\r\n", rxBuff[0], rxBuff[1]);
 8003476:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800347a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800347e:	4915      	ldr	r1, [pc, #84]	; (80034d4 <main+0x348>)
 8003480:	a807      	add	r0, sp, #28
 8003482:	f000 fc07 	bl	8003c94 <siprintf>
		  CDC_Transmit_FS(str, strlen(str));
 8003486:	a807      	add	r0, sp, #28
 8003488:	f7fc fe60 	bl	800014c <strlen>
 800348c:	b281      	uxth	r1, r0
 800348e:	a807      	add	r0, sp, #28
 8003490:	f000 f94c 	bl	800372c <CDC_Transmit_FS>
		  HAL_Delay(20);
 8003494:	2014      	movs	r0, #20
 8003496:	f7fc fe93 	bl	80001c0 <HAL_Delay>
	  }

	  /************Check if the intterupt has been triggered******/
	  if(irq_pin==1){
 800349a:	4b0f      	ldr	r3, [pc, #60]	; (80034d8 <main+0x34c>)
 800349c:	781a      	ldrb	r2, [r3, #0]
 800349e:	2a01      	cmp	r2, #1
 80034a0:	d108      	bne.n	80034b4 <main+0x328>
		  irq_pin =0;
		  CDC_Transmit_FS("Pressed\n\r", strlen("Pressed\n\r")+2);
 80034a2:	210b      	movs	r1, #11
 80034a4:	480d      	ldr	r0, [pc, #52]	; (80034dc <main+0x350>)
		  HAL_Delay(20);
	  }

	  /************Check if the intterupt has been triggered******/
	  if(irq_pin==1){
		  irq_pin =0;
 80034a6:	701c      	strb	r4, [r3, #0]
		  CDC_Transmit_FS("Pressed\n\r", strlen("Pressed\n\r")+2);
 80034a8:	f000 f940 	bl	800372c <CDC_Transmit_FS>
		  HAL_Delay(20);
 80034ac:	2014      	movs	r0, #20
 80034ae:	f7fc fe87 	bl	80001c0 <HAL_Delay>
 80034b2:	e003      	b.n	80034bc <main+0x330>

		  }

#endif
	  }else{
		  CDC_Transmit_FS("Not Pressed\n\r", strlen("Not Pressed\n\r")+2);
 80034b4:	210f      	movs	r1, #15
 80034b6:	480a      	ldr	r0, [pc, #40]	; (80034e0 <main+0x354>)
 80034b8:	f000 f938 	bl	800372c <CDC_Transmit_FS>
	  }

	  HAL_Delay(200);
 80034bc:	20c8      	movs	r0, #200	; 0xc8
 80034be:	f7fc fe7f 	bl	80001c0 <HAL_Delay>

  /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */

  }
 80034c2:	e71c      	b.n	80032fe <main+0x172>
 80034c4:	08004438 	.word	0x08004438
 80034c8:	08004447 	.word	0x08004447
 80034cc:	2000040c 	.word	0x2000040c
 80034d0:	08004461 	.word	0x08004461
 80034d4:	08004449 	.word	0x08004449
 80034d8:	200001df 	.word	0x200001df
 80034dc:	08004481 	.word	0x08004481
 80034e0:	0800447d 	.word	0x0800447d

080034e4 <_Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void _Error_Handler(char * file, int line)
{
 80034e4:	e7fe      	b.n	80034e4 <_Error_Handler>
	...

080034e8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80034e8:	4b20      	ldr	r3, [pc, #128]	; (800356c <HAL_MspInit+0x84>)
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80034ea:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80034ec:	699a      	ldr	r2, [r3, #24]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80034ee:	2003      	movs	r0, #3
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80034f0:	f042 0201 	orr.w	r2, r2, #1
 80034f4:	619a      	str	r2, [r3, #24]
 80034f6:	699b      	ldr	r3, [r3, #24]
 80034f8:	f003 0301 	and.w	r3, r3, #1
 80034fc:	9301      	str	r3, [sp, #4]
 80034fe:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003500:	f7fd f9a0 	bl	8000844 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8003504:	2200      	movs	r2, #0
 8003506:	4611      	mov	r1, r2
 8003508:	f06f 000b 	mvn.w	r0, #11
 800350c:	f7fd f9ac 	bl	8000868 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8003510:	2200      	movs	r2, #0
 8003512:	4611      	mov	r1, r2
 8003514:	f06f 000a 	mvn.w	r0, #10
 8003518:	f7fd f9a6 	bl	8000868 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800351c:	2200      	movs	r2, #0
 800351e:	4611      	mov	r1, r2
 8003520:	f06f 0009 	mvn.w	r0, #9
 8003524:	f7fd f9a0 	bl	8000868 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8003528:	2200      	movs	r2, #0
 800352a:	4611      	mov	r1, r2
 800352c:	f06f 0004 	mvn.w	r0, #4
 8003530:	f7fd f99a 	bl	8000868 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8003534:	2200      	movs	r2, #0
 8003536:	4611      	mov	r1, r2
 8003538:	f06f 0003 	mvn.w	r0, #3
 800353c:	f7fd f994 	bl	8000868 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8003540:	2200      	movs	r2, #0
 8003542:	4611      	mov	r1, r2
 8003544:	f06f 0001 	mvn.w	r0, #1
 8003548:	f7fd f98e 	bl	8000868 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800354c:	2200      	movs	r2, #0
 800354e:	4611      	mov	r1, r2
 8003550:	f04f 30ff 	mov.w	r0, #4294967295
 8003554:	f7fd f988 	bl	8000868 <HAL_NVIC_SetPriority>

    /**DISABLE: JTAG-DP Disabled and SW-DP Disabled 
    */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8003558:	4a05      	ldr	r2, [pc, #20]	; (8003570 <HAL_MspInit+0x88>)
 800355a:	6853      	ldr	r3, [r2, #4]
 800355c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003560:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003564:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003566:	b003      	add	sp, #12
 8003568:	f85d fb04 	ldr.w	pc, [sp], #4
 800356c:	40021000 	.word	0x40021000
 8003570:	40010000 	.word	0x40010000

08003574 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003574:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 8003576:	6802      	ldr	r2, [r0, #0]
 8003578:	4b0f      	ldr	r3, [pc, #60]	; (80035b8 <HAL_ADC_MspInit+0x44>)
 800357a:	429a      	cmp	r2, r3
 800357c:	d119      	bne.n	80035b2 <HAL_ADC_MspInit+0x3e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800357e:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 8003582:	699a      	ldr	r2, [r3, #24]
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = JS_X_Pin|JS_Y_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003584:	a902      	add	r1, sp, #8
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003586:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800358a:	619a      	str	r2, [r3, #24]
 800358c:	699b      	ldr	r3, [r3, #24]
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = JS_X_Pin|JS_Y_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800358e:	480b      	ldr	r0, [pc, #44]	; (80035bc <HAL_ADC_MspInit+0x48>)
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003590:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003594:	9301      	str	r3, [sp, #4]
 8003596:	9b01      	ldr	r3, [sp, #4]
  
    /**ADC1 GPIO Configuration    
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = JS_X_Pin|JS_Y_Pin;
 8003598:	2303      	movs	r3, #3
 800359a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800359c:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800359e:	f7fd f9cb 	bl	8000938 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80035a2:	2200      	movs	r2, #0
 80035a4:	2012      	movs	r0, #18
 80035a6:	4611      	mov	r1, r2
 80035a8:	f7fd f95e 	bl	8000868 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80035ac:	2012      	movs	r0, #18
 80035ae:	f7fd f98f 	bl	80008d0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80035b2:	b007      	add	sp, #28
 80035b4:	f85d fb04 	ldr.w	pc, [sp], #4
 80035b8:	40012400 	.word	0x40012400
 80035bc:	40010c00 	.word	0x40010c00

080035c0 <HAL_SPI_MspInit>:
  }

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80035c0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
 80035c2:	6802      	ldr	r2, [r0, #0]
 80035c4:	4b11      	ldr	r3, [pc, #68]	; (800360c <HAL_SPI_MspInit+0x4c>)
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d11d      	bne.n	8003606 <HAL_SPI_MspInit+0x46>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80035ca:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 80035ce:	699a      	ldr	r2, [r3, #24]
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035d0:	a902      	add	r1, sp, #8
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80035d2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80035d6:	619a      	str	r2, [r3, #24]
 80035d8:	699b      	ldr	r3, [r3, #24]
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035da:	480d      	ldr	r0, [pc, #52]	; (8003610 <HAL_SPI_MspInit+0x50>)
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80035dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035e0:	9301      	str	r3, [sp, #4]
 80035e2:	9b01      	ldr	r3, [sp, #4]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 80035e4:	23b0      	movs	r3, #176	; 0xb0
 80035e6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035e8:	2302      	movs	r3, #2
 80035ea:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80035ec:	2303      	movs	r3, #3
 80035ee:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035f0:	f7fd f9a2 	bl	8000938 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80035f4:	2340      	movs	r3, #64	; 0x40
 80035f6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035f8:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80035fa:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035fc:	4804      	ldr	r0, [pc, #16]	; (8003610 <HAL_SPI_MspInit+0x50>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80035fe:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003600:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003602:	f7fd f999 	bl	8000938 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003606:	b007      	add	sp, #28
 8003608:	f85d fb04 	ldr.w	pc, [sp], #4
 800360c:	40013000 	.word	0x40013000
 8003610:	40010800 	.word	0x40010800

08003614 <NMI_Handler>:
 8003614:	4770      	bx	lr

08003616 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8003616:	e7fe      	b.n	8003616 <HardFault_Handler>

08003618 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8003618:	e7fe      	b.n	8003618 <MemManage_Handler>

0800361a <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 800361a:	e7fe      	b.n	800361a <BusFault_Handler>

0800361c <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 800361c:	e7fe      	b.n	800361c <UsageFault_Handler>

0800361e <SVC_Handler>:
 800361e:	4770      	bx	lr

08003620 <DebugMon_Handler>:
 8003620:	4770      	bx	lr

08003622 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8003622:	4770      	bx	lr

08003624 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8003624:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003626:	f7fc fdbd 	bl	80001a4 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800362a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  HAL_SYSTICK_IRQHandler();
 800362e:	f7fd b97e 	b.w	800092e <HAL_SYSTICK_IRQHandler>
	...

08003634 <EXTI2_IRQHandler>:
* @brief This function handles EXTI line2 interrupt.
*/
void EXTI2_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI2_IRQn 0 */
	irq_pin=1;
 8003634:	4b02      	ldr	r3, [pc, #8]	; (8003640 <EXTI2_IRQHandler+0xc>)
 8003636:	2201      	movs	r2, #1
  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8003638:	2004      	movs	r0, #4
* @brief This function handles EXTI line2 interrupt.
*/
void EXTI2_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI2_IRQn 0 */
	irq_pin=1;
 800363a:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 800363c:	f7fd ba5a 	b.w	8000af4 <HAL_GPIO_EXTI_IRQHandler>
 8003640:	200001df 	.word	0x200001df

08003644 <ADC1_2_IRQHandler>:
void ADC1_2_IRQHandler(void)
{
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003644:	4801      	ldr	r0, [pc, #4]	; (800364c <ADC1_2_IRQHandler+0x8>)
 8003646:	f7fc be74 	b.w	8000332 <HAL_ADC_IRQHandler>
 800364a:	bf00      	nop
 800364c:	2000040c 	.word	0x2000040c

08003650 <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8003650:	4801      	ldr	r0, [pc, #4]	; (8003658 <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 8003652:	f7fd bb7f 	b.w	8000d54 <HAL_PCD_IRQHandler>
 8003656:	bf00      	nop
 8003658:	200006c0 	.word	0x200006c0

0800365c <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800365c:	4b0f      	ldr	r3, [pc, #60]	; (800369c <SystemInit+0x40>)
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	f042 0201 	orr.w	r2, r2, #1
 8003664:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8003666:	6859      	ldr	r1, [r3, #4]
 8003668:	4a0d      	ldr	r2, [pc, #52]	; (80036a0 <SystemInit+0x44>)
 800366a:	400a      	ands	r2, r1
 800366c:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8003674:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003678:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003680:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8003682:	685a      	ldr	r2, [r3, #4]
 8003684:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8003688:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 800368a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800368e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8003690:	4b04      	ldr	r3, [pc, #16]	; (80036a4 <SystemInit+0x48>)
 8003692:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003696:	609a      	str	r2, [r3, #8]
 8003698:	4770      	bx	lr
 800369a:	bf00      	nop
 800369c:	40021000 	.word	0x40021000
 80036a0:	f8ff0000 	.word	0xf8ff0000
 80036a4:	e000ed00 	.word	0xe000ed00

080036a8 <MX_USB_DEVICE_Init>:
/* USB Device Core handle declaration */
USBD_HandleTypeDef hUsbDeviceFS;

/* init function */				        
void MX_USB_DEVICE_Init(void)
{
 80036a8:	b510      	push	{r4, lr}
  /* Init Device Library,Add Supported Class and Start the library*/
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 80036aa:	4c09      	ldr	r4, [pc, #36]	; (80036d0 <MX_USB_DEVICE_Init+0x28>)
 80036ac:	2200      	movs	r2, #0
 80036ae:	4909      	ldr	r1, [pc, #36]	; (80036d4 <MX_USB_DEVICE_Init+0x2c>)
 80036b0:	4620      	mov	r0, r4
 80036b2:	f7ff f96f 	bl	8002994 <USBD_Init>

  USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC);
 80036b6:	4908      	ldr	r1, [pc, #32]	; (80036d8 <MX_USB_DEVICE_Init+0x30>)
 80036b8:	4620      	mov	r0, r4
 80036ba:	f7ff f980 	bl	80029be <USBD_RegisterClass>

  USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS);
 80036be:	4620      	mov	r0, r4
 80036c0:	4906      	ldr	r1, [pc, #24]	; (80036dc <MX_USB_DEVICE_Init+0x34>)
 80036c2:	f7ff f928 	bl	8002916 <USBD_CDC_RegisterInterface>

  USBD_Start(&hUsbDeviceFS);
 80036c6:	4620      	mov	r0, r4

}
 80036c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC);

  USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS);

  USBD_Start(&hUsbDeviceFS);
 80036cc:	f7ff b97e 	b.w	80029cc <USBD_Start>
 80036d0:	20000494 	.word	0x20000494
 80036d4:	20000124 	.word	0x20000124
 80036d8:	20000044 	.word	0x20000044
 80036dc:	20000114 	.word	0x20000114

080036e0 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */ 
  return (USBD_OK);
  /* USER CODE END 4 */ 
}
 80036e0:	2000      	movs	r0, #0
 80036e2:	4770      	bx	lr

080036e4 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 80036e4:	2000      	movs	r0, #0
 80036e6:	4770      	bx	lr

080036e8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS (uint8_t* Buf, uint32_t *Len)
{
 80036e8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80036ea:	4c05      	ldr	r4, [pc, #20]	; (8003700 <CDC_Receive_FS+0x18>)
 80036ec:	4601      	mov	r1, r0
 80036ee:	4620      	mov	r0, r4
 80036f0:	f7ff f920 	bl	8002934 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80036f4:	4620      	mov	r0, r4
 80036f6:	f7ff f93a 	bl	800296e <USBD_CDC_ReceivePacket>
  return (USBD_OK);
  /* USER CODE END 6 */ 
}
 80036fa:	2000      	movs	r0, #0
 80036fc:	bd10      	pop	{r4, pc}
 80036fe:	bf00      	nop
 8003700:	20000494 	.word	0x20000494

08003704 <CDC_Init_FS>:
  *         Initializes the CDC media low layer over the FS USB IP
  * @param  None
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{ 
 8003704:	b510      	push	{r4, lr}
  /* USER CODE BEGIN 3 */ 
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8003706:	4c06      	ldr	r4, [pc, #24]	; (8003720 <CDC_Init_FS+0x1c>)
 8003708:	2200      	movs	r2, #0
 800370a:	4906      	ldr	r1, [pc, #24]	; (8003724 <CDC_Init_FS+0x20>)
 800370c:	4620      	mov	r0, r4
 800370e:	f7ff f909 	bl	8002924 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8003712:	4905      	ldr	r1, [pc, #20]	; (8003728 <CDC_Init_FS+0x24>)
 8003714:	4620      	mov	r0, r4
 8003716:	f7ff f90d 	bl	8002934 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
  /* USER CODE END 3 */ 
}
 800371a:	2000      	movs	r0, #0
 800371c:	bd10      	pop	{r4, pc}
 800371e:	bf00      	nop
 8003720:	20000494 	.word	0x20000494
 8003724:	200006bc 	.word	0x200006bc
 8003728:	200006b8 	.word	0x200006b8

0800372c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be send
  * @param  Len: Number of data to be send (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800372c:	b510      	push	{r4, lr}
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */ 
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800372e:	4c09      	ldr	r4, [pc, #36]	; (8003754 <CDC_Transmit_FS+0x28>)
  * @param  Buf: Buffer of data to be send
  * @param  Len: Number of data to be send (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8003730:	460a      	mov	r2, r1
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */ 
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8003732:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
  if (hcdc->TxState != 0){
 8003736:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800373a:	b943      	cbnz	r3, 800374e <CDC_Transmit_FS+0x22>
    return USBD_BUSY;
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800373c:	4601      	mov	r1, r0
 800373e:	4620      	mov	r0, r4
 8003740:	f7ff f8f0 	bl	8002924 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8003744:	4620      	mov	r0, r4
  /* USER CODE END 7 */ 
  return result;
}
 8003746:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
  if (hcdc->TxState != 0){
    return USBD_BUSY;
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800374a:	f7ff b8f9 	b.w	8002940 <USBD_CDC_TransmitPacket>
  /* USER CODE END 7 */ 
  return result;
}
 800374e:	2001      	movs	r0, #1
 8003750:	bd10      	pop	{r4, pc}
 8003752:	bf00      	nop
 8003754:	20000494 	.word	0x20000494

08003758 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8003758:	b507      	push	{r0, r1, r2, lr}
  if(pcdHandle->Instance==USB)
 800375a:	4b0d      	ldr	r3, [pc, #52]	; (8003790 <HAL_PCD_MspInit+0x38>)
 800375c:	6802      	ldr	r2, [r0, #0]
 800375e:	429a      	cmp	r2, r3
 8003760:	d112      	bne.n	8003788 <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8003762:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8003766:	69da      	ldr	r2, [r3, #28]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8003768:	2014      	movs	r0, #20
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800376a:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800376e:	61da      	str	r2, [r3, #28]
 8003770:	69db      	ldr	r3, [r3, #28]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8003772:	2200      	movs	r2, #0
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8003774:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003778:	9301      	str	r3, [sp, #4]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800377a:	4611      	mov	r1, r2
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800377c:	9b01      	ldr	r3, [sp, #4]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800377e:	f7fd f873 	bl	8000868 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8003782:	2014      	movs	r0, #20
 8003784:	f7fd f8a4 	bl	80008d0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8003788:	b003      	add	sp, #12
 800378a:	f85d fb04 	ldr.w	pc, [sp], #4
 800378e:	bf00      	nop
 8003790:	40005c00 	.word	0x40005c00

08003794 <HAL_PCD_SetupStageCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8003794:	f500 717b 	add.w	r1, r0, #1004	; 0x3ec
 8003798:	f8d0 041c 	ldr.w	r0, [r0, #1052]	; 0x41c
 800379c:	f7ff b92d 	b.w	80029fa <USBD_LL_SetupStage>

080037a0 <HAL_PCD_DataOutStageCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80037a0:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 80037a4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80037a8:	f8d0 041c 	ldr.w	r0, [r0, #1052]	; 0x41c
 80037ac:	f7ff b952 	b.w	8002a54 <USBD_LL_DataOutStage>

080037b0 <HAL_PCD_DataInStageCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80037b0:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 80037b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80037b6:	f8d0 041c 	ldr.w	r0, [r0, #1052]	; 0x41c
 80037ba:	f7ff b97c 	b.w	8002ab6 <USBD_LL_DataInStage>

080037be <HAL_PCD_SOFCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80037be:	f8d0 041c 	ldr.w	r0, [r0, #1052]	; 0x41c
 80037c2:	f7ff b9f7 	b.w	8002bb4 <USBD_LL_SOF>

080037c6 <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 80037c6:	b510      	push	{r4, lr}
 80037c8:	4604      	mov	r4, r0
	
  default:
    speed = USBD_SPEED_FULL;    
    break;    
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);  
 80037ca:	2101      	movs	r1, #1
 80037cc:	f8d0 041c 	ldr.w	r0, [r0, #1052]	; 0x41c
 80037d0:	f7ff f9de 	bl	8002b90 <USBD_LL_SetSpeed>
  
  /*Reset Device*/
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80037d4:	f8d4 041c 	ldr.w	r0, [r4, #1052]	; 0x41c
}
 80037d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    break;    
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);  
  
  /*Reset Device*/
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80037dc:	f7ff b9b9 	b.w	8002b52 <USBD_LL_Reset>

080037e0 <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 80037e0:	b510      	push	{r4, lr}
 80037e2:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80037e4:	f8d0 041c 	ldr.w	r0, [r0, #1052]	; 0x41c
 80037e8:	f7ff f9d5 	bl	8002b96 <USBD_LL_Suspend>
  /*Enter in STOP mode */
  /* USER CODE BEGIN 2 */  
  if (hpcd->Init.low_power_enable)
 80037ec:	69a3      	ldr	r3, [r4, #24]
 80037ee:	b123      	cbz	r3, 80037fa <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80037f0:	4a02      	ldr	r2, [pc, #8]	; (80037fc <HAL_PCD_SuspendCallback+0x1c>)
 80037f2:	6913      	ldr	r3, [r2, #16]
 80037f4:	f043 0306 	orr.w	r3, r3, #6
 80037f8:	6113      	str	r3, [r2, #16]
 80037fa:	bd10      	pop	{r4, pc}
 80037fc:	e000ed00 	.word	0xe000ed00

08003800 <HAL_PCD_ResumeCallback>:
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8003800:	f8d0 041c 	ldr.w	r0, [r0, #1052]	; 0x41c
 8003804:	f7ff b9d0 	b.w	8002ba8 <USBD_LL_Resume>

08003808 <USBD_LL_Init>:
  * @brief  Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_Init (USBD_HandleTypeDef *pdev)
{ 
 8003808:	b510      	push	{r4, lr}
 800380a:	4604      	mov	r4, r0
  pdev->pData = &hpcd_USB_FS;

  hpcd_USB_FS.Instance = USB;
  hpcd_USB_FS.Init.dev_endpoints = 8;
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_8;
 800380c:	491f      	ldr	r1, [pc, #124]	; (800388c <USBD_LL_Init+0x84>)
  */
USBD_StatusTypeDef  USBD_LL_Init (USBD_HandleTypeDef *pdev)
{ 
  /* Init USB_IP */
  /* Link The driver to the stack */
  hpcd_USB_FS.pData = pdev;
 800380e:	4820      	ldr	r0, [pc, #128]	; (8003890 <USBD_LL_Init+0x88>)
  pdev->pData = &hpcd_USB_FS;

  hpcd_USB_FS.Instance = USB;
  hpcd_USB_FS.Init.dev_endpoints = 8;
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_8;
 8003810:	2302      	movs	r3, #2
 8003812:	2208      	movs	r2, #8
 8003814:	f04f 0e03 	mov.w	lr, #3
  */
USBD_StatusTypeDef  USBD_LL_Init (USBD_HandleTypeDef *pdev)
{ 
  /* Init USB_IP */
  /* Link The driver to the stack */
  hpcd_USB_FS.pData = pdev;
 8003818:	f8c0 441c 	str.w	r4, [r0, #1052]	; 0x41c
  pdev->pData = &hpcd_USB_FS;

  hpcd_USB_FS.Instance = USB;
  hpcd_USB_FS.Init.dev_endpoints = 8;
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_8;
 800381c:	e880 400e 	stmia.w	r0, {r1, r2, r3, lr}
USBD_StatusTypeDef  USBD_LL_Init (USBD_HandleTypeDef *pdev)
{ 
  /* Init USB_IP */
  /* Link The driver to the stack */
  hpcd_USB_FS.pData = pdev;
  pdev->pData = &hpcd_USB_FS;
 8003820:	f8c4 0220 	str.w	r0, [r4, #544]	; 0x220

  hpcd_USB_FS.Instance = USB;
  hpcd_USB_FS.Init.dev_endpoints = 8;
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_8;
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8003824:	2300      	movs	r3, #0
 8003826:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8003828:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800382a:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800382c:	f7fd f96e 	bl	8000b0c <HAL_PCD_Init>
 8003830:	b120      	cbz	r0, 800383c <USBD_LL_Init+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003832:	f44f 718d 	mov.w	r1, #282	; 0x11a
 8003836:	4817      	ldr	r0, [pc, #92]	; (8003894 <USBD_LL_Init+0x8c>)
 8003838:	f7ff fe54 	bl	80034e4 <_Error_Handler>
  }

  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800383c:	2200      	movs	r2, #0
 800383e:	4611      	mov	r1, r2
 8003840:	2318      	movs	r3, #24
 8003842:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8003846:	f7fd fd39 	bl	80012bc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800384a:	2358      	movs	r3, #88	; 0x58
 800384c:	2200      	movs	r2, #0
 800384e:	2180      	movs	r1, #128	; 0x80
 8003850:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8003854:	f7fd fd32 	bl	80012bc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);  
 8003858:	23c0      	movs	r3, #192	; 0xc0
 800385a:	2200      	movs	r2, #0
 800385c:	2181      	movs	r1, #129	; 0x81
 800385e:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8003862:	f7fd fd2b 	bl	80012bc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8003866:	f44f 7388 	mov.w	r3, #272	; 0x110
 800386a:	2200      	movs	r2, #0
 800386c:	2101      	movs	r1, #1
 800386e:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8003872:	f7fd fd23 	bl	80012bc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);  
 8003876:	f44f 7380 	mov.w	r3, #256	; 0x100
 800387a:	2200      	movs	r2, #0
 800387c:	2182      	movs	r1, #130	; 0x82
 800387e:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8003882:	f7fd fd1b 	bl	80012bc <HAL_PCDEx_PMAConfig>
  return USBD_OK;
}
 8003886:	2000      	movs	r0, #0
 8003888:	bd10      	pop	{r4, pc}
 800388a:	bf00      	nop
 800388c:	40005c00 	.word	0x40005c00
 8003890:	200006c0 	.word	0x200006c0
 8003894:	080044a7 	.word	0x080044a7

08003898 <USBD_LL_Start>:
  * @brief  Starts the Low Level portion of the Device driver. 
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8003898:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800389a:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800389e:	f7fd f99f 	bl	8000be0 <HAL_PCD_Start>
 80038a2:	2803      	cmp	r0, #3
 80038a4:	bf9a      	itte	ls
 80038a6:	4b02      	ldrls	r3, [pc, #8]	; (80038b0 <USBD_LL_Start+0x18>)
 80038a8:	5c18      	ldrbls	r0, [r3, r0]
 80038aa:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 80038ac:	bd08      	pop	{r3, pc}
 80038ae:	bf00      	nop
 80038b0:	080044a3 	.word	0x080044a3

080038b4 <USBD_LL_OpenEP>:
  */
USBD_StatusTypeDef  USBD_LL_OpenEP  (USBD_HandleTypeDef *pdev, 
                                      uint8_t  ep_addr,                                      
                                      uint8_t  ep_type,
                                      uint16_t ep_mps)
{
 80038b4:	b510      	push	{r4, lr}
 80038b6:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, 
 80038b8:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80038bc:	4613      	mov	r3, r2
 80038be:	4622      	mov	r2, r4
 80038c0:	f7fd f9b9 	bl	8000c36 <HAL_PCD_EP_Open>
 80038c4:	2803      	cmp	r0, #3
 80038c6:	bf9a      	itte	ls
 80038c8:	4b01      	ldrls	r3, [pc, #4]	; (80038d0 <USBD_LL_OpenEP+0x1c>)
 80038ca:	5c18      	ldrbls	r0, [r3, r0]
 80038cc:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 80038ce:	bd10      	pop	{r4, pc}
 80038d0:	080044a3 	.word	0x080044a3

080038d4 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_CloseEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 80038d4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80038d6:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80038da:	f7fd f9cf 	bl	8000c7c <HAL_PCD_EP_Close>
 80038de:	2803      	cmp	r0, #3
 80038e0:	bf9a      	itte	ls
 80038e2:	4b02      	ldrls	r3, [pc, #8]	; (80038ec <USBD_LL_CloseEP+0x18>)
 80038e4:	5c18      	ldrbls	r0, [r3, r0]
 80038e6:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 80038e8:	bd08      	pop	{r3, pc}
 80038ea:	bf00      	nop
 80038ec:	080044a3 	.word	0x080044a3

080038f0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_StallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 80038f0:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80038f2:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80038f6:	f7fd fc95 	bl	8001224 <HAL_PCD_EP_SetStall>
 80038fa:	2803      	cmp	r0, #3
 80038fc:	bf9a      	itte	ls
 80038fe:	4b02      	ldrls	r3, [pc, #8]	; (8003908 <USBD_LL_StallEP+0x18>)
 8003900:	5c18      	ldrbls	r0, [r3, r0]
 8003902:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8003904:	bd08      	pop	{r3, pc}
 8003906:	bf00      	nop
 8003908:	080044a3 	.word	0x080044a3

0800390c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_ClearStallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 800390c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 800390e:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003912:	f7fd fcb0 	bl	8001276 <HAL_PCD_EP_ClrStall>
 8003916:	2803      	cmp	r0, #3
 8003918:	bf9a      	itte	ls
 800391a:	4b02      	ldrls	r3, [pc, #8]	; (8003924 <USBD_LL_ClearStallEP+0x18>)
 800391c:	5c18      	ldrbls	r0, [r3, r0]
 800391e:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 8003920:	bd08      	pop	{r3, pc}
 8003922:	bf00      	nop
 8003924:	080044a3 	.word	0x080044a3

08003928 <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 8003928:	060a      	lsls	r2, r1, #24
  * @param  ep_addr: Endpoint Number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800392a:	f8d0 3220 	ldr.w	r3, [r0, #544]	; 0x220
  
  if((ep_addr & 0x80) == 0x80)
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800392e:	bf45      	ittet	mi
 8003930:	f001 017f 	andmi.w	r1, r1, #127	; 0x7f
 8003934:	eb03 1341 	addmi.w	r3, r3, r1, lsl #5
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8003938:	eb03 1341 	addpl.w	r3, r3, r1, lsl #5
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800393c:	f893 002a 	ldrbmi.w	r0, [r3, #42]	; 0x2a
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8003940:	bf58      	it	pl
 8003942:	f893 020a 	ldrbpl.w	r0, [r3, #522]	; 0x20a
  }
}
 8003946:	4770      	bx	lr

08003948 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_SetUSBAddress (USBD_HandleTypeDef *pdev, uint8_t dev_addr)   
{
 8003948:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800394a:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800394e:	f7fd f95e 	bl	8000c0e <HAL_PCD_SetAddress>
 8003952:	2803      	cmp	r0, #3
 8003954:	bf9a      	itte	ls
 8003956:	4b02      	ldrls	r3, [pc, #8]	; (8003960 <USBD_LL_SetUSBAddress+0x18>)
 8003958:	5c18      	ldrbls	r0, [r3, r0]
 800395a:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 800395c:	bd08      	pop	{r3, pc}
 800395e:	bf00      	nop
 8003960:	080044a3 	.word	0x080044a3

08003964 <USBD_LL_Transmit>:
  */
USBD_StatusTypeDef  USBD_LL_Transmit (USBD_HandleTypeDef *pdev, 
                                      uint8_t  ep_addr,                                      
                                      uint8_t  *pbuf,
                                      uint16_t  size)
{
 8003964:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8003966:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800396a:	f7fd f9d3 	bl	8000d14 <HAL_PCD_EP_Transmit>
 800396e:	2803      	cmp	r0, #3
 8003970:	bf9a      	itte	ls
 8003972:	4b02      	ldrls	r3, [pc, #8]	; (800397c <USBD_LL_Transmit+0x18>)
 8003974:	5c18      	ldrbls	r0, [r3, r0]
 8003976:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;    
}
 8003978:	bd08      	pop	{r3, pc}
 800397a:	bf00      	nop
 800397c:	080044a3 	.word	0x080044a3

08003980 <USBD_LL_PrepareReceive>:
  */
USBD_StatusTypeDef  USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, 
                                           uint8_t  ep_addr,                                      
                                           uint8_t  *pbuf,
                                           uint16_t  size)
{
 8003980:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8003982:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003986:	f7fd f99a 	bl	8000cbe <HAL_PCD_EP_Receive>
 800398a:	2803      	cmp	r0, #3
 800398c:	bf9a      	itte	ls
 800398e:	4b02      	ldrls	r3, [pc, #8]	; (8003998 <USBD_LL_PrepareReceive+0x18>)
 8003990:	5c18      	ldrbls	r0, [r3, r0]
 8003992:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 8003994:	bd08      	pop	{r3, pc}
 8003996:	bf00      	nop
 8003998:	080044a3 	.word	0x080044a3

0800399c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize  (USBD_HandleTypeDef *pdev, uint8_t  ep_addr)  
{
 800399c:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800399e:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80039a2:	f7fd f9b0 	bl	8000d06 <HAL_PCD_EP_GetRxCount>
}
 80039a6:	bd08      	pop	{r3, pc}

080039a8 <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
}
 80039a8:	4800      	ldr	r0, [pc, #0]	; (80039ac <USBD_static_malloc+0x4>)
 80039aa:	4770      	bx	lr
 80039ac:	200001e0 	.word	0x200001e0

080039b0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  *p pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80039b0:	4770      	bx	lr

080039b2 <HAL_PCDEx_SetConnectionState>:
* @param hpcd: PCD handle
* @param state: connection state (0 : disconnected / 1: connected) 
* @retval None
*/
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
{
 80039b2:	4770      	bx	lr

080039b4 <USBD_FS_DeviceDescriptor>:
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_DeviceDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
  *length = sizeof(USBD_FS_DeviceDesc);
 80039b4:	2312      	movs	r3, #18
 80039b6:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 80039b8:	4800      	ldr	r0, [pc, #0]	; (80039bc <USBD_FS_DeviceDescriptor+0x8>)
 80039ba:	4770      	bx	lr
 80039bc:	20000144 	.word	0x20000144

080039c0 <USBD_FS_LangIDStrDescriptor>:
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_LangIDStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
  *length =  sizeof(USBD_LangIDDesc);  
 80039c0:	2304      	movs	r3, #4
 80039c2:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 80039c4:	4800      	ldr	r0, [pc, #0]	; (80039c8 <USBD_FS_LangIDStrDescriptor+0x8>)
 80039c6:	4770      	bx	lr
 80039c8:	20000140 	.word	0x20000140

080039cc <USBD_FS_ManufacturerStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_ManufacturerStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 80039cc:	b510      	push	{r4, lr}
  USBD_GetString (USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80039ce:	4c04      	ldr	r4, [pc, #16]	; (80039e0 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 80039d0:	460a      	mov	r2, r1
 80039d2:	4804      	ldr	r0, [pc, #16]	; (80039e4 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 80039d4:	4621      	mov	r1, r4
 80039d6:	f7ff fa9e 	bl	8002f16 <USBD_GetString>
  return USBD_StrDesc;
}
 80039da:	4620      	mov	r0, r4
 80039dc:	bd10      	pop	{r4, pc}
 80039de:	bf00      	nop
 80039e0:	20000ae0 	.word	0x20000ae0
 80039e4:	080044ba 	.word	0x080044ba

080039e8 <USBD_FS_ProductStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_ProductStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 80039e8:	b510      	push	{r4, lr}
  if(speed == 0)
  {   
    USBD_GetString (USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80039ea:	4c04      	ldr	r4, [pc, #16]	; (80039fc <USBD_FS_ProductStrDescriptor+0x14>)
 80039ec:	460a      	mov	r2, r1
 80039ee:	4804      	ldr	r0, [pc, #16]	; (8003a00 <USBD_FS_ProductStrDescriptor+0x18>)
 80039f0:	4621      	mov	r1, r4
 80039f2:	f7ff fa90 	bl	8002f16 <USBD_GetString>
  else
  {
    USBD_GetString (USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);    
  }
  return USBD_StrDesc;
}
 80039f6:	4620      	mov	r0, r4
 80039f8:	bd10      	pop	{r4, pc}
 80039fa:	bf00      	nop
 80039fc:	20000ae0 	.word	0x20000ae0
 8003a00:	080044cd 	.word	0x080044cd

08003a04 <USBD_FS_SerialStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_SerialStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8003a04:	b510      	push	{r4, lr}
  if(speed  == USBD_SPEED_HIGH)
  {    
    USBD_GetString (USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 8003a06:	4c04      	ldr	r4, [pc, #16]	; (8003a18 <USBD_FS_SerialStrDescriptor+0x14>)
 8003a08:	460a      	mov	r2, r1
 8003a0a:	4804      	ldr	r0, [pc, #16]	; (8003a1c <USBD_FS_SerialStrDescriptor+0x18>)
 8003a0c:	4621      	mov	r1, r4
 8003a0e:	f7ff fa82 	bl	8002f16 <USBD_GetString>
  else
  {
    USBD_GetString (USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);    
  }
  return USBD_StrDesc;
}
 8003a12:	4620      	mov	r0, r4
 8003a14:	bd10      	pop	{r4, pc}
 8003a16:	bf00      	nop
 8003a18:	20000ae0 	.word	0x20000ae0
 8003a1c:	080044e3 	.word	0x080044e3

08003a20 <USBD_FS_ConfigStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_ConfigStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8003a20:	b510      	push	{r4, lr}
  if(speed  == USBD_SPEED_HIGH)
  {  
    USBD_GetString (USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8003a22:	4c04      	ldr	r4, [pc, #16]	; (8003a34 <USBD_FS_ConfigStrDescriptor+0x14>)
 8003a24:	460a      	mov	r2, r1
 8003a26:	4804      	ldr	r0, [pc, #16]	; (8003a38 <USBD_FS_ConfigStrDescriptor+0x18>)
 8003a28:	4621      	mov	r1, r4
 8003a2a:	f7ff fa74 	bl	8002f16 <USBD_GetString>
  else
  {
    USBD_GetString (USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length); 
  }
  return USBD_StrDesc;  
}
 8003a2e:	4620      	mov	r0, r4
 8003a30:	bd10      	pop	{r4, pc}
 8003a32:	bf00      	nop
 8003a34:	20000ae0 	.word	0x20000ae0
 8003a38:	080044f0 	.word	0x080044f0

08003a3c <USBD_FS_InterfaceStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_InterfaceStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8003a3c:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString (USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8003a3e:	4c04      	ldr	r4, [pc, #16]	; (8003a50 <USBD_FS_InterfaceStrDescriptor+0x14>)
 8003a40:	460a      	mov	r2, r1
 8003a42:	4804      	ldr	r0, [pc, #16]	; (8003a54 <USBD_FS_InterfaceStrDescriptor+0x18>)
 8003a44:	4621      	mov	r1, r4
 8003a46:	f7ff fa66 	bl	8002f16 <USBD_GetString>
  else
  {
    USBD_GetString (USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;  
}
 8003a4a:	4620      	mov	r0, r4
 8003a4c:	bd10      	pop	{r4, pc}
 8003a4e:	bf00      	nop
 8003a50:	20000ae0 	.word	0x20000ae0
 8003a54:	080044fb 	.word	0x080044fb

08003a58 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003a58:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003a5a:	e003      	b.n	8003a64 <LoopCopyDataInit>

08003a5c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003a5c:	4b0b      	ldr	r3, [pc, #44]	; (8003a8c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8003a5e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003a60:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003a62:	3104      	adds	r1, #4

08003a64 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003a64:	480a      	ldr	r0, [pc, #40]	; (8003a90 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8003a66:	4b0b      	ldr	r3, [pc, #44]	; (8003a94 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003a68:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003a6a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003a6c:	d3f6      	bcc.n	8003a5c <CopyDataInit>
  ldr r2, =_sbss
 8003a6e:	4a0a      	ldr	r2, [pc, #40]	; (8003a98 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003a70:	e002      	b.n	8003a78 <LoopFillZerobss>

08003a72 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003a72:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003a74:	f842 3b04 	str.w	r3, [r2], #4

08003a78 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003a78:	4b08      	ldr	r3, [pc, #32]	; (8003a9c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8003a7a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003a7c:	d3f9      	bcc.n	8003a72 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003a7e:	f7ff fded 	bl	800365c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003a82:	f000 f80f 	bl	8003aa4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003a86:	f7ff fb81 	bl	800318c <main>
  bx lr
 8003a8a:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
  b LoopCopyDataInit

CopyDataInit:
  ldr r3, =_sidata
 8003a8c:	08004548 	.word	0x08004548
  ldr r3, [r3, r1]
  str r3, [r0, r1]
  adds r1, r1, #4

LoopCopyDataInit:
  ldr r0, =_sdata
 8003a90:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003a94:	200001bc 	.word	0x200001bc
  adds r2, r0, r1
  cmp r2, r3
  bcc CopyDataInit
  ldr r2, =_sbss
 8003a98:	200001bc 	.word	0x200001bc
FillZerobss:
  movs r3, #0
  str r3, [r2], #4

LoopFillZerobss:
  ldr r3, = _ebss
 8003a9c:	20000ce4 	.word	0x20000ce4

08003aa0 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003aa0:	e7fe      	b.n	8003aa0 <CAN1_RX1_IRQHandler>
	...

08003aa4 <__libc_init_array>:
 8003aa4:	4b0e      	ldr	r3, [pc, #56]	; (8003ae0 <__libc_init_array+0x3c>)
 8003aa6:	b570      	push	{r4, r5, r6, lr}
 8003aa8:	461e      	mov	r6, r3
 8003aaa:	4c0e      	ldr	r4, [pc, #56]	; (8003ae4 <__libc_init_array+0x40>)
 8003aac:	2500      	movs	r5, #0
 8003aae:	1ae4      	subs	r4, r4, r3
 8003ab0:	10a4      	asrs	r4, r4, #2
 8003ab2:	42a5      	cmp	r5, r4
 8003ab4:	d004      	beq.n	8003ac0 <__libc_init_array+0x1c>
 8003ab6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003aba:	4798      	blx	r3
 8003abc:	3501      	adds	r5, #1
 8003abe:	e7f8      	b.n	8003ab2 <__libc_init_array+0xe>
 8003ac0:	f000 fc72 	bl	80043a8 <_init>
 8003ac4:	4b08      	ldr	r3, [pc, #32]	; (8003ae8 <__libc_init_array+0x44>)
 8003ac6:	4c09      	ldr	r4, [pc, #36]	; (8003aec <__libc_init_array+0x48>)
 8003ac8:	461e      	mov	r6, r3
 8003aca:	1ae4      	subs	r4, r4, r3
 8003acc:	10a4      	asrs	r4, r4, #2
 8003ace:	2500      	movs	r5, #0
 8003ad0:	42a5      	cmp	r5, r4
 8003ad2:	d004      	beq.n	8003ade <__libc_init_array+0x3a>
 8003ad4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003ad8:	4798      	blx	r3
 8003ada:	3501      	adds	r5, #1
 8003adc:	e7f8      	b.n	8003ad0 <__libc_init_array+0x2c>
 8003ade:	bd70      	pop	{r4, r5, r6, pc}
 8003ae0:	08004540 	.word	0x08004540
 8003ae4:	08004540 	.word	0x08004540
 8003ae8:	08004540 	.word	0x08004540
 8003aec:	08004544 	.word	0x08004544

08003af0 <malloc>:
 8003af0:	4b02      	ldr	r3, [pc, #8]	; (8003afc <malloc+0xc>)
 8003af2:	4601      	mov	r1, r0
 8003af4:	6818      	ldr	r0, [r3, #0]
 8003af6:	f000 b85f 	b.w	8003bb8 <_malloc_r>
 8003afa:	bf00      	nop
 8003afc:	200001b8 	.word	0x200001b8

08003b00 <free>:
 8003b00:	4b02      	ldr	r3, [pc, #8]	; (8003b0c <free+0xc>)
 8003b02:	4601      	mov	r1, r0
 8003b04:	6818      	ldr	r0, [r3, #0]
 8003b06:	f000 b80b 	b.w	8003b20 <_free_r>
 8003b0a:	bf00      	nop
 8003b0c:	200001b8 	.word	0x200001b8

08003b10 <memset>:
 8003b10:	4603      	mov	r3, r0
 8003b12:	4402      	add	r2, r0
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d002      	beq.n	8003b1e <memset+0xe>
 8003b18:	f803 1b01 	strb.w	r1, [r3], #1
 8003b1c:	e7fa      	b.n	8003b14 <memset+0x4>
 8003b1e:	4770      	bx	lr

08003b20 <_free_r>:
 8003b20:	b538      	push	{r3, r4, r5, lr}
 8003b22:	4605      	mov	r5, r0
 8003b24:	2900      	cmp	r1, #0
 8003b26:	d044      	beq.n	8003bb2 <_free_r+0x92>
 8003b28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b2c:	1f0c      	subs	r4, r1, #4
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	bfb8      	it	lt
 8003b32:	18e4      	addlt	r4, r4, r3
 8003b34:	f000 f8da 	bl	8003cec <__malloc_lock>
 8003b38:	4a1e      	ldr	r2, [pc, #120]	; (8003bb4 <_free_r+0x94>)
 8003b3a:	6813      	ldr	r3, [r2, #0]
 8003b3c:	4611      	mov	r1, r2
 8003b3e:	b913      	cbnz	r3, 8003b46 <_free_r+0x26>
 8003b40:	6063      	str	r3, [r4, #4]
 8003b42:	6014      	str	r4, [r2, #0]
 8003b44:	e030      	b.n	8003ba8 <_free_r+0x88>
 8003b46:	42a3      	cmp	r3, r4
 8003b48:	d90d      	bls.n	8003b66 <_free_r+0x46>
 8003b4a:	6822      	ldr	r2, [r4, #0]
 8003b4c:	18a0      	adds	r0, r4, r2
 8003b4e:	4283      	cmp	r3, r0
 8003b50:	bf01      	itttt	eq
 8003b52:	6818      	ldreq	r0, [r3, #0]
 8003b54:	685b      	ldreq	r3, [r3, #4]
 8003b56:	1812      	addeq	r2, r2, r0
 8003b58:	6022      	streq	r2, [r4, #0]
 8003b5a:	6063      	str	r3, [r4, #4]
 8003b5c:	600c      	str	r4, [r1, #0]
 8003b5e:	e023      	b.n	8003ba8 <_free_r+0x88>
 8003b60:	42a2      	cmp	r2, r4
 8003b62:	d803      	bhi.n	8003b6c <_free_r+0x4c>
 8003b64:	4613      	mov	r3, r2
 8003b66:	685a      	ldr	r2, [r3, #4]
 8003b68:	2a00      	cmp	r2, #0
 8003b6a:	d1f9      	bne.n	8003b60 <_free_r+0x40>
 8003b6c:	6818      	ldr	r0, [r3, #0]
 8003b6e:	1819      	adds	r1, r3, r0
 8003b70:	42a1      	cmp	r1, r4
 8003b72:	d10b      	bne.n	8003b8c <_free_r+0x6c>
 8003b74:	6821      	ldr	r1, [r4, #0]
 8003b76:	4401      	add	r1, r0
 8003b78:	1858      	adds	r0, r3, r1
 8003b7a:	4282      	cmp	r2, r0
 8003b7c:	6019      	str	r1, [r3, #0]
 8003b7e:	d113      	bne.n	8003ba8 <_free_r+0x88>
 8003b80:	6810      	ldr	r0, [r2, #0]
 8003b82:	6852      	ldr	r2, [r2, #4]
 8003b84:	4401      	add	r1, r0
 8003b86:	6019      	str	r1, [r3, #0]
 8003b88:	605a      	str	r2, [r3, #4]
 8003b8a:	e00d      	b.n	8003ba8 <_free_r+0x88>
 8003b8c:	d902      	bls.n	8003b94 <_free_r+0x74>
 8003b8e:	230c      	movs	r3, #12
 8003b90:	602b      	str	r3, [r5, #0]
 8003b92:	e009      	b.n	8003ba8 <_free_r+0x88>
 8003b94:	6821      	ldr	r1, [r4, #0]
 8003b96:	1860      	adds	r0, r4, r1
 8003b98:	4282      	cmp	r2, r0
 8003b9a:	bf01      	itttt	eq
 8003b9c:	6810      	ldreq	r0, [r2, #0]
 8003b9e:	6852      	ldreq	r2, [r2, #4]
 8003ba0:	1809      	addeq	r1, r1, r0
 8003ba2:	6021      	streq	r1, [r4, #0]
 8003ba4:	6062      	str	r2, [r4, #4]
 8003ba6:	605c      	str	r4, [r3, #4]
 8003ba8:	4628      	mov	r0, r5
 8003baa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003bae:	f000 b89e 	b.w	8003cee <__malloc_unlock>
 8003bb2:	bd38      	pop	{r3, r4, r5, pc}
 8003bb4:	20000404 	.word	0x20000404

08003bb8 <_malloc_r>:
 8003bb8:	b570      	push	{r4, r5, r6, lr}
 8003bba:	1ccd      	adds	r5, r1, #3
 8003bbc:	f025 0503 	bic.w	r5, r5, #3
 8003bc0:	3508      	adds	r5, #8
 8003bc2:	2d0c      	cmp	r5, #12
 8003bc4:	bf38      	it	cc
 8003bc6:	250c      	movcc	r5, #12
 8003bc8:	2d00      	cmp	r5, #0
 8003bca:	4606      	mov	r6, r0
 8003bcc:	db01      	blt.n	8003bd2 <_malloc_r+0x1a>
 8003bce:	42a9      	cmp	r1, r5
 8003bd0:	d902      	bls.n	8003bd8 <_malloc_r+0x20>
 8003bd2:	230c      	movs	r3, #12
 8003bd4:	6033      	str	r3, [r6, #0]
 8003bd6:	e046      	b.n	8003c66 <_malloc_r+0xae>
 8003bd8:	f000 f888 	bl	8003cec <__malloc_lock>
 8003bdc:	4b23      	ldr	r3, [pc, #140]	; (8003c6c <_malloc_r+0xb4>)
 8003bde:	681c      	ldr	r4, [r3, #0]
 8003be0:	461a      	mov	r2, r3
 8003be2:	4621      	mov	r1, r4
 8003be4:	b1a1      	cbz	r1, 8003c10 <_malloc_r+0x58>
 8003be6:	680b      	ldr	r3, [r1, #0]
 8003be8:	1b5b      	subs	r3, r3, r5
 8003bea:	d40e      	bmi.n	8003c0a <_malloc_r+0x52>
 8003bec:	2b0b      	cmp	r3, #11
 8003bee:	d903      	bls.n	8003bf8 <_malloc_r+0x40>
 8003bf0:	600b      	str	r3, [r1, #0]
 8003bf2:	18cc      	adds	r4, r1, r3
 8003bf4:	50cd      	str	r5, [r1, r3]
 8003bf6:	e01e      	b.n	8003c36 <_malloc_r+0x7e>
 8003bf8:	428c      	cmp	r4, r1
 8003bfa:	bf0b      	itete	eq
 8003bfc:	6863      	ldreq	r3, [r4, #4]
 8003bfe:	684b      	ldrne	r3, [r1, #4]
 8003c00:	6013      	streq	r3, [r2, #0]
 8003c02:	6063      	strne	r3, [r4, #4]
 8003c04:	bf18      	it	ne
 8003c06:	460c      	movne	r4, r1
 8003c08:	e015      	b.n	8003c36 <_malloc_r+0x7e>
 8003c0a:	460c      	mov	r4, r1
 8003c0c:	6849      	ldr	r1, [r1, #4]
 8003c0e:	e7e9      	b.n	8003be4 <_malloc_r+0x2c>
 8003c10:	4c17      	ldr	r4, [pc, #92]	; (8003c70 <_malloc_r+0xb8>)
 8003c12:	6823      	ldr	r3, [r4, #0]
 8003c14:	b91b      	cbnz	r3, 8003c1e <_malloc_r+0x66>
 8003c16:	4630      	mov	r0, r6
 8003c18:	f000 f82c 	bl	8003c74 <_sbrk_r>
 8003c1c:	6020      	str	r0, [r4, #0]
 8003c1e:	4629      	mov	r1, r5
 8003c20:	4630      	mov	r0, r6
 8003c22:	f000 f827 	bl	8003c74 <_sbrk_r>
 8003c26:	1c43      	adds	r3, r0, #1
 8003c28:	d018      	beq.n	8003c5c <_malloc_r+0xa4>
 8003c2a:	1cc4      	adds	r4, r0, #3
 8003c2c:	f024 0403 	bic.w	r4, r4, #3
 8003c30:	42a0      	cmp	r0, r4
 8003c32:	d10d      	bne.n	8003c50 <_malloc_r+0x98>
 8003c34:	6025      	str	r5, [r4, #0]
 8003c36:	4630      	mov	r0, r6
 8003c38:	f000 f859 	bl	8003cee <__malloc_unlock>
 8003c3c:	f104 000b 	add.w	r0, r4, #11
 8003c40:	1d23      	adds	r3, r4, #4
 8003c42:	f020 0007 	bic.w	r0, r0, #7
 8003c46:	1ac3      	subs	r3, r0, r3
 8003c48:	d00e      	beq.n	8003c68 <_malloc_r+0xb0>
 8003c4a:	425a      	negs	r2, r3
 8003c4c:	50e2      	str	r2, [r4, r3]
 8003c4e:	bd70      	pop	{r4, r5, r6, pc}
 8003c50:	1a21      	subs	r1, r4, r0
 8003c52:	4630      	mov	r0, r6
 8003c54:	f000 f80e 	bl	8003c74 <_sbrk_r>
 8003c58:	3001      	adds	r0, #1
 8003c5a:	d1eb      	bne.n	8003c34 <_malloc_r+0x7c>
 8003c5c:	230c      	movs	r3, #12
 8003c5e:	6033      	str	r3, [r6, #0]
 8003c60:	4630      	mov	r0, r6
 8003c62:	f000 f844 	bl	8003cee <__malloc_unlock>
 8003c66:	2000      	movs	r0, #0
 8003c68:	bd70      	pop	{r4, r5, r6, pc}
 8003c6a:	bf00      	nop
 8003c6c:	20000404 	.word	0x20000404
 8003c70:	20000400 	.word	0x20000400

08003c74 <_sbrk_r>:
 8003c74:	b538      	push	{r3, r4, r5, lr}
 8003c76:	4c06      	ldr	r4, [pc, #24]	; (8003c90 <_sbrk_r+0x1c>)
 8003c78:	2300      	movs	r3, #0
 8003c7a:	4605      	mov	r5, r0
 8003c7c:	4608      	mov	r0, r1
 8003c7e:	6023      	str	r3, [r4, #0]
 8003c80:	f000 fb84 	bl	800438c <_sbrk>
 8003c84:	1c43      	adds	r3, r0, #1
 8003c86:	d102      	bne.n	8003c8e <_sbrk_r+0x1a>
 8003c88:	6823      	ldr	r3, [r4, #0]
 8003c8a:	b103      	cbz	r3, 8003c8e <_sbrk_r+0x1a>
 8003c8c:	602b      	str	r3, [r5, #0]
 8003c8e:	bd38      	pop	{r3, r4, r5, pc}
 8003c90:	20000ce0 	.word	0x20000ce0

08003c94 <siprintf>:
 8003c94:	b40e      	push	{r1, r2, r3}
 8003c96:	b500      	push	{lr}
 8003c98:	f44f 7102 	mov.w	r1, #520	; 0x208
 8003c9c:	b09c      	sub	sp, #112	; 0x70
 8003c9e:	f8ad 1014 	strh.w	r1, [sp, #20]
 8003ca2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003ca6:	9104      	str	r1, [sp, #16]
 8003ca8:	9107      	str	r1, [sp, #28]
 8003caa:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003cae:	ab1d      	add	r3, sp, #116	; 0x74
 8003cb0:	9002      	str	r0, [sp, #8]
 8003cb2:	9006      	str	r0, [sp, #24]
 8003cb4:	4808      	ldr	r0, [pc, #32]	; (8003cd8 <siprintf+0x44>)
 8003cb6:	f853 2b04 	ldr.w	r2, [r3], #4
 8003cba:	f8ad 1016 	strh.w	r1, [sp, #22]
 8003cbe:	6800      	ldr	r0, [r0, #0]
 8003cc0:	a902      	add	r1, sp, #8
 8003cc2:	9301      	str	r3, [sp, #4]
 8003cc4:	f000 f86e 	bl	8003da4 <_svfiprintf_r>
 8003cc8:	9b02      	ldr	r3, [sp, #8]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	701a      	strb	r2, [r3, #0]
 8003cce:	b01c      	add	sp, #112	; 0x70
 8003cd0:	f85d eb04 	ldr.w	lr, [sp], #4
 8003cd4:	b003      	add	sp, #12
 8003cd6:	4770      	bx	lr
 8003cd8:	200001b8 	.word	0x200001b8

08003cdc <strcpy>:
 8003cdc:	4603      	mov	r3, r0
 8003cde:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003ce2:	f803 2b01 	strb.w	r2, [r3], #1
 8003ce6:	2a00      	cmp	r2, #0
 8003ce8:	d1f9      	bne.n	8003cde <strcpy+0x2>
 8003cea:	4770      	bx	lr

08003cec <__malloc_lock>:
 8003cec:	4770      	bx	lr

08003cee <__malloc_unlock>:
 8003cee:	4770      	bx	lr

08003cf0 <__ssputs_r>:
 8003cf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003cf4:	688e      	ldr	r6, [r1, #8]
 8003cf6:	4682      	mov	sl, r0
 8003cf8:	429e      	cmp	r6, r3
 8003cfa:	460c      	mov	r4, r1
 8003cfc:	4691      	mov	r9, r2
 8003cfe:	4698      	mov	r8, r3
 8003d00:	d83e      	bhi.n	8003d80 <__ssputs_r+0x90>
 8003d02:	898a      	ldrh	r2, [r1, #12]
 8003d04:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003d08:	d03a      	beq.n	8003d80 <__ssputs_r+0x90>
 8003d0a:	6825      	ldr	r5, [r4, #0]
 8003d0c:	6909      	ldr	r1, [r1, #16]
 8003d0e:	2302      	movs	r3, #2
 8003d10:	1a6f      	subs	r7, r5, r1
 8003d12:	6965      	ldr	r5, [r4, #20]
 8003d14:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003d18:	fb95 f5f3 	sdiv	r5, r5, r3
 8003d1c:	1c7b      	adds	r3, r7, #1
 8003d1e:	4443      	add	r3, r8
 8003d20:	429d      	cmp	r5, r3
 8003d22:	bf38      	it	cc
 8003d24:	461d      	movcc	r5, r3
 8003d26:	0553      	lsls	r3, r2, #21
 8003d28:	d50f      	bpl.n	8003d4a <__ssputs_r+0x5a>
 8003d2a:	4629      	mov	r1, r5
 8003d2c:	f7ff ff44 	bl	8003bb8 <_malloc_r>
 8003d30:	4606      	mov	r6, r0
 8003d32:	b198      	cbz	r0, 8003d5c <__ssputs_r+0x6c>
 8003d34:	463a      	mov	r2, r7
 8003d36:	6921      	ldr	r1, [r4, #16]
 8003d38:	f000 fad2 	bl	80042e0 <memcpy>
 8003d3c:	89a3      	ldrh	r3, [r4, #12]
 8003d3e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003d42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d46:	81a3      	strh	r3, [r4, #12]
 8003d48:	e013      	b.n	8003d72 <__ssputs_r+0x82>
 8003d4a:	462a      	mov	r2, r5
 8003d4c:	f000 faee 	bl	800432c <_realloc_r>
 8003d50:	4606      	mov	r6, r0
 8003d52:	b970      	cbnz	r0, 8003d72 <__ssputs_r+0x82>
 8003d54:	6921      	ldr	r1, [r4, #16]
 8003d56:	4650      	mov	r0, sl
 8003d58:	f7ff fee2 	bl	8003b20 <_free_r>
 8003d5c:	230c      	movs	r3, #12
 8003d5e:	f8ca 3000 	str.w	r3, [sl]
 8003d62:	89a3      	ldrh	r3, [r4, #12]
 8003d64:	f04f 30ff 	mov.w	r0, #4294967295
 8003d68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d6c:	81a3      	strh	r3, [r4, #12]
 8003d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d72:	6126      	str	r6, [r4, #16]
 8003d74:	443e      	add	r6, r7
 8003d76:	6026      	str	r6, [r4, #0]
 8003d78:	4646      	mov	r6, r8
 8003d7a:	6165      	str	r5, [r4, #20]
 8003d7c:	1bed      	subs	r5, r5, r7
 8003d7e:	60a5      	str	r5, [r4, #8]
 8003d80:	4546      	cmp	r6, r8
 8003d82:	bf28      	it	cs
 8003d84:	4646      	movcs	r6, r8
 8003d86:	4649      	mov	r1, r9
 8003d88:	4632      	mov	r2, r6
 8003d8a:	6820      	ldr	r0, [r4, #0]
 8003d8c:	f000 fab3 	bl	80042f6 <memmove>
 8003d90:	68a3      	ldr	r3, [r4, #8]
 8003d92:	2000      	movs	r0, #0
 8003d94:	1b9b      	subs	r3, r3, r6
 8003d96:	60a3      	str	r3, [r4, #8]
 8003d98:	6823      	ldr	r3, [r4, #0]
 8003d9a:	441e      	add	r6, r3
 8003d9c:	6026      	str	r6, [r4, #0]
 8003d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08003da4 <_svfiprintf_r>:
 8003da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003da8:	b09d      	sub	sp, #116	; 0x74
 8003daa:	9303      	str	r3, [sp, #12]
 8003dac:	898b      	ldrh	r3, [r1, #12]
 8003dae:	4680      	mov	r8, r0
 8003db0:	061c      	lsls	r4, r3, #24
 8003db2:	460d      	mov	r5, r1
 8003db4:	4616      	mov	r6, r2
 8003db6:	d50d      	bpl.n	8003dd4 <_svfiprintf_r+0x30>
 8003db8:	690b      	ldr	r3, [r1, #16]
 8003dba:	b95b      	cbnz	r3, 8003dd4 <_svfiprintf_r+0x30>
 8003dbc:	2140      	movs	r1, #64	; 0x40
 8003dbe:	f7ff fefb 	bl	8003bb8 <_malloc_r>
 8003dc2:	6028      	str	r0, [r5, #0]
 8003dc4:	6128      	str	r0, [r5, #16]
 8003dc6:	b918      	cbnz	r0, 8003dd0 <_svfiprintf_r+0x2c>
 8003dc8:	230c      	movs	r3, #12
 8003dca:	f8c8 3000 	str.w	r3, [r8]
 8003dce:	e0cd      	b.n	8003f6c <_svfiprintf_r+0x1c8>
 8003dd0:	2340      	movs	r3, #64	; 0x40
 8003dd2:	616b      	str	r3, [r5, #20]
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	9309      	str	r3, [sp, #36]	; 0x24
 8003dd8:	2320      	movs	r3, #32
 8003dda:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003dde:	f8df b19c 	ldr.w	fp, [pc, #412]	; 8003f7c <_svfiprintf_r+0x1d8>
 8003de2:	2330      	movs	r3, #48	; 0x30
 8003de4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003de8:	4637      	mov	r7, r6
 8003dea:	463c      	mov	r4, r7
 8003dec:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003df0:	b91b      	cbnz	r3, 8003dfa <_svfiprintf_r+0x56>
 8003df2:	ebb7 0906 	subs.w	r9, r7, r6
 8003df6:	d010      	beq.n	8003e1a <_svfiprintf_r+0x76>
 8003df8:	e003      	b.n	8003e02 <_svfiprintf_r+0x5e>
 8003dfa:	2b25      	cmp	r3, #37	; 0x25
 8003dfc:	d0f9      	beq.n	8003df2 <_svfiprintf_r+0x4e>
 8003dfe:	4627      	mov	r7, r4
 8003e00:	e7f3      	b.n	8003dea <_svfiprintf_r+0x46>
 8003e02:	464b      	mov	r3, r9
 8003e04:	4632      	mov	r2, r6
 8003e06:	4629      	mov	r1, r5
 8003e08:	4640      	mov	r0, r8
 8003e0a:	f7ff ff71 	bl	8003cf0 <__ssputs_r>
 8003e0e:	3001      	adds	r0, #1
 8003e10:	f000 80a7 	beq.w	8003f62 <_svfiprintf_r+0x1be>
 8003e14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e16:	444b      	add	r3, r9
 8003e18:	9309      	str	r3, [sp, #36]	; 0x24
 8003e1a:	783b      	ldrb	r3, [r7, #0]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	f000 80a0 	beq.w	8003f62 <_svfiprintf_r+0x1be>
 8003e22:	2300      	movs	r3, #0
 8003e24:	f04f 32ff 	mov.w	r2, #4294967295
 8003e28:	9304      	str	r3, [sp, #16]
 8003e2a:	9307      	str	r3, [sp, #28]
 8003e2c:	9205      	str	r2, [sp, #20]
 8003e2e:	9306      	str	r3, [sp, #24]
 8003e30:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003e34:	931a      	str	r3, [sp, #104]	; 0x68
 8003e36:	2601      	movs	r6, #1
 8003e38:	2205      	movs	r2, #5
 8003e3a:	7821      	ldrb	r1, [r4, #0]
 8003e3c:	484e      	ldr	r0, [pc, #312]	; (8003f78 <_svfiprintf_r+0x1d4>)
 8003e3e:	f000 fa41 	bl	80042c4 <memchr>
 8003e42:	1c67      	adds	r7, r4, #1
 8003e44:	9b04      	ldr	r3, [sp, #16]
 8003e46:	b138      	cbz	r0, 8003e58 <_svfiprintf_r+0xb4>
 8003e48:	4a4b      	ldr	r2, [pc, #300]	; (8003f78 <_svfiprintf_r+0x1d4>)
 8003e4a:	463c      	mov	r4, r7
 8003e4c:	1a80      	subs	r0, r0, r2
 8003e4e:	fa06 f000 	lsl.w	r0, r6, r0
 8003e52:	4318      	orrs	r0, r3
 8003e54:	9004      	str	r0, [sp, #16]
 8003e56:	e7ef      	b.n	8003e38 <_svfiprintf_r+0x94>
 8003e58:	06d9      	lsls	r1, r3, #27
 8003e5a:	bf44      	itt	mi
 8003e5c:	2220      	movmi	r2, #32
 8003e5e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003e62:	071a      	lsls	r2, r3, #28
 8003e64:	bf44      	itt	mi
 8003e66:	222b      	movmi	r2, #43	; 0x2b
 8003e68:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003e6c:	7822      	ldrb	r2, [r4, #0]
 8003e6e:	2a2a      	cmp	r2, #42	; 0x2a
 8003e70:	d003      	beq.n	8003e7a <_svfiprintf_r+0xd6>
 8003e72:	9a07      	ldr	r2, [sp, #28]
 8003e74:	2100      	movs	r1, #0
 8003e76:	200a      	movs	r0, #10
 8003e78:	e00b      	b.n	8003e92 <_svfiprintf_r+0xee>
 8003e7a:	9a03      	ldr	r2, [sp, #12]
 8003e7c:	1d11      	adds	r1, r2, #4
 8003e7e:	6812      	ldr	r2, [r2, #0]
 8003e80:	9103      	str	r1, [sp, #12]
 8003e82:	2a00      	cmp	r2, #0
 8003e84:	da10      	bge.n	8003ea8 <_svfiprintf_r+0x104>
 8003e86:	4252      	negs	r2, r2
 8003e88:	f043 0002 	orr.w	r0, r3, #2
 8003e8c:	9207      	str	r2, [sp, #28]
 8003e8e:	9004      	str	r0, [sp, #16]
 8003e90:	e00b      	b.n	8003eaa <_svfiprintf_r+0x106>
 8003e92:	4627      	mov	r7, r4
 8003e94:	783b      	ldrb	r3, [r7, #0]
 8003e96:	3401      	adds	r4, #1
 8003e98:	3b30      	subs	r3, #48	; 0x30
 8003e9a:	2b09      	cmp	r3, #9
 8003e9c:	d803      	bhi.n	8003ea6 <_svfiprintf_r+0x102>
 8003e9e:	fb00 3202 	mla	r2, r0, r2, r3
 8003ea2:	2101      	movs	r1, #1
 8003ea4:	e7f5      	b.n	8003e92 <_svfiprintf_r+0xee>
 8003ea6:	b101      	cbz	r1, 8003eaa <_svfiprintf_r+0x106>
 8003ea8:	9207      	str	r2, [sp, #28]
 8003eaa:	783b      	ldrb	r3, [r7, #0]
 8003eac:	2b2e      	cmp	r3, #46	; 0x2e
 8003eae:	d11e      	bne.n	8003eee <_svfiprintf_r+0x14a>
 8003eb0:	787b      	ldrb	r3, [r7, #1]
 8003eb2:	2b2a      	cmp	r3, #42	; 0x2a
 8003eb4:	d10a      	bne.n	8003ecc <_svfiprintf_r+0x128>
 8003eb6:	9b03      	ldr	r3, [sp, #12]
 8003eb8:	3702      	adds	r7, #2
 8003eba:	1d1a      	adds	r2, r3, #4
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	9203      	str	r2, [sp, #12]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	bfb8      	it	lt
 8003ec4:	f04f 33ff 	movlt.w	r3, #4294967295
 8003ec8:	9305      	str	r3, [sp, #20]
 8003eca:	e010      	b.n	8003eee <_svfiprintf_r+0x14a>
 8003ecc:	2300      	movs	r3, #0
 8003ece:	4619      	mov	r1, r3
 8003ed0:	9305      	str	r3, [sp, #20]
 8003ed2:	1c78      	adds	r0, r7, #1
 8003ed4:	240a      	movs	r4, #10
 8003ed6:	4607      	mov	r7, r0
 8003ed8:	783a      	ldrb	r2, [r7, #0]
 8003eda:	3001      	adds	r0, #1
 8003edc:	3a30      	subs	r2, #48	; 0x30
 8003ede:	2a09      	cmp	r2, #9
 8003ee0:	d803      	bhi.n	8003eea <_svfiprintf_r+0x146>
 8003ee2:	fb04 2101 	mla	r1, r4, r1, r2
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e7f5      	b.n	8003ed6 <_svfiprintf_r+0x132>
 8003eea:	b103      	cbz	r3, 8003eee <_svfiprintf_r+0x14a>
 8003eec:	9105      	str	r1, [sp, #20]
 8003eee:	2203      	movs	r2, #3
 8003ef0:	7839      	ldrb	r1, [r7, #0]
 8003ef2:	4822      	ldr	r0, [pc, #136]	; (8003f7c <_svfiprintf_r+0x1d8>)
 8003ef4:	f000 f9e6 	bl	80042c4 <memchr>
 8003ef8:	b140      	cbz	r0, 8003f0c <_svfiprintf_r+0x168>
 8003efa:	2340      	movs	r3, #64	; 0x40
 8003efc:	ebcb 0000 	rsb	r0, fp, r0
 8003f00:	fa03 f000 	lsl.w	r0, r3, r0
 8003f04:	9b04      	ldr	r3, [sp, #16]
 8003f06:	3701      	adds	r7, #1
 8003f08:	4318      	orrs	r0, r3
 8003f0a:	9004      	str	r0, [sp, #16]
 8003f0c:	7839      	ldrb	r1, [r7, #0]
 8003f0e:	2206      	movs	r2, #6
 8003f10:	481b      	ldr	r0, [pc, #108]	; (8003f80 <_svfiprintf_r+0x1dc>)
 8003f12:	1c7e      	adds	r6, r7, #1
 8003f14:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003f18:	f000 f9d4 	bl	80042c4 <memchr>
 8003f1c:	b188      	cbz	r0, 8003f42 <_svfiprintf_r+0x19e>
 8003f1e:	4b19      	ldr	r3, [pc, #100]	; (8003f84 <_svfiprintf_r+0x1e0>)
 8003f20:	b933      	cbnz	r3, 8003f30 <_svfiprintf_r+0x18c>
 8003f22:	9b03      	ldr	r3, [sp, #12]
 8003f24:	3307      	adds	r3, #7
 8003f26:	f023 0307 	bic.w	r3, r3, #7
 8003f2a:	3308      	adds	r3, #8
 8003f2c:	9303      	str	r3, [sp, #12]
 8003f2e:	e014      	b.n	8003f5a <_svfiprintf_r+0x1b6>
 8003f30:	ab03      	add	r3, sp, #12
 8003f32:	9300      	str	r3, [sp, #0]
 8003f34:	462a      	mov	r2, r5
 8003f36:	4b14      	ldr	r3, [pc, #80]	; (8003f88 <_svfiprintf_r+0x1e4>)
 8003f38:	a904      	add	r1, sp, #16
 8003f3a:	4640      	mov	r0, r8
 8003f3c:	f3af 8000 	nop.w
 8003f40:	e007      	b.n	8003f52 <_svfiprintf_r+0x1ae>
 8003f42:	ab03      	add	r3, sp, #12
 8003f44:	9300      	str	r3, [sp, #0]
 8003f46:	462a      	mov	r2, r5
 8003f48:	4b0f      	ldr	r3, [pc, #60]	; (8003f88 <_svfiprintf_r+0x1e4>)
 8003f4a:	a904      	add	r1, sp, #16
 8003f4c:	4640      	mov	r0, r8
 8003f4e:	f000 f893 	bl	8004078 <_printf_i>
 8003f52:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003f56:	4682      	mov	sl, r0
 8003f58:	d003      	beq.n	8003f62 <_svfiprintf_r+0x1be>
 8003f5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f5c:	4453      	add	r3, sl
 8003f5e:	9309      	str	r3, [sp, #36]	; 0x24
 8003f60:	e742      	b.n	8003de8 <_svfiprintf_r+0x44>
 8003f62:	89ab      	ldrh	r3, [r5, #12]
 8003f64:	065b      	lsls	r3, r3, #25
 8003f66:	d401      	bmi.n	8003f6c <_svfiprintf_r+0x1c8>
 8003f68:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003f6a:	e001      	b.n	8003f70 <_svfiprintf_r+0x1cc>
 8003f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8003f70:	b01d      	add	sp, #116	; 0x74
 8003f72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f76:	bf00      	nop
 8003f78:	0800450b 	.word	0x0800450b
 8003f7c:	08004511 	.word	0x08004511
 8003f80:	08004515 	.word	0x08004515
 8003f84:	00000000 	.word	0x00000000
 8003f88:	08003cf1 	.word	0x08003cf1

08003f8c <_printf_common>:
 8003f8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f90:	4691      	mov	r9, r2
 8003f92:	461f      	mov	r7, r3
 8003f94:	690a      	ldr	r2, [r1, #16]
 8003f96:	688b      	ldr	r3, [r1, #8]
 8003f98:	4606      	mov	r6, r0
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	bfb8      	it	lt
 8003f9e:	4613      	movlt	r3, r2
 8003fa0:	f8c9 3000 	str.w	r3, [r9]
 8003fa4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003fa8:	460c      	mov	r4, r1
 8003faa:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003fae:	b112      	cbz	r2, 8003fb6 <_printf_common+0x2a>
 8003fb0:	3301      	adds	r3, #1
 8003fb2:	f8c9 3000 	str.w	r3, [r9]
 8003fb6:	6823      	ldr	r3, [r4, #0]
 8003fb8:	0699      	lsls	r1, r3, #26
 8003fba:	bf42      	ittt	mi
 8003fbc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003fc0:	3302      	addmi	r3, #2
 8003fc2:	f8c9 3000 	strmi.w	r3, [r9]
 8003fc6:	6825      	ldr	r5, [r4, #0]
 8003fc8:	f015 0506 	ands.w	r5, r5, #6
 8003fcc:	d110      	bne.n	8003ff0 <_printf_common+0x64>
 8003fce:	f104 0a19 	add.w	sl, r4, #25
 8003fd2:	e007      	b.n	8003fe4 <_printf_common+0x58>
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	4652      	mov	r2, sl
 8003fd8:	4639      	mov	r1, r7
 8003fda:	4630      	mov	r0, r6
 8003fdc:	47c0      	blx	r8
 8003fde:	3001      	adds	r0, #1
 8003fe0:	d01a      	beq.n	8004018 <_printf_common+0x8c>
 8003fe2:	3501      	adds	r5, #1
 8003fe4:	68e3      	ldr	r3, [r4, #12]
 8003fe6:	f8d9 2000 	ldr.w	r2, [r9]
 8003fea:	1a9b      	subs	r3, r3, r2
 8003fec:	429d      	cmp	r5, r3
 8003fee:	dbf1      	blt.n	8003fd4 <_printf_common+0x48>
 8003ff0:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003ff4:	6822      	ldr	r2, [r4, #0]
 8003ff6:	3300      	adds	r3, #0
 8003ff8:	bf18      	it	ne
 8003ffa:	2301      	movne	r3, #1
 8003ffc:	0692      	lsls	r2, r2, #26
 8003ffe:	d50f      	bpl.n	8004020 <_printf_common+0x94>
 8004000:	18e1      	adds	r1, r4, r3
 8004002:	2030      	movs	r0, #48	; 0x30
 8004004:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004008:	1c5a      	adds	r2, r3, #1
 800400a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800400e:	4422      	add	r2, r4
 8004010:	3302      	adds	r3, #2
 8004012:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004016:	e003      	b.n	8004020 <_printf_common+0x94>
 8004018:	f04f 30ff 	mov.w	r0, #4294967295
 800401c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004020:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004024:	4639      	mov	r1, r7
 8004026:	4630      	mov	r0, r6
 8004028:	47c0      	blx	r8
 800402a:	3001      	adds	r0, #1
 800402c:	d0f4      	beq.n	8004018 <_printf_common+0x8c>
 800402e:	6822      	ldr	r2, [r4, #0]
 8004030:	f8d9 5000 	ldr.w	r5, [r9]
 8004034:	68e3      	ldr	r3, [r4, #12]
 8004036:	f002 0206 	and.w	r2, r2, #6
 800403a:	2a04      	cmp	r2, #4
 800403c:	bf08      	it	eq
 800403e:	1b5d      	subeq	r5, r3, r5
 8004040:	6922      	ldr	r2, [r4, #16]
 8004042:	68a3      	ldr	r3, [r4, #8]
 8004044:	bf0c      	ite	eq
 8004046:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800404a:	2500      	movne	r5, #0
 800404c:	4293      	cmp	r3, r2
 800404e:	bfc4      	itt	gt
 8004050:	1a9b      	subgt	r3, r3, r2
 8004052:	18ed      	addgt	r5, r5, r3
 8004054:	f04f 0900 	mov.w	r9, #0
 8004058:	341a      	adds	r4, #26
 800405a:	454d      	cmp	r5, r9
 800405c:	d009      	beq.n	8004072 <_printf_common+0xe6>
 800405e:	2301      	movs	r3, #1
 8004060:	4622      	mov	r2, r4
 8004062:	4639      	mov	r1, r7
 8004064:	4630      	mov	r0, r6
 8004066:	47c0      	blx	r8
 8004068:	3001      	adds	r0, #1
 800406a:	d0d5      	beq.n	8004018 <_printf_common+0x8c>
 800406c:	f109 0901 	add.w	r9, r9, #1
 8004070:	e7f3      	b.n	800405a <_printf_common+0xce>
 8004072:	2000      	movs	r0, #0
 8004074:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004078 <_printf_i>:
 8004078:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800407c:	4617      	mov	r7, r2
 800407e:	7e0a      	ldrb	r2, [r1, #24]
 8004080:	b085      	sub	sp, #20
 8004082:	2a6e      	cmp	r2, #110	; 0x6e
 8004084:	4698      	mov	r8, r3
 8004086:	4606      	mov	r6, r0
 8004088:	460c      	mov	r4, r1
 800408a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800408c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8004090:	f000 80ae 	beq.w	80041f0 <_printf_i+0x178>
 8004094:	d811      	bhi.n	80040ba <_printf_i+0x42>
 8004096:	2a63      	cmp	r2, #99	; 0x63
 8004098:	d022      	beq.n	80040e0 <_printf_i+0x68>
 800409a:	d809      	bhi.n	80040b0 <_printf_i+0x38>
 800409c:	2a00      	cmp	r2, #0
 800409e:	f000 80bb 	beq.w	8004218 <_printf_i+0x1a0>
 80040a2:	2a58      	cmp	r2, #88	; 0x58
 80040a4:	f040 80ca 	bne.w	800423c <_printf_i+0x1c4>
 80040a8:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80040ac:	4983      	ldr	r1, [pc, #524]	; (80042bc <_printf_i+0x244>)
 80040ae:	e055      	b.n	800415c <_printf_i+0xe4>
 80040b0:	2a64      	cmp	r2, #100	; 0x64
 80040b2:	d01e      	beq.n	80040f2 <_printf_i+0x7a>
 80040b4:	2a69      	cmp	r2, #105	; 0x69
 80040b6:	d01c      	beq.n	80040f2 <_printf_i+0x7a>
 80040b8:	e0c0      	b.n	800423c <_printf_i+0x1c4>
 80040ba:	2a73      	cmp	r2, #115	; 0x73
 80040bc:	f000 80b0 	beq.w	8004220 <_printf_i+0x1a8>
 80040c0:	d809      	bhi.n	80040d6 <_printf_i+0x5e>
 80040c2:	2a6f      	cmp	r2, #111	; 0x6f
 80040c4:	d02e      	beq.n	8004124 <_printf_i+0xac>
 80040c6:	2a70      	cmp	r2, #112	; 0x70
 80040c8:	f040 80b8 	bne.w	800423c <_printf_i+0x1c4>
 80040cc:	680a      	ldr	r2, [r1, #0]
 80040ce:	f042 0220 	orr.w	r2, r2, #32
 80040d2:	600a      	str	r2, [r1, #0]
 80040d4:	e03e      	b.n	8004154 <_printf_i+0xdc>
 80040d6:	2a75      	cmp	r2, #117	; 0x75
 80040d8:	d024      	beq.n	8004124 <_printf_i+0xac>
 80040da:	2a78      	cmp	r2, #120	; 0x78
 80040dc:	d03a      	beq.n	8004154 <_printf_i+0xdc>
 80040de:	e0ad      	b.n	800423c <_printf_i+0x1c4>
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80040e6:	1d11      	adds	r1, r2, #4
 80040e8:	6019      	str	r1, [r3, #0]
 80040ea:	6813      	ldr	r3, [r2, #0]
 80040ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80040f0:	e0a8      	b.n	8004244 <_printf_i+0x1cc>
 80040f2:	6821      	ldr	r1, [r4, #0]
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	f011 0f80 	tst.w	r1, #128	; 0x80
 80040fa:	d002      	beq.n	8004102 <_printf_i+0x8a>
 80040fc:	1d11      	adds	r1, r2, #4
 80040fe:	6019      	str	r1, [r3, #0]
 8004100:	e008      	b.n	8004114 <_printf_i+0x9c>
 8004102:	f011 0f40 	tst.w	r1, #64	; 0x40
 8004106:	f102 0104 	add.w	r1, r2, #4
 800410a:	6019      	str	r1, [r3, #0]
 800410c:	d002      	beq.n	8004114 <_printf_i+0x9c>
 800410e:	f9b2 3000 	ldrsh.w	r3, [r2]
 8004112:	e000      	b.n	8004116 <_printf_i+0x9e>
 8004114:	6813      	ldr	r3, [r2, #0]
 8004116:	2b00      	cmp	r3, #0
 8004118:	da3c      	bge.n	8004194 <_printf_i+0x11c>
 800411a:	222d      	movs	r2, #45	; 0x2d
 800411c:	425b      	negs	r3, r3
 800411e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004122:	e037      	b.n	8004194 <_printf_i+0x11c>
 8004124:	6821      	ldr	r1, [r4, #0]
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	f011 0f80 	tst.w	r1, #128	; 0x80
 800412c:	d002      	beq.n	8004134 <_printf_i+0xbc>
 800412e:	1d11      	adds	r1, r2, #4
 8004130:	6019      	str	r1, [r3, #0]
 8004132:	e007      	b.n	8004144 <_printf_i+0xcc>
 8004134:	f011 0f40 	tst.w	r1, #64	; 0x40
 8004138:	f102 0104 	add.w	r1, r2, #4
 800413c:	6019      	str	r1, [r3, #0]
 800413e:	d001      	beq.n	8004144 <_printf_i+0xcc>
 8004140:	8813      	ldrh	r3, [r2, #0]
 8004142:	e000      	b.n	8004146 <_printf_i+0xce>
 8004144:	6813      	ldr	r3, [r2, #0]
 8004146:	7e22      	ldrb	r2, [r4, #24]
 8004148:	495c      	ldr	r1, [pc, #368]	; (80042bc <_printf_i+0x244>)
 800414a:	2a6f      	cmp	r2, #111	; 0x6f
 800414c:	bf14      	ite	ne
 800414e:	220a      	movne	r2, #10
 8004150:	2208      	moveq	r2, #8
 8004152:	e01b      	b.n	800418c <_printf_i+0x114>
 8004154:	2278      	movs	r2, #120	; 0x78
 8004156:	495a      	ldr	r1, [pc, #360]	; (80042c0 <_printf_i+0x248>)
 8004158:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800415c:	6822      	ldr	r2, [r4, #0]
 800415e:	6818      	ldr	r0, [r3, #0]
 8004160:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004164:	f100 0504 	add.w	r5, r0, #4
 8004168:	601d      	str	r5, [r3, #0]
 800416a:	d103      	bne.n	8004174 <_printf_i+0xfc>
 800416c:	0655      	lsls	r5, r2, #25
 800416e:	d501      	bpl.n	8004174 <_printf_i+0xfc>
 8004170:	8803      	ldrh	r3, [r0, #0]
 8004172:	e000      	b.n	8004176 <_printf_i+0xfe>
 8004174:	6803      	ldr	r3, [r0, #0]
 8004176:	07d0      	lsls	r0, r2, #31
 8004178:	bf44      	itt	mi
 800417a:	f042 0220 	orrmi.w	r2, r2, #32
 800417e:	6022      	strmi	r2, [r4, #0]
 8004180:	b91b      	cbnz	r3, 800418a <_printf_i+0x112>
 8004182:	6822      	ldr	r2, [r4, #0]
 8004184:	f022 0220 	bic.w	r2, r2, #32
 8004188:	6022      	str	r2, [r4, #0]
 800418a:	2210      	movs	r2, #16
 800418c:	2000      	movs	r0, #0
 800418e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8004192:	e001      	b.n	8004198 <_printf_i+0x120>
 8004194:	4949      	ldr	r1, [pc, #292]	; (80042bc <_printf_i+0x244>)
 8004196:	220a      	movs	r2, #10
 8004198:	6865      	ldr	r5, [r4, #4]
 800419a:	2d00      	cmp	r5, #0
 800419c:	60a5      	str	r5, [r4, #8]
 800419e:	db08      	blt.n	80041b2 <_printf_i+0x13a>
 80041a0:	6820      	ldr	r0, [r4, #0]
 80041a2:	f020 0004 	bic.w	r0, r0, #4
 80041a6:	6020      	str	r0, [r4, #0]
 80041a8:	b92b      	cbnz	r3, 80041b6 <_printf_i+0x13e>
 80041aa:	2d00      	cmp	r5, #0
 80041ac:	d17d      	bne.n	80042aa <_printf_i+0x232>
 80041ae:	4675      	mov	r5, lr
 80041b0:	e00c      	b.n	80041cc <_printf_i+0x154>
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d079      	beq.n	80042aa <_printf_i+0x232>
 80041b6:	4675      	mov	r5, lr
 80041b8:	fbb3 f0f2 	udiv	r0, r3, r2
 80041bc:	fb02 3310 	mls	r3, r2, r0, r3
 80041c0:	5ccb      	ldrb	r3, [r1, r3]
 80041c2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80041c6:	4603      	mov	r3, r0
 80041c8:	2800      	cmp	r0, #0
 80041ca:	d1f5      	bne.n	80041b8 <_printf_i+0x140>
 80041cc:	2a08      	cmp	r2, #8
 80041ce:	d10b      	bne.n	80041e8 <_printf_i+0x170>
 80041d0:	6823      	ldr	r3, [r4, #0]
 80041d2:	07da      	lsls	r2, r3, #31
 80041d4:	d508      	bpl.n	80041e8 <_printf_i+0x170>
 80041d6:	6923      	ldr	r3, [r4, #16]
 80041d8:	6862      	ldr	r2, [r4, #4]
 80041da:	429a      	cmp	r2, r3
 80041dc:	bfde      	ittt	le
 80041de:	2330      	movle	r3, #48	; 0x30
 80041e0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80041e4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80041e8:	ebc5 030e 	rsb	r3, r5, lr
 80041ec:	6123      	str	r3, [r4, #16]
 80041ee:	e02e      	b.n	800424e <_printf_i+0x1d6>
 80041f0:	6808      	ldr	r0, [r1, #0]
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	f010 0f80 	tst.w	r0, #128	; 0x80
 80041f8:	6949      	ldr	r1, [r1, #20]
 80041fa:	d003      	beq.n	8004204 <_printf_i+0x18c>
 80041fc:	1d10      	adds	r0, r2, #4
 80041fe:	6018      	str	r0, [r3, #0]
 8004200:	6813      	ldr	r3, [r2, #0]
 8004202:	e008      	b.n	8004216 <_printf_i+0x19e>
 8004204:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004208:	f102 0004 	add.w	r0, r2, #4
 800420c:	6018      	str	r0, [r3, #0]
 800420e:	6813      	ldr	r3, [r2, #0]
 8004210:	d001      	beq.n	8004216 <_printf_i+0x19e>
 8004212:	8019      	strh	r1, [r3, #0]
 8004214:	e000      	b.n	8004218 <_printf_i+0x1a0>
 8004216:	6019      	str	r1, [r3, #0]
 8004218:	2300      	movs	r3, #0
 800421a:	6123      	str	r3, [r4, #16]
 800421c:	4675      	mov	r5, lr
 800421e:	e016      	b.n	800424e <_printf_i+0x1d6>
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	1d11      	adds	r1, r2, #4
 8004224:	6019      	str	r1, [r3, #0]
 8004226:	6815      	ldr	r5, [r2, #0]
 8004228:	2100      	movs	r1, #0
 800422a:	6862      	ldr	r2, [r4, #4]
 800422c:	4628      	mov	r0, r5
 800422e:	f000 f849 	bl	80042c4 <memchr>
 8004232:	b108      	cbz	r0, 8004238 <_printf_i+0x1c0>
 8004234:	1b40      	subs	r0, r0, r5
 8004236:	6060      	str	r0, [r4, #4]
 8004238:	6863      	ldr	r3, [r4, #4]
 800423a:	e004      	b.n	8004246 <_printf_i+0x1ce>
 800423c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004240:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8004244:	2301      	movs	r3, #1
 8004246:	6123      	str	r3, [r4, #16]
 8004248:	2300      	movs	r3, #0
 800424a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800424e:	f8cd 8000 	str.w	r8, [sp]
 8004252:	463b      	mov	r3, r7
 8004254:	aa03      	add	r2, sp, #12
 8004256:	4621      	mov	r1, r4
 8004258:	4630      	mov	r0, r6
 800425a:	f7ff fe97 	bl	8003f8c <_printf_common>
 800425e:	3001      	adds	r0, #1
 8004260:	d102      	bne.n	8004268 <_printf_i+0x1f0>
 8004262:	f04f 30ff 	mov.w	r0, #4294967295
 8004266:	e026      	b.n	80042b6 <_printf_i+0x23e>
 8004268:	6923      	ldr	r3, [r4, #16]
 800426a:	462a      	mov	r2, r5
 800426c:	4639      	mov	r1, r7
 800426e:	4630      	mov	r0, r6
 8004270:	47c0      	blx	r8
 8004272:	3001      	adds	r0, #1
 8004274:	d0f5      	beq.n	8004262 <_printf_i+0x1ea>
 8004276:	6823      	ldr	r3, [r4, #0]
 8004278:	079b      	lsls	r3, r3, #30
 800427a:	d510      	bpl.n	800429e <_printf_i+0x226>
 800427c:	2500      	movs	r5, #0
 800427e:	f104 0919 	add.w	r9, r4, #25
 8004282:	e007      	b.n	8004294 <_printf_i+0x21c>
 8004284:	2301      	movs	r3, #1
 8004286:	464a      	mov	r2, r9
 8004288:	4639      	mov	r1, r7
 800428a:	4630      	mov	r0, r6
 800428c:	47c0      	blx	r8
 800428e:	3001      	adds	r0, #1
 8004290:	d0e7      	beq.n	8004262 <_printf_i+0x1ea>
 8004292:	3501      	adds	r5, #1
 8004294:	68e3      	ldr	r3, [r4, #12]
 8004296:	9a03      	ldr	r2, [sp, #12]
 8004298:	1a9b      	subs	r3, r3, r2
 800429a:	429d      	cmp	r5, r3
 800429c:	dbf2      	blt.n	8004284 <_printf_i+0x20c>
 800429e:	68e0      	ldr	r0, [r4, #12]
 80042a0:	9b03      	ldr	r3, [sp, #12]
 80042a2:	4298      	cmp	r0, r3
 80042a4:	bfb8      	it	lt
 80042a6:	4618      	movlt	r0, r3
 80042a8:	e005      	b.n	80042b6 <_printf_i+0x23e>
 80042aa:	780b      	ldrb	r3, [r1, #0]
 80042ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80042b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80042b4:	e78a      	b.n	80041cc <_printf_i+0x154>
 80042b6:	b005      	add	sp, #20
 80042b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80042bc:	0800451c 	.word	0x0800451c
 80042c0:	0800452d 	.word	0x0800452d

080042c4 <memchr>:
 80042c4:	b510      	push	{r4, lr}
 80042c6:	b2c9      	uxtb	r1, r1
 80042c8:	4402      	add	r2, r0
 80042ca:	4290      	cmp	r0, r2
 80042cc:	4603      	mov	r3, r0
 80042ce:	d005      	beq.n	80042dc <memchr+0x18>
 80042d0:	781c      	ldrb	r4, [r3, #0]
 80042d2:	3001      	adds	r0, #1
 80042d4:	428c      	cmp	r4, r1
 80042d6:	d1f8      	bne.n	80042ca <memchr+0x6>
 80042d8:	4618      	mov	r0, r3
 80042da:	bd10      	pop	{r4, pc}
 80042dc:	2000      	movs	r0, #0
 80042de:	bd10      	pop	{r4, pc}

080042e0 <memcpy>:
 80042e0:	b510      	push	{r4, lr}
 80042e2:	1e43      	subs	r3, r0, #1
 80042e4:	440a      	add	r2, r1
 80042e6:	4291      	cmp	r1, r2
 80042e8:	d004      	beq.n	80042f4 <memcpy+0x14>
 80042ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80042ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80042f2:	e7f8      	b.n	80042e6 <memcpy+0x6>
 80042f4:	bd10      	pop	{r4, pc}

080042f6 <memmove>:
 80042f6:	4288      	cmp	r0, r1
 80042f8:	b510      	push	{r4, lr}
 80042fa:	eb01 0302 	add.w	r3, r1, r2
 80042fe:	d801      	bhi.n	8004304 <memmove+0xe>
 8004300:	1e42      	subs	r2, r0, #1
 8004302:	e00b      	b.n	800431c <memmove+0x26>
 8004304:	4298      	cmp	r0, r3
 8004306:	d2fb      	bcs.n	8004300 <memmove+0xa>
 8004308:	1881      	adds	r1, r0, r2
 800430a:	1ad2      	subs	r2, r2, r3
 800430c:	42d3      	cmn	r3, r2
 800430e:	d004      	beq.n	800431a <memmove+0x24>
 8004310:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004314:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004318:	e7f8      	b.n	800430c <memmove+0x16>
 800431a:	bd10      	pop	{r4, pc}
 800431c:	4299      	cmp	r1, r3
 800431e:	d004      	beq.n	800432a <memmove+0x34>
 8004320:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004324:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004328:	e7f8      	b.n	800431c <memmove+0x26>
 800432a:	bd10      	pop	{r4, pc}

0800432c <_realloc_r>:
 800432c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800432e:	4607      	mov	r7, r0
 8004330:	4615      	mov	r5, r2
 8004332:	460e      	mov	r6, r1
 8004334:	b921      	cbnz	r1, 8004340 <_realloc_r+0x14>
 8004336:	4611      	mov	r1, r2
 8004338:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800433c:	f7ff bc3c 	b.w	8003bb8 <_malloc_r>
 8004340:	b91a      	cbnz	r2, 800434a <_realloc_r+0x1e>
 8004342:	f7ff fbed 	bl	8003b20 <_free_r>
 8004346:	4628      	mov	r0, r5
 8004348:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800434a:	f000 f815 	bl	8004378 <_malloc_usable_size_r>
 800434e:	4285      	cmp	r5, r0
 8004350:	d90e      	bls.n	8004370 <_realloc_r+0x44>
 8004352:	4629      	mov	r1, r5
 8004354:	4638      	mov	r0, r7
 8004356:	f7ff fc2f 	bl	8003bb8 <_malloc_r>
 800435a:	4604      	mov	r4, r0
 800435c:	b150      	cbz	r0, 8004374 <_realloc_r+0x48>
 800435e:	4631      	mov	r1, r6
 8004360:	462a      	mov	r2, r5
 8004362:	f7ff ffbd 	bl	80042e0 <memcpy>
 8004366:	4631      	mov	r1, r6
 8004368:	4638      	mov	r0, r7
 800436a:	f7ff fbd9 	bl	8003b20 <_free_r>
 800436e:	e001      	b.n	8004374 <_realloc_r+0x48>
 8004370:	4630      	mov	r0, r6
 8004372:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004374:	4620      	mov	r0, r4
 8004376:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004378 <_malloc_usable_size_r>:
 8004378:	f851 0c04 	ldr.w	r0, [r1, #-4]
 800437c:	2800      	cmp	r0, #0
 800437e:	bfbe      	ittt	lt
 8004380:	1809      	addlt	r1, r1, r0
 8004382:	f851 3c04 	ldrlt.w	r3, [r1, #-4]
 8004386:	18c0      	addlt	r0, r0, r3
 8004388:	3804      	subs	r0, #4
 800438a:	4770      	bx	lr

0800438c <_sbrk>:
 800438c:	4b04      	ldr	r3, [pc, #16]	; (80043a0 <_sbrk+0x14>)
 800438e:	4602      	mov	r2, r0
 8004390:	6819      	ldr	r1, [r3, #0]
 8004392:	b909      	cbnz	r1, 8004398 <_sbrk+0xc>
 8004394:	4903      	ldr	r1, [pc, #12]	; (80043a4 <_sbrk+0x18>)
 8004396:	6019      	str	r1, [r3, #0]
 8004398:	6818      	ldr	r0, [r3, #0]
 800439a:	4402      	add	r2, r0
 800439c:	601a      	str	r2, [r3, #0]
 800439e:	4770      	bx	lr
 80043a0:	20000408 	.word	0x20000408
 80043a4:	20000ce4 	.word	0x20000ce4

080043a8 <_init>:
 80043a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043aa:	bf00      	nop
 80043ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043ae:	bc08      	pop	{r3}
 80043b0:	469e      	mov	lr, r3
 80043b2:	4770      	bx	lr

080043b4 <_fini>:
 80043b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043b6:	bf00      	nop
 80043b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043ba:	bc08      	pop	{r3}
 80043bc:	469e      	mov	lr, r3
 80043be:	4770      	bx	lr
